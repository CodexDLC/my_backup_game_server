# ===================================================================
# ЭТАП 1: "СБОРЩИК" (Builder)
# Используем полный образ Python для надежной установки зависимостей.
# На этом этапе могут быть установлены компиляторы и другие инструменты.
# ===================================================================
FROM python:3.11-slim-bookworm as builder

# Устанавливаем рабочую директорию
WORKDIR /app

# Устанавливаем переменные окружения для виртуального окружения
# Это изолирует наши зависимости и упрощает их копирование
ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Обновляем pip и устанавливаем wheel для ускорения установки пакетов
RUN pip install --upgrade pip wheel

# Копируем ТОЛЬКО файл с зависимостями.
# Это позволяет Docker кэшировать этот слой. Если requirements.txt не меняется,
# зависимости не будут переустанавливаться при каждом изменении кода.
COPY requirements.txt .

# Устанавливаем зависимости в виртуальное окружение
# --no-cache-dir отключает кэш pip, что немного уменьшает размер слоя
RUN pip install --no-cache-dir -r requirements.txt


# ===================================================================
# ЭТАП 2: "ФИНАЛЬНЫЙ ОБРАЗ" (Final)
# Начинаем с чистого, легковесного образа. В нем не будет ничего лишнего.
# ===================================================================
FROM python:3.11-slim-bookworm

# Устанавливаем рабочую директорию
WORKDIR /app

# Создаем непривилегированного пользователя для запуска приложения.
# Запуск от root'а в контейнере — плохая практика безопасности.
RUN groupadd --gid 1001 appuser && \
    useradd --uid 1001 --gid 1001 --shell /bin/bash --create-home appuser
USER appuser

# Копируем ТОЛЬКО готовое виртуальное окружение из этапа "Сборщик".
# Мы не запускаем pip install заново!
COPY --from=builder /opt/venv /opt/venv

# Копируем ТОЛЬКО необходимый для работы код приложения.
# Например, для rest_api это может быть папка 'game_server'.
# Используйте .dockerignore, чтобы исключить лишние файлы.
COPY --chown=appuser:appuser ./game_server ./game_server
COPY --chown=appuser:appuser ./Discord_API ./Discord_API 

# Активируем виртуальное окружение для всех последующих команд
ENV PATH="/opt/venv/bin:$PATH"

# Указываем команду для запуска сервиса.
# Замените ее на команду для вашего конкретного сервиса.
# Пример для rest_api:
CMD ["uvicorn", "game_server.api_rest.main:app", "--host", "0.0.0.0", "--port", "8000"]
# Пример для celery_worker:
# CMD ["celery", "-A", "...", "worker", ...]
