import os
import sys
import aiohttp
import logging

# üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# üîó –ü–æ–ª—É—á–µ–Ω–∏–µ URL API
API_URL = os.getenv("GAME_SERVER_API", "http://localhost:8000")

from configs.logging_config import logger

logger = logging.getLogger(__name__)

# ---------------------- –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏—Ä–µ ----------------------
async def get_world_id():
    """ –ó–∞–ø—Ä–æ—Å ID —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞ –∏–∑ API. """
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/system/gameworld/world") as response:
            if response.status == 200:
                world_data = await response.json()
                logger.info(f"INFO –ü–æ–ª—É—á–µ–Ω world_id: {world_data.get('id')}")
                return world_data.get("id")  
            else:
                logger.error("ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –º–∏—Ä–∞.")
                return None

# ---------------------- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π –≤ –≥–∏–ª—å–¥–∏–∏ ----------------------
async def get_existing_roles(guild_id: int):
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–∏–ª—å–¥–∏–∏. """
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/discord/roles/list_roles/{guild_id}") as response:
            if response.status == 200:
                role_data = await response.json()
                roles = {role["access_code"] for role in role_data.get("roles", [])}
                logger.info(f"INFO –ù–∞–π–¥–µ–Ω–æ {len(roles)} —Ä–æ–ª–µ–π –¥–ª—è guild_id={guild_id}")
                return roles
            else:
                logger.error(f"ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–æ–ª–µ–π (guild_id: {guild_id}).")
                return set()

# ---------------------- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–ª–∞–≥–æ–≤ ----------------------
async def get_available_flags():
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ñ–ª–∞–≥–∏) –≤ —Å–∏—Å—Ç–µ–º–µ. """
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/system/entities/available") as response:
            if response.status == 200:
                flag_data = await response.json()
                logger.info(f"INFO –ü–æ–ª—É—á–µ–Ω–æ {len(flag_data.get('flags', []))} —Ñ–ª–∞–≥–æ–≤.")
                return flag_data.get("flags", [])
            else:
                logger.error("ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–æ–≤.")
                return []

# ---------------------- –ó–∞–ø–∏—Å—å —Ä–æ–ª–µ–π –≤ –±–∞–∑—É ----------------------
async def save_roles_to_db(guild_id: int, world_id: str, roles: list):
    """ –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ä–æ–ª–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. """
    async with aiohttp.ClientSession() as session:
        payload = {"guild_id": guild_id, "world_id": world_id, "roles": roles}

        async with session.post(f"{API_URL}/discord/roles/create_roles", json=payload) as response:
            if response.status == 200:
                logger.info(f"INFO –ó–∞–ø–∏—Å–∞–Ω—ã {len(roles)} –Ω–æ–≤—ã—Ö —Ä–æ–ª–µ–π –≤ –±–∞–∑—É (world_id={world_id}).")
            else:
                logger.error("ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–æ–ª–µ–π –≤ API.")

# ---------------------- –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Ä–æ–ª–∏ ----------------------
async def delete_role_from_db(guild_id: int, access_code: int):
    """ –£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É —Ä–æ–ª—å –ø–æ –µ—ë access_code. """
    async with aiohttp.ClientSession() as session:
        async with session.delete(f"{API_URL}/discord/roles/delete_role/{guild_id}/{access_code}") as response:
            if response.status == 200:
                logger.info(f"üóë –†–æ–ª—å access_code={access_code} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                return await response.json()
            else:
                logger.error(f"ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ access_code={access_code}.")
                return {"status": "error"}

# ---------------------- –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π ----------------------
async def delete_all_roles_from_db(guild_id: int):
    """ –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ä–æ–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–∏–ª—å–¥–∏–∏. """
    async with aiohttp.ClientSession() as session:
        async with session.delete(f"{API_URL}/discord/roles/delete_all_roles/{guild_id}") as response:
            if response.status == 200:
                logger.info(f"üóë –í—Å–µ —Ä–æ–ª–∏ –¥–ª—è guild_id={guild_id} —É–¥–∞–ª–µ–Ω—ã.")
                return await response.json()
            else:
                logger.error(f"ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π –≤ guild_id={guild_id}.")
                return {"status": "error"}
