import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

from game_server.services.logging.logging_setup import logger
from discord.ext import commands

from bot_service.Discord_API.api.roles import *
from bot_service.Discord_API.discord_functions.roles_functions import create_roles_in_discord, delete_roles_from_discord



class RoleManager(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(name="cr", help="–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–µ —Ä–æ–ª–∏ –≤ Discord –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ –±–∞–∑—É.")
    @commands.has_permissions(administrator=True)
    async def create_roles(self, ctx):
        await ctx.send("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π...")
        guild_id = ctx.guild.id  
        world_id = await get_world_id()
        if not world_id:
            await ctx.send("ERROR –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –º–∏—Ä–∞!")
            return

        existing_roles = await get_existing_roles(guild_id)
        available_flags = await get_available_flags()

        # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Ä–æ–ª–µ–π (–±–µ–∑ –¥—É–±–ª–µ–π)
        roles_to_create = [
            {"role_name": flag["code_name"], "access_code": flag["access_code"], "world_id": world_id}
            for flag in available_flags if flag["access_code"] not in existing_roles
        ]

        if not roles_to_create:
            await ctx.send("INFO –í—Å–µ —Ä–æ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!")
            return

        # üîπ –°–æ–∑–¥–∞—ë–º —Ä–æ–ª–∏ –≤ Discord
        created_roles = await create_roles_in_discord(guild_id, self.bot, roles_to_create)

        # üîπ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–æ–ª–∏ –≤ –±–∞–∑—É
        await save_roles_to_db(guild_id, world_id, created_roles)

        await ctx.send(f"INFO –°–æ–∑–¥–∞–Ω–æ {len(created_roles)} –Ω–æ–≤—ã—Ö —Ä–æ–ª–µ–π –≤ –º–∏—Ä–µ (ID: {world_id})!")






    @commands.command(name="list_roles")
    @commands.has_permissions(administrator=True)  # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    async def list_roles(self, ctx):
        guild_id = ctx.guild.id  # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Ä–≤–µ—Ä–∞

        logger.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `!list_roles` –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ID: {guild_id}")

        # INFO –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã API
        existing_roles = await get_existing_roles(guild_id)
        if not existing_roles:
            await ctx.send("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π!")
            logger.info("üì≠ –ö–æ–º–∞–Ω–¥–∞ `!list_roles`: —Ä–æ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # üîπ –§–æ—Ä–º–∏—Ä—É–µ–º —É–¥–æ–±–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π
        role_list = "\n".join([f"üîπ `{role}`" for role in existing_roles])

        logger.info(f"üìä –°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –≤ –±–∞–∑–µ ({len(existing_roles)}):\n{role_list}")
        await ctx.send(f"üìä **–°–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –≤ –±–∞–∑–µ ({len(existing_roles)}):**\n{role_list}")


    @commands.command(name="del_roles")
    @commands.has_permissions(administrator=True)
    async def delete_roles(self, ctx):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ä–æ–ª–∏ (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö) –∏–∑ Discord –∏ –±–∞–∑—ã."""
        guild_id = ctx.guild.id

        logger.info(f"üóë –ó–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ `!del_roles` –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ID: {guild_id}")

        # INFO –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –≤ Discord
        deleted_count = await delete_roles_from_discord(guild_id, self.bot)

        # INFO –£–¥–∞–ª—è–µ–º —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã —á–µ—Ä–µ–∑ API
        api_response = await delete_all_roles_from_db(guild_id)

        if api_response.get("status") == "success":
            logger.info("INFO –í—Å–µ —Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã.")
        else:
            logger.error(f"ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π –∏–∑ –±–∞–∑—ã: {api_response.get('message')}")

        # INFO –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
        remaining_roles = await get_existing_roles(guild_id)
        if not remaining_roles:
            await ctx.send(f"INFO –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ä–æ–ª–µ–π. –í—Å–µ —Ä–æ–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
        else:
            await ctx.send(f"‚ö†Ô∏è –í –±–∞–∑–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ä–æ–ª–∏: {remaining_roles}")
            logger.warning(f"‚ö†Ô∏è –ù–µ –≤—Å–µ —Ä–æ–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã: {remaining_roles}")
            
# üîß –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫ –±–æ—Ç—É
async def setup(bot):
    await bot.add_cog(RoleManager(bot))
