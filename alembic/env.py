import glob
import os
import sys
from sqlalchemy import create_engine, pool, text
from alembic import context
from logging.config import fileConfig


# –ò–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
from game_server.services.logging.logging_setup import logger
from game_server.settings import DATABASE_URL_SYNC

# –ü—É—Ç–∏
here = os.path.dirname(__file__)
project_root = os.path.dirname(here)
sys.path.insert(0, project_root)
SEEDS_DIR = os.path.join(project_root, "game_server", "database", "schemas", "seeds")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alembic
config = context.config
fileConfig(config.config_file_name)
config.set_main_option("sqlalchemy.url", DATABASE_URL_SYNC)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π
from game_server.database.models.models import Base
target_metadata = Base.metadata


def run_migrations_online():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–Ω–ª–∞–π–Ω-–º–∏–≥—Ä–∞—Ü–∏–∏ Alembic, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫."""
    logger.info("üöÄ [Alembic] –ó–∞–ø—É—Å–∫ –æ–Ω–ª–∞–π–Ω-–º–∏–≥—Ä–∞—Ü–∏–π...")
    try:
        engine = create_engine(DATABASE_URL_SYNC, poolclass=pool.NullPool)
        with engine.connect() as connection:
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            context.configure(connection=connection, target_metadata=target_metadata)

            with context.begin_transaction():
                context.run_migrations()
                logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")

            for path in sorted(glob.glob(os.path.join(SEEDS_DIR, "*.sql"))):
                try:
                    with open(path, "r", encoding="utf-8") as f:
                        sql = f.read()
                    connection.execute(text(sql))
                    logger.info(f"üå± –°–∏–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {os.path.basename(path)}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–¥–∞ {os.path.basename(path)}: {e}")
    except Exception as e:
        logger.critical(f"üî• –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")


if context.is_offline_mode():
    logger.info("‚ö° [Alembic] OFFLINE-—Ä–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
    try:
        context.run_migrations()
        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ OFFLINE –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
    except Exception as e:
        logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ OFFLINE-–º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
else:
    run_migrations_online()
