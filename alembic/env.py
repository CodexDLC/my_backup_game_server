
from sqlalchemy import create_engine, pool
from alembic import context
from logging.config import fileConfig
from datetime import datetime
from game_server.database.models.models import Base
from game_server.services.logging.logging_setup import logger
from game_server.settings import DATABASE_URL_SYNC




# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Alembic
config = context.config
fileConfig(config.config_file_name)
config.set_main_option("sqlalchemy.url", DATABASE_URL_SYNC)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π

target_metadata = Base.metadata

def log_step(message: str, level: str = "info"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"[{timestamp}] {message}"
    getattr(logger, level)(log_message)

def run_migrations_online():
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ `seeds`"""
    log_step("üöÄ –ù–∞—á–∞–ª–æ –æ–Ω–ª–∞–π–Ω-–º–∏–≥—Ä–∞—Ü–∏–π")

    try:
        log_step(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {DATABASE_URL_SYNC}")
        engine = create_engine(DATABASE_URL_SYNC, poolclass=pool.NullPool, echo=True)

        with engine.connect() as connection:
            log_step("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")

            context.configure(
                connection=connection,
                target_metadata=target_metadata,
                compare_type=True,
                compare_server_default=True,
                include_schemas=True
            )

            log_step("üîç –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π")
            with context.begin_transaction():
                context.run_migrations()
                log_step("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")

            log_step("üèÅ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except Exception as e:
        log_step(f"üî• –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}", "critical")
        raise

if context.is_offline_mode():
    log_step("‚ö° OFFLINE-—Ä–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è SQL")
    try:
        context.configure(
            target_metadata=target_metadata,
            literal_binds=True,
            dialect_opts={"paramstyle": "named"},
        )
        context.run_migrations()
        log_step("‚úÖ OFFLINE-–º–∏–≥—Ä–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        log_step(f"‚ùå –û—à–∏–±–∫–∞ OFFLINE-–º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}", "critical")
        raise
else:
    run_migrations_online()
