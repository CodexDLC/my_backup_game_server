"""chek

Revision ID: 0ee9ce6bf003
Revises: 
Create Date: 2025-07-17 23:00:12.769588

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0ee9ce6bf003'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('account_info',
    sa.Column('account_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('avatar', sa.TEXT(), nullable=True),
    sa.Column('locale', sa.String(length=10), nullable=True),
    sa.Column('region', sa.String(length=20), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('twofa_enabled', sa.Boolean(), nullable=False),
    sa.Column('linked_platforms', sa.JSON(), nullable=False),
    sa.Column('auth_token', sa.TEXT(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('account_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_table('active_quests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('character_id', sa.Integer(), nullable=False),
    sa.Column('quest_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=50), server_default=sa.text("'active'::character varying"), nullable=False),
    sa.Column('current_step', sa.Integer(), server_default=sa.text('1'), nullable=False),
    sa.Column('quest_key', sa.String(length=100), nullable=True),
    sa.Column('flags_status', sa.JSON(), nullable=True),
    sa.Column('completion_time', sa.DateTime(), nullable=True),
    sa.Column('failure_reason', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id', name='active_quests_pkey')
    )
    op.create_table('background_stories',
    sa.Column('story_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=False),
    sa.Column('short_description', sa.TEXT(), nullable=True),
    sa.Column('stat_modifiers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('skill_affinities', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('initial_inventory_items', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('starting_location_tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('lore_fragments', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('potential_factions', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rarity_weight', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('story_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('character_starter_inventories',
    sa.Column('inventory_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('items', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('inventory_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('creature_types',
    sa.Column('creature_type_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('subcategory', sa.String(length=100), nullable=True),
    sa.Column('visual_tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rarity_weight', sa.Integer(), nullable=True),
    sa.Column('is_playable', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('creature_type_id')
    )
    op.create_table('data_versions',
    sa.Column('table_name', sa.String(), nullable=False, comment='Имя таблицы или логической группы данных'),
    sa.Column('data_hash', sa.String(), nullable=False, comment='Хэш-сумма данных (SHA256)'),
    sa.PrimaryKeyConstraint('table_name')
    )
    op.create_table('discord_bindings',
    sa.Column('guild_id', sa.BigInteger(), nullable=False),
    sa.Column('world_id', sa.Uuid(), nullable=False),
    sa.Column('access_key', sa.String(), nullable=False),
    sa.Column('permissions', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('category_id', sa.String(), nullable=True),
    sa.Column('channel_id', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('guild_id', 'access_key', name='discord_bindings_pkey')
    )
    op.create_table('discord_entities',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('guild_id', sa.BigInteger(), nullable=False),
    sa.Column('discord_id', sa.BigInteger(), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('parent_id', sa.BigInteger(), nullable=True),
    sa.Column('permissions', sa.String(length=50), nullable=True),
    sa.Column('access_code', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('guild_id', 'access_code', name='uq_guild_access_code'),
    sa.UniqueConstraint('guild_id', 'discord_id', name='uq_guild_discord_id')
    )
    op.create_index(op.f('ix_discord_entities_access_code'), 'discord_entities', ['access_code'], unique=False)
    op.create_index(op.f('ix_discord_entities_discord_id'), 'discord_entities', ['discord_id'], unique=False)
    op.create_index(op.f('ix_discord_entities_entity_type'), 'discord_entities', ['entity_type'], unique=False)
    op.create_index(op.f('ix_discord_entities_guild_id'), 'discord_entities', ['guild_id'], unique=False)
    op.create_table('elite_monsters',
    sa.Column('monster_instance_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('monster_template_id', sa.Integer(), nullable=False),
    sa.Column('display_name', sa.String(length=255), nullable=False),
    sa.Column('current_location', sa.String(length=255), nullable=False),
    sa.Column('last_player_killed_id', sa.Integer(), nullable=True),
    sa.Column('killed_players_count', sa.Integer(), nullable=False),
    sa.Column('current_status', sa.String(length=50), nullable=False),
    sa.Column('killed_by_info_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('unique_modifiers_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('spawn_priority', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_seen_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('monster_instance_id')
    )
    op.create_table('entity_state_map',
    sa.Column('entity_access_key', sa.String(), nullable=False),
    sa.Column('access_code', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('entity_access_key', 'access_code', name='entity_state_map_pkey')
    )
    op.create_table('equipment_templates',
    sa.Column('template_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('item_code', sa.String(length=255), nullable=False),
    sa.Column('display_name', sa.String(length=255), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('sub_category', sa.String(length=50), nullable=False),
    sa.Column('equip_slot', sa.String(length=50), nullable=False),
    sa.Column('inventory_size', sa.String(length=10), nullable=False),
    sa.Column('material_code', sa.String(length=255), nullable=False),
    sa.Column('suffix_code', sa.String(length=255), nullable=True),
    sa.Column('base_modifiers_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('quality_tier', sa.String(length=50), nullable=True),
    sa.Column('rarity_level', sa.Integer(), nullable=False),
    sa.Column('icon_url', sa.String(length=255), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('template_id'),
    sa.UniqueConstraint('item_code')
    )
    op.create_table('equipped_items',
    sa.Column('character_id', sa.Integer(), nullable=False),
    sa.Column('inventory_id', sa.Integer(), nullable=False),
    sa.Column('durability', sa.Integer(), server_default=sa.text('100'), nullable=False),
    sa.Column('slot', sa.String(length=50), nullable=True),
    sa.Column('enchantment_effect', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('character_id', name='equipped_items_pkey')
    )
    op.create_table('game_locations',
    sa.Column('access_key', sa.String(length=255), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('skeleton_template_id', sa.String(length=100), nullable=False),
    sa.Column('specific_category', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('parent_id', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('unified_display_type', sa.String(length=50), nullable=True),
    sa.Column('presentation', sa.JSON(), nullable=True),
    sa.Column('entry_point_location_id', sa.String(length=255), nullable=True),
    sa.Column('flavor_text_options', sa.JSON(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['game_locations.access_key'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('access_key'),
    sa.UniqueConstraint('id')
    )
    op.create_table('game_shards',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('shard_name', sa.String(length=100), nullable=False),
    sa.Column('discord_guild_id', sa.BigInteger(), nullable=False),
    sa.Column('current_players', sa.Integer(), nullable=False),
    sa.Column('max_players', sa.Integer(), nullable=False),
    sa.Column('is_admin_enabled', sa.Boolean(), nullable=False),
    sa.Column('is_system_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('discord_guild_id'),
    sa.UniqueConstraint('shard_name')
    )
    op.create_table('instanced_items',
    sa.Column('instance_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('template_id', sa.Integer(), nullable=False),
    sa.Column('is_equippable', sa.Boolean(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('owner_type', sa.String(length=20), nullable=False),
    sa.Column('location_type', sa.String(length=50), nullable=False),
    sa.Column('location_slot', sa.String(length=50), nullable=True),
    sa.Column('final_modifiers_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('display_name', sa.String(length=255), nullable=False),
    sa.Column('item_category', sa.String(length=50), nullable=False),
    sa.Column('item_sub_category', sa.String(length=50), nullable=True),
    sa.Column('inventory_size', sa.String(length=10), nullable=True),
    sa.Column('current_durability', sa.Integer(), nullable=True),
    sa.Column('current_stack_size', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('instance_id')
    )
    op.create_table('inventory',
    sa.Column('inventory_id', sa.Integer(), nullable=False),
    sa.Column('character_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), server_default=sa.text('1'), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=True),
    sa.Column('acquired_at', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('inventory_id', name='inventory_pkey')
    )
    op.create_table('inventory_rule_generator',
    sa.Column('rule_key', sa.String(length=150), nullable=False),
    sa.Column('rule_id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('quality_level', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Integer(), nullable=False),
    sa.Column('activation_conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('generation_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('rule_key'),
    sa.UniqueConstraint('rule_id')
    )
    op.create_index(op.f('ix_inventory_rule_generator_quality_level'), 'inventory_rule_generator', ['quality_level'], unique=False)
    op.create_table('item_base',
    sa.Column('base_item_code', sa.String(length=255), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('properties_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('base_item_code')
    )
    op.create_table('materials',
    sa.Column('material_code', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('material_category', sa.String(length=20), nullable=False),
    sa.Column('rarity_level', sa.Integer(), nullable=True),
    sa.Column('adjective', sa.String(length=255), nullable=False),
    sa.Column('color', sa.String(length=7), nullable=False),
    sa.Column('is_fragile', sa.Boolean(), nullable=False),
    sa.Column('strength_percentage', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('material_code')
    )
    op.create_table('modifier_library',
    sa.Column('modifier_code', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('effect_description', sa.TEXT(), nullable=False),
    sa.Column('value_tiers', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('randomization_range', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('modifier_code')
    )
    op.create_table('past_life_fragments',
    sa.Column('fragment_key', sa.String(length=100), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('inherent_bonuses', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('rarity_weight', sa.Integer(), nullable=False),
    sa.Column('story_fragments', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('fragment_key'),
    sa.UniqueConstraint('fragment_key'),
    sa.UniqueConstraint('name')
    )
    op.create_table('personalities',
    sa.Column('personality_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('personality_group', sa.String(length=50), nullable=True),
    sa.Column('behavior_tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('dialogue_modifiers', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('combat_ai_directives', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('quest_interaction_preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('trait_associations', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('applicable_game_roles', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('rarity_weight', sa.Integer(), nullable=False),
    sa.Column('ai_priority_level', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('personality_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('reputation',
    sa.Column('character_id', sa.Integer(), nullable=False),
    sa.Column('reputation_value', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('reputation_status', sa.String(length=50), server_default=sa.text("'neutral'::character varying"), nullable=False),
    sa.Column('faction_id', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('character_id', name='reputation_pkey')
    )
    op.create_table('skill_exclusions',
    sa.Column('exclusion_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('group_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('exclusion_type', sa.String(length=50), nullable=False),
    sa.Column('excluded_skills', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('exclusion_effect', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('exclusion_id'),
    sa.UniqueConstraint('group_name'),
    sa.UniqueConstraint('group_name', name='uq_skill_exclusions_group_name')
    )
    op.create_table('skills',
    sa.Column('skill_key', sa.String(length=50), nullable=False),
    sa.Column('skill_id', sa.Integer(), autoincrement=True, nullable=True),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('stat_influence', sa.JSON(), nullable=False),
    sa.Column('is_magic', sa.Boolean(), nullable=False),
    sa.Column('rarity_weight', sa.Integer(), nullable=False),
    sa.Column('category_tag', sa.String(length=50), nullable=False),
    sa.Column('role_preference_tag', sa.String(length=100), nullable=True),
    sa.Column('limit_group_tag', sa.String(length=100), nullable=True),
    sa.Column('max_level', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('skill_key'),
    sa.UniqueConstraint('skill_id'),
    sa.UniqueConstraint('skill_key')
    )
    op.create_table('special_stat_effects',
    sa.Column('effect_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('stat_key', sa.String(length=50), nullable=False),
    sa.Column('affected_property', sa.String(length=100), nullable=False),
    sa.Column('effect_type', sa.String(length=50), nullable=False),
    sa.Column('value', sa.Numeric(precision=12, scale=4), nullable=False),
    sa.Column('calculation_order', sa.Integer(), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('effect_id'),
    sa.UniqueConstraint('stat_key', 'affected_property', 'effect_type', name='uq_stat_property_effect_type')
    )
    op.create_table('state_entities',
    sa.Column('access_code', sa.String(length=50), nullable=False),
    sa.Column('code_name', sa.String(length=100), nullable=False),
    sa.Column('ui_type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('access_code'),
    sa.UniqueConstraint('code_name')
    )
    op.create_index(op.f('ix_state_entities_access_code'), 'state_entities', ['access_code'], unique=True)
    op.create_table('static_item_templates',
    sa.Column('template_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('item_code', sa.String(length=255), nullable=False),
    sa.Column('display_name', sa.String(length=255), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('sub_category', sa.String(length=50), nullable=True),
    sa.Column('inventory_size', sa.String(length=10), nullable=False),
    sa.Column('stackable', sa.Boolean(), nullable=False),
    sa.Column('max_stack_size', sa.Integer(), nullable=False),
    sa.Column('base_value', sa.Integer(), nullable=False),
    sa.Column('icon_url', sa.String(length=255), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('properties_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('template_id'),
    sa.UniqueConstraint('item_code')
    )
    op.create_table('suffixes',
    sa.Column('suffix_code', sa.String(length=255), nullable=False),
    sa.Column('fragment', sa.String(length=255), nullable=False),
    sa.Column('group', sa.String(length=100), nullable=False),
    sa.Column('modifiers', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.PrimaryKeyConstraint('suffix_code')
    )
    op.create_index(op.f('ix_suffixes_group'), 'suffixes', ['group'], unique=False)
    op.create_table('template_modifier_defaults',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('base_item_code', sa.Integer(), nullable=False),
    sa.Column('access_modifier', sa.Integer(), nullable=False),
    sa.Column('default_value', sa.Numeric(), nullable=False),
    sa.PrimaryKeyConstraint('id', name='template_modifier_defaults_pkey')
    )
    op.create_table('used_characters_archive',
    sa.Column('archive_id', sa.Integer(), nullable=False),
    sa.Column('original_pool_id', sa.Integer(), nullable=False),
    sa.Column('linked_entity_id', sa.Integer(), nullable=False),
    sa.Column('activation_type', sa.String(length=50), nullable=False),
    sa.Column('lifecycle_status', sa.String(length=50), nullable=False),
    sa.Column('linked_account_id', sa.Integer(), nullable=True),
    sa.Column('simplified_pool_data', sa.JSON(), nullable=True),
    sa.Column('archived_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('archive_id'),
    sa.UniqueConstraint('original_pool_id')
    )
    op.create_index(op.f('ix_used_characters_archive_linked_entity_id'), 'used_characters_archive', ['linked_entity_id'], unique=False)
    op.create_table('weapon_templates',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('base_item_code', sa.Integer(), nullable=False),
    sa.Column('suffix_code', sa.Integer(), nullable=False),
    sa.Column('weapon_name', sa.TEXT(), nullable=False),
    sa.Column('rarity', sa.Integer(), nullable=False),
    sa.Column('color', sa.TEXT(), nullable=False),
    sa.Column('is_fragile', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('strength_percentage', sa.Double(precision=53), server_default=sa.text('0'), nullable=False),
    sa.Column('p_atk', sa.Integer(), nullable=True),
    sa.Column('m_atk', sa.Integer(), nullable=True),
    sa.Column('crit_chance', sa.Double(precision=53), nullable=True),
    sa.Column('crit_damage_bonus', sa.Double(precision=53), nullable=True),
    sa.Column('armor_penetration', sa.Double(precision=53), nullable=True),
    sa.Column('durability', sa.Integer(), nullable=True),
    sa.Column('accuracy', sa.Double(precision=53), nullable=True),
    sa.Column('hp_steal_percent', sa.Double(precision=53), server_default=sa.text('0'), nullable=True),
    sa.Column('effect_description', sa.TEXT(), nullable=True),
    sa.Column('allowed_for_class', sa.TEXT(), nullable=True),
    sa.Column('visual_asset', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id', name='weapon_templates_pkey')
    )
    op.create_table('xp_tick_data',
    sa.Column('tick_id', sa.Integer(), nullable=False),
    sa.Column('character_id', sa.Integer(), nullable=True),
    sa.Column('skill_id', sa.Integer(), nullable=True),
    sa.Column('xp_generated', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=True),
    sa.PrimaryKeyConstraint('tick_id', name='xp_tick_data_pkey')
    )
    op.create_table('abilities',
    sa.Column('ability_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ability_key', sa.String(length=100), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('ability_type', sa.String(length=50), nullable=False),
    sa.Column('required_skill_key', sa.String(length=50), nullable=True),
    sa.Column('required_skill_level', sa.Integer(), nullable=False),
    sa.Column('required_stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('required_items', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('cost_type', sa.String(length=50), nullable=True),
    sa.Column('cost_amount', sa.Integer(), nullable=False),
    sa.Column('cooldown_seconds', sa.Integer(), nullable=False),
    sa.Column('cast_time_ms', sa.Integer(), nullable=False),
    sa.Column('effect_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('animation_key', sa.String(length=100), nullable=True),
    sa.Column('sfx_key', sa.String(length=100), nullable=True),
    sa.Column('vfx_key', sa.String(length=100), nullable=True),
    sa.ForeignKeyConstraint(['required_skill_key'], ['skills.skill_key'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('ability_id'),
    sa.UniqueConstraint('ability_key')
    )
    op.create_table('account_game_data',
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('past_life_fragment_key', sa.String(length=100), nullable=True),
    sa.Column('characters_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('account_cards_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('shard_id', sa.BigInteger(), nullable=True),
    sa.Column('last_login_game', sa.DateTime(timezone=True), nullable=True),
    sa.Column('total_playtime_seconds', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['account_info.account_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['past_life_fragment_key'], ['past_life_fragments.fragment_key'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['shard_id'], ['game_shards.discord_guild_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('account_id')
    )
    op.create_table('bloodlines_clan',
    sa.Column('clan_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('clan_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('leader_account_id', sa.Integer(), nullable=True),
    sa.Column('founding_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('member_count', sa.Integer(), nullable=False),
    sa.Column('reputation', sa.BigInteger(), nullable=False),
    sa.Column('assets_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('policies_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['leader_account_id'], ['account_info.account_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('clan_id'),
    sa.UniqueConstraint('clan_name')
    )
    op.create_table('character_inventory_rules',
    sa.Column('rule_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('quality_level', sa.String(length=100), nullable=False),
    sa.Column('role_name', sa.String(length=100), nullable=True),
    sa.Column('inventory_id', sa.Integer(), nullable=False),
    sa.Column('weight', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['inventory_id'], ['character_starter_inventories.inventory_id'], ),
    sa.PrimaryKeyConstraint('rule_id')
    )
    op.create_table('character_pool',
    sa.Column('character_pool_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('creature_type_id', sa.Integer(), nullable=False),
    sa.Column('personality_id', sa.Integer(), nullable=True),
    sa.Column('background_story_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('surname', sa.String(length=100), nullable=True),
    sa.Column('gender', sa.String(length=20), nullable=False),
    sa.Column('base_stats', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('visual_appearance_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('initial_skill_levels', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('initial_role_name', sa.String(length=100), nullable=True),
    sa.Column('quality_level', sa.String(length=50), nullable=False),
    sa.Column('status', sa.String(length=50), server_default=sa.text("'available'"), nullable=False),
    sa.Column('is_unique', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('rarity_score', sa.Integer(), server_default=sa.text('100'), nullable=False),
    sa.Column('generated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('death_timestamp', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['background_story_id'], ['background_stories.story_id'], name='fk_cp_background_story', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['creature_type_id'], ['creature_types.creature_type_id'], name='fk_cp_creature_type', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['personality_id'], ['personalities.personality_id'], name='fk_cp_personality', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('character_pool_id', name='character_pool_pkey')
    )
    op.create_index('idx_character_pool_creature_type', 'character_pool', ['creature_type_id'], unique=False)
    op.create_index('idx_character_pool_rarity_score', 'character_pool', ['rarity_score'], unique=False)
    op.create_index('idx_character_pool_status', 'character_pool', ['status'], unique=False)
    op.create_index(op.f('ix_character_pool_quality_level'), 'character_pool', ['quality_level'], unique=False)
    op.create_table('creature_type_initial_skills',
    sa.Column('creature_type_id', sa.Integer(), nullable=False),
    sa.Column('skill_key', sa.String(length=50), nullable=False),
    sa.Column('initial_level', sa.SmallInteger(), nullable=False),
    sa.ForeignKeyConstraint(['creature_type_id'], ['creature_types.creature_type_id'], ),
    sa.ForeignKeyConstraint(['skill_key'], ['skills.skill_key'], ),
    sa.PrimaryKeyConstraint('creature_type_id', 'skill_key')
    )
    op.create_table('characters',
    sa.Column('character_id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('surname', sa.String(length=100), nullable=True),
    sa.Column('gender', sa.String(length=50), nullable=True),
    sa.Column('clan_id', sa.Integer(), nullable=True),
    sa.Column('creature_type_id', sa.Integer(), nullable=False),
    sa.Column('personality_id', sa.Integer(), nullable=True),
    sa.Column('background_story_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['account_info.account_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['background_story_id'], ['background_stories.story_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['clan_id'], ['bloodlines_clan.clan_id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['creature_type_id'], ['creature_types.creature_type_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['personality_id'], ['personalities.personality_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('character_id')
    )
    op.create_table('auto_sessions',
    sa.Column('character_id', sa.Integer(), nullable=False),
    sa.Column('active_category', sa.TEXT(), nullable=False),
    sa.Column('next_tick_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_tick_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['character_id'], ['characters.character_id'], name='fk_character', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('character_id', name='auto_sessions_pkey')
    )
    op.create_index('idx_auto_sessions_next_tick_at', 'auto_sessions', ['next_tick_at'], unique=False)
    op.create_table('character_skills',
    sa.Column('character_id', sa.Integer(), nullable=False),
    sa.Column('skill_key', sa.String(length=50), nullable=False),
    sa.Column('level', sa.Integer(), server_default=sa.text('0'), nullable=False),
    sa.Column('xp', sa.BigInteger(), server_default=sa.text('0'), nullable=False),
    sa.Column('progress_state', sa.String(length=10), server_default=sa.text("'PLUS'::character varying"), nullable=False),
    sa.CheckConstraint("progress_state::text = ANY (ARRAY['PLUS'::character varying, 'PAUSE'::character varying, 'MINUS'::character varying]::text[])", name='character_skills_progress_state_check'),
    sa.ForeignKeyConstraint(['character_id'], ['characters.character_id'], name='fk_character', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['skill_key'], ['skills.skill_key'], ),
    sa.ForeignKeyConstraint(['skill_key'], ['skills.skill_key'], name='fk_skill', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('character_id', 'skill_key', name='character_skills_pkey')
    )
    op.create_table('characters_special',
    sa.Column('character_id', sa.Integer(), nullable=False),
    sa.Column('strength', sa.Integer(), nullable=True),
    sa.Column('perception', sa.Integer(), nullable=True),
    sa.Column('endurance', sa.Integer(), nullable=True),
    sa.Column('agility', sa.Integer(), nullable=True),
    sa.Column('intelligence', sa.Integer(), nullable=True),
    sa.Column('charisma', sa.Integer(), nullable=True),
    sa.Column('luck', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['character_id'], ['characters.character_id'], name='fk_character', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('character_id', name='characters_special_pkey')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('characters_special')
    op.drop_table('character_skills')
    op.drop_index('idx_auto_sessions_next_tick_at', table_name='auto_sessions')
    op.drop_table('auto_sessions')
    op.drop_table('characters')
    op.drop_table('creature_type_initial_skills')
    op.drop_index(op.f('ix_character_pool_quality_level'), table_name='character_pool')
    op.drop_index('idx_character_pool_status', table_name='character_pool')
    op.drop_index('idx_character_pool_rarity_score', table_name='character_pool')
    op.drop_index('idx_character_pool_creature_type', table_name='character_pool')
    op.drop_table('character_pool')
    op.drop_table('character_inventory_rules')
    op.drop_table('bloodlines_clan')
    op.drop_table('account_game_data')
    op.drop_table('abilities')
    op.drop_table('xp_tick_data')
    op.drop_table('weapon_templates')
    op.drop_index(op.f('ix_used_characters_archive_linked_entity_id'), table_name='used_characters_archive')
    op.drop_table('used_characters_archive')
    op.drop_table('template_modifier_defaults')
    op.drop_index(op.f('ix_suffixes_group'), table_name='suffixes')
    op.drop_table('suffixes')
    op.drop_table('static_item_templates')
    op.drop_index(op.f('ix_state_entities_access_code'), table_name='state_entities')
    op.drop_table('state_entities')
    op.drop_table('special_stat_effects')
    op.drop_table('skills')
    op.drop_table('skill_exclusions')
    op.drop_table('reputation')
    op.drop_table('personalities')
    op.drop_table('past_life_fragments')
    op.drop_table('modifier_library')
    op.drop_table('materials')
    op.drop_table('item_base')
    op.drop_index(op.f('ix_inventory_rule_generator_quality_level'), table_name='inventory_rule_generator')
    op.drop_table('inventory_rule_generator')
    op.drop_table('inventory')
    op.drop_table('instanced_items')
    op.drop_table('game_shards')
    op.drop_table('game_locations')
    op.drop_table('equipped_items')
    op.drop_table('equipment_templates')
    op.drop_table('entity_state_map')
    op.drop_table('elite_monsters')
    op.drop_index(op.f('ix_discord_entities_guild_id'), table_name='discord_entities')
    op.drop_index(op.f('ix_discord_entities_entity_type'), table_name='discord_entities')
    op.drop_index(op.f('ix_discord_entities_discord_id'), table_name='discord_entities')
    op.drop_index(op.f('ix_discord_entities_access_code'), table_name='discord_entities')
    op.drop_table('discord_entities')
    op.drop_table('discord_bindings')
    op.drop_table('data_versions')
    op.drop_table('creature_types')
    op.drop_table('character_starter_inventories')
    op.drop_table('background_stories')
    op.drop_table('active_quests')
    op.drop_table('account_info')
    # ### end Alembic commands ###
