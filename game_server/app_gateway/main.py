# /game_server/api_fast/main.py

print("DEBUG: main.py - Start loading")

import os
import asyncio
from contextlib import asynccontextmanager
from typing import Optional, Dict, Any
from fastapi import FastAPI
from dotenv import load_dotenv

from game_server.app_gateway.gateway.event_broadcast_handler import EventBroadcastHandler

print("DEBUG: main.py - Basic imports completed")

# üî• –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã WS
from game_server.app_gateway.gateway.client_connection_manager import ClientConnectionManager
from game_server.app_gateway.gateway.websocket_outbound_dispatcher import OutboundWebSocketDispatcher

print("DEBUG: main.py - Gateway WS imports completed")

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤
from game_server.app_gateway.rest_routers.routers_config import ROUTERS_CONFIG
from game_server.app_gateway.ws_routers_config import WS_ROUTERS_CONFIG 

print("DEBUG: main.py - Router config imports completed")

from game_server.config.logging.logging_setup import app_logger as logger

print("DEBUG: main.py - Logger import completed")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from game_server.app_gateway.gateway_dependencies import initialize_gateway_dependencies, shutdown_gateway_dependencies
from game_server.config.settings_core import APP_VERSION

print("DEBUG: main.py - Gateway dependencies imports completed")

root_env = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '.env'))
load_dotenv(root_env)

print("DEBUG: main.py - .env loaded")

# –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è Swagger UI
tags_metadata = [
    {"name": "Gateway REST", "description": "REST API –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —à–ª—é–∑–∞."},
    {"name": "Unified WebSocket", "description": "–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WebSocket API –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–∏–≥—Ä–æ–∫–∏, –±–æ—Ç, –∞–¥–º–∏–Ω)."}, 
    {"name": "System", "description": "–°–∏—Å—Ç–µ–º–Ω—ã–µ REST API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."}, 
    {"name": "Authentication", "description": "REST API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."},
    {"name": "Health", "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞."},
]

print("DEBUG: main.py - tags_metadata defined")

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤—ã—Ö —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
global_client_connection_manager: Optional[ClientConnectionManager] = None
global_outbound_ws_dispatcher: Optional[OutboundWebSocketDispatcher] = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–æ–º –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å–µ—Ä–≤–∏—Å–æ–≤ Gateway.
    –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –û–ë–ê –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞.
    """
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Lifespan —à–ª—é–∑–∞...")
    
    global global_client_connection_manager
    global global_outbound_ws_dispatcher
    # ‚úÖ –û–±—ä—è–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    global global_event_broadcast_handler

    try:
        app.state.gateway_dependencies = await initialize_gateway_dependencies()
        
        message_bus = app.state.gateway_dependencies.get('message_bus')
        if not message_bus:
            logger.critical("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: RabbitMQ Message Bus –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            raise RuntimeError("RabbitMQ Message Bus –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        app.state.message_bus = message_bus 

        global_client_connection_manager = ClientConnectionManager()
        app.state.client_connection_manager = global_client_connection_manager
        
        # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –ü–ï–†–í–û–ì–û —Å–ª—É—à–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä—è–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤) ---
        global_outbound_ws_dispatcher = OutboundWebSocketDispatcher(
            message_bus=message_bus,
            client_connection_manager=global_client_connection_manager
        )
        app.state.outbound_ws_dispatcher = global_outbound_ws_dispatcher
        await global_outbound_ws_dispatcher.start_listening_for_outbound_messages()
        app.state.outbound_ws_dispatcher_task = global_outbound_ws_dispatcher._listen_task

        # --- ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –í–¢–û–†–û–ì–û —Å–ª—É—à–∞—Ç–µ–ª—è (–¥–ª—è —Å–æ–±—ã—Ç–∏–π) ---
        global_event_broadcast_handler = EventBroadcastHandler(
            message_bus=message_bus,
            client_connection_manager=global_client_connection_manager
        )
        app.state.event_broadcast_handler = global_event_broadcast_handler
        await global_event_broadcast_handler.start_listening_for_events()
        app.state.event_broadcast_handler_task = global_event_broadcast_handler._listen_task
        
        logger.info("‚úÖ –®–ª—é–∑ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –î–í–£–ú–Ø —Å–ª—É—à–∞—Ç–µ–ª—è–º–∏.")
        
        yield

    finally:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Lifespan —à–ª—é–∑–∞...")

        # --- –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–æ–∏—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π ---
        if hasattr(app.state, 'outbound_ws_dispatcher_task') and app.state.outbound_ws_dispatcher_task:
            app.state.outbound_ws_dispatcher_task.cancel()
            try:
                await app.state.outbound_ws_dispatcher_task
            except asyncio.CancelledError:
                pass

        # ‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è
        if hasattr(app.state, 'event_broadcast_handler_task') and app.state.event_broadcast_handler_task:
            app.state.event_broadcast_handler_task.cancel()
            try:
                await app.state.event_broadcast_handler_task
            except asyncio.CancelledError:
                pass

        if hasattr(app.state, 'gateway_dependencies'):
            await shutdown_gateway_dependencies(app.state.gateway_dependencies)
        logger.info("‚úÖ –†–µ—Å—É—Ä—Å—ã —à–ª—é–∑–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã.")


app = FastAPI(
    title="Optimized Command Gateway API",
    version=APP_VERSION,
    lifespan=lifespan,
    openapi_tags=tags_metadata
)

logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ REST —Ä–æ—É—Ç–µ—Ä–æ–≤...")
for router_config in ROUTERS_CONFIG:
    app.include_router(
        router_config["router"],
        prefix=router_config.get("prefix", ""),
        tags=router_config.get("tags", [])
    )

logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Ä–æ—É—Ç–µ—Ä–æ–≤...")
for ws_router_config in WS_ROUTERS_CONFIG: 
    app.include_router(
        ws_router_config["router"],
        prefix=ws_router_config.get("prefix", ""),
        tags=ws_router_config.get("tags", [])
    )

print("DEBUG: main.py - End of file")
