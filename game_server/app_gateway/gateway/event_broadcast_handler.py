# game_server/app_gateway/gateway/event_broadcast_handler.py

import asyncio
import msgpack
import uuid # ‚úÖ –ù–£–ñ–ï–ù –¥–ª—è correlation_id
from typing import Optional

from aio_pika import IncomingMessage

from game_server.config.logging.logging_setup import app_logger as logger
from game_server.Logic.InfrastructureLogic.messaging.i_message_bus import IMessageBus
from game_server.app_gateway.gateway.client_connection_manager import ClientConnectionManager
from game_server.config.settings.rabbitmq.rabbitmq_names import Queues
# ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏
from game_server.contracts.shared_models.websocket_base_models import WebSocketMessage, WebSocketEventPayload


class EventBroadcastHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –∏ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç –∏—Ö
    –í–°–ï–ú –∞–∫—Ç–∏–≤–Ω—ã–º WebSocket-–∫–ª–∏–µ–Ω—Ç–∞–º.
    """
    # ... (__init__ –∏ start_listening_for_events –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    def __init__(
        self,
        message_bus: IMessageBus,
        client_connection_manager: ClientConnectionManager
    ):
        self.message_bus = message_bus
        self.client_connection_manager = client_connection_manager
        self.logger = logger
        self._listen_task: Optional[asyncio.Task] = None
        self.inbound_queue_name = Queues.GATEWAY_INBOUND_EVENTS
        self.logger.info("‚úÖ EventBroadcastHandler (—Ä–µ–∂–∏–º broadcast-to-all) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def start_listening_for_events(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π."""
        if self._listen_task is None or self._listen_task.done():
            self.logger.info(f"üéß –ù–∞—á–∏–Ω–∞—é —Å–ª—É—à–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{self.inbound_queue_name}' –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")
            self._listen_task = asyncio.create_task(self._listen_loop())
        else:
            self.logger.warning("EventBroadcastHandler —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

    async def _listen_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç –∫–æ–ª–±—ç–∫ –≤ message_bus."""
        try:
            await self.message_bus.consume(self.inbound_queue_name, self._on_message_received)
        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ EventBroadcastHandler: {e}", exc_info=True)
            raise

    async def _on_message_received(self, message: IncomingMessage):
        """
        –ö–æ–ª–±—ç–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –∏–∑ RabbitMQ.
        –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ–≥–æ –≤—Å–µ–º.
        """
        try:
            async with message.process():
                # --- ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ---
                self.logger.info("EventBroadcastHandler: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
                event_data = msgpack.unpackb(message.body, raw=False)
                routing_key = message.routing_key or "event.unknown"
                self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ '{routing_key}'")
                self.logger.debug(f"–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º: {event_data}")
                
                all_client_ids = list(self.client_connection_manager.active_connections.keys())
                if not all_client_ids:
                    return

                # --- ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –£–ü–ê–ö–û–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø ---
                
                # 1. –°–æ–∑–¥–∞–µ–º "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π" payload —Å–æ–±—ã—Ç–∏—è
                event_payload = WebSocketEventPayload(
                    type=routing_key,  # –¢–∏–ø —Å–æ–±—ã—Ç–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä "event.location.updated"
                    payload=event_data # –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä {"location_id": "201"}
                )
                self.logger.debug(f"–°–æ–∑–¥–∞–Ω WebSocketEventPayload: {event_payload.model_dump()}")

                # 2. –°–æ–∑–¥–∞–µ–º "–≤–Ω–µ—à–Ω–∏–π –∫–æ–Ω–≤–µ—Ä—Ç" WebSocketMessage
                websocket_msg = WebSocketMessage(
                    type="EVENT", # –¢–∏–ø "–∫–æ–Ω–≤–µ—Ä—Ç–∞" - 'EVENT' –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
                    correlation_id=uuid.uuid4(), # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π UUID –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    payload=event_payload # –í–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞—à payload —Å–æ–±—ã—Ç–∏—è
                )
                message_json = websocket_msg.model_dump_json()

                # –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º
                self.logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–±—ã—Ç–∏—è '{routing_key}' {len(all_client_ids)} –∫–ª–∏–µ–Ω—Ç–∞–º.")
                for client_id in all_client_ids:
                    await self.client_connection_manager.send_message_to_client(client_id, message_json)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)