# game_server/app_gateway/gateway/websocket_outbound_dispatcher.py

import asyncio
import json
import msgpack
from typing import Optional, Dict, Any

from aio_pika import IncomingMessage

from game_server.config.logging.logging_setup import app_logger as logger
from game_server.Logic.InfrastructureLogic.messaging.i_message_bus import IMessageBus
from game_server.app_gateway.gateway.client_connection_manager import ClientConnectionManager
from game_server.common_contracts.shared_models.api_contracts import WebSocketMessage, WebSocketResponsePayload
from game_server.config.settings.rabbitmq.rabbitmq_names import Queues


class OutboundWebSocketDispatcher:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ö–æ–¥—è—â–∏—Ö WebSocket-—Å–æ–æ–±—â–µ–Ω–∏–π.
    –ü–æ—Ç—Ä–µ–±–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –µ–¥–∏–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ RabbitMQ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö
    –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
    """
    def __init__(
        self,
        message_bus: IMessageBus,
        client_connection_manager: ClientConnectionManager
    ):
        self.message_bus = message_bus
        self.client_connection_manager = client_connection_manager
        self.logger = logger
        self._listen_task: Optional[asyncio.Task] = None
        self.outbound_queue_name = Queues.GATEWAY_OUTBOUND_WS_MESSAGES
        self.logger.info("‚úÖ OutboundWebSocketDispatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def start_listening_for_outbound_messages(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ–±—â–µ–π –æ—á–µ—Ä–µ–¥–∏ –∏—Å—Ö–æ–¥—è—â–∏—Ö WebSocket-—Å–æ–æ–±—â–µ–Ω–∏–π."""
        if self._listen_task is None or self._listen_task.done():
            self.logger.info(f"üéß –ù–∞—á–∏–Ω–∞—é —Å–ª—É—à–∞—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–µ WS —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ '{self.outbound_queue_name}'.")
            self._listen_task = asyncio.create_task(self._listen_loop())
        else:
            self.logger.warning("OutboundWebSocketDispatcher —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

    async def _listen_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç –∫–æ–ª–±—ç–∫ –≤ message_bus."""
        try:
            await self.message_bus.consume(self.outbound_queue_name, self._on_message_received)
        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ OutboundWebSocketDispatcher: {e}", exc_info=True)
            raise

    async def _on_message_received(self, message: IncomingMessage):
        """
        –ö–æ–ª–±—ç–∫, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ RabbitMQ.
        –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç –∞–¥—Ä–µ—Å–∞—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ WebSocket.
        """
        message_envelope: Optional[Dict[str, Any]] = None
        actual_websocket_message_data: Optional[Dict[str, Any]] = None

        self.logger.info(f"OutboundDispatcher: –ü–æ–ª—É—á–µ–Ω–æ —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. Body length: {len(message.body)}")
        self.logger.debug(f"OutboundDispatcher: –°—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ body (raw bytes): {message.body}")

        try:
            message_envelope = msgpack.unpackb(message.body, raw=False)
            self.logger.info(f"OutboundDispatcher: –°–æ–æ–±—â–µ–Ω–∏–µ MsgPack —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–æ. –¢–∏–ø –≤–Ω–µ—à–Ω–µ–π –æ–±–µ—Ä—Ç–∫–∏: {type(message_envelope)}. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (—á–∞—Å—Ç–∏—á–Ω–æ): {str(message_envelope)[:200]}")

            if not isinstance(message_envelope, dict) or 'payload' not in message_envelope:
                self.logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –ø–æ–ª—è 'payload' –∏–ª–∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å. –°–æ–æ–±—â–µ–Ω–∏–µ: {message.body.decode(errors='ignore')[:200]}...")
                await message.ack()
                return
            
            actual_websocket_message_data = message_envelope['payload']
            self.logger.info(f"OutboundDispatcher: –ò–∑–≤–ª–µ—á–µ–Ω —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π WebSocketMessage. –¢–∏–ø: {type(actual_websocket_message_data)}. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (—á–∞—Å—Ç–∏—á–Ω–æ): {str(actual_websocket_message_data)[:200]}")

            websocket_msg = WebSocketMessage.model_validate(actual_websocket_message_data)
            self.logger.info("OutboundDispatcher: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ WebSocketMessage.")

            # –ü–æ–ª—É—á–∞–µ–º client_id –Ω–∞–ø—Ä—è–º—É—é –∏–∑ websocket_msg
            target_client_id = websocket_msg.client_id
            
            if not target_client_id:
                self.logger.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ (CorrID: {websocket_msg.correlation_id}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'client_id' –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ WebSocketMessage.")
                await message.ack()
                return

            message_json = websocket_msg.model_dump_json()
            self.logger.info(f"OutboundDispatcher: –û—Ç–ø—Ä–∞–≤–∫–∞ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {target_client_id}...")

            success = await self.client_connection_manager.send_message_to_client(
                target_client_id,
                message_json
            )

            if success:
                self.logger.debug(f"–û—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {target_client_id} (CorrID: {websocket_msg.correlation_id}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            else:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {target_client_id}. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∑–∞–∫—Ä—ã—Ç–æ.")

            await message.ack()
        except Exception as e:
            msg_id = actual_websocket_message_data.get("correlation_id", "N/A") if actual_websocket_message_data else "N/A"
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ WebSocket-—Å–æ–æ–±—â–µ–Ω–∏—è (CorrID: {msg_id}): {e}", exc_info=True)
            await message.nack(requeue=False)
