# game_server/app_gateway/ws_routers/unified_ws.py

import asyncio
import json
from typing import Optional, Dict, Any
import uuid

from fastapi import APIRouter, WebSocket, WebSocketDisconnect, status, Depends
from starlette.websockets import WebSocketState


from game_server.config.logging.logging_setup import app_logger as logger
from game_server.Logic.InfrastructureLogic.messaging.i_message_bus import IMessageBus
from game_server.app_gateway.gateway.client_connection_manager import ClientConnectionManager

from game_server.app_gateway.rest_api_dependencies import get_client_connection_manager_dependency, get_message_bus_dependency
from game_server.config.settings.rabbitmq.rabbitmq_names import Exchanges, RoutingKeys, Queues
from game_server.contracts.shared_models.base_responses import ResponseStatus
from game_server.contracts.shared_models.websocket_base_models import WebSocketMessage, WebSocketResponsePayload

logger.info("--- üöÄ –ó–∞–≥—Ä—É–∂–µ–Ω —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WebSocket-—Ä–æ—É—Ç–µ—Ä (unified_ws.py) ---")

router = APIRouter(tags=["Unified WebSocket"])

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
CLIENT_TYPE_PLAYER = "PLAYER"
CLIENT_TYPE_DISCORD_BOT = "DISCORD_BOT"
CLIENT_TYPE_ADMIN_PANEL = "ADMIN_PANEL"

# –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô WebSocket-—ç–Ω–¥–ø–æ–∏–Ω—Ç
@router.websocket("/v1/connect")
async def unified_websocket_endpoint(
    websocket: WebSocket,
    client_conn_manager: ClientConnectionManager = Depends(get_client_connection_manager_dependency),
    message_bus: IMessageBus = Depends(get_message_bus_dependency),
    # üî• –£–î–ê–õ–ï–ù–û: token –∏ client_type –∏–∑ Query. –û–∂–∏–¥–∞–µ–º –∏—Ö –≤ JSON-—Å–æ–æ–±—â–µ–Ω–∏–∏
    # client_type: str = Query(..., alias="clientType"),
    # token: str = Query(None),
):
    client_id: Optional[str] = None
    client_type: Optional[str] = None
    client_address = f"{websocket.client.host}:{websocket.client.port}" if websocket.client else "N/A"
    
    await websocket.accept()
    logger.info(f"üîå –í—Ö–æ–¥—è—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç {client_address} –ø—Ä–∏–Ω—è—Ç–æ. –û–∂–∏–¥–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")

    try:
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ß–∏—Ç–∞–µ–º JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_payload_str = await asyncio.wait_for(websocket.receive_text(), timeout=10.0)
        auth_payload = json.loads(auth_payload_str)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è
        command_from_ws_auth = auth_payload.get("command") # üî• –ù–û–í–û–ï: –û–∂–∏–¥–∞–µ–º command
        token_to_validate = auth_payload.get("token")
        requested_client_type = auth_payload.get("client_type")
        bot_name_from_payload = auth_payload.get("bot_name") # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å bot_name –≤ RPC

        if not command_from_ws_auth or not token_to_validate or not requested_client_type: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ command
            logger.warning(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç {client_address}.")
            raise ValueError("Missing 'command', 'token' or 'client_type' in authentication data.")

        rpc_request_data = {
            "command": command_from_ws_auth, # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ—Ä–µ–º command –∏–∑ JSON-—Å–æ–æ–±—â–µ–Ω–∏—è
            "token": token_to_validate,
            "client_type": requested_client_type,
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è RPC, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, bot_name)
            "bot_name": bot_name_from_payload # –ü–µ—Ä–µ–¥–∞–µ–º bot_name –≤ RPC
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ RPC-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞: {requested_client_type}...")
        
        validation_result = await message_bus.call_rpc(
            queue_name=Queues.AUTH_VALIDATE_TOKEN_RPC,
            payload=rpc_request_data
        )
        logger.debug(f"DEBUG_GATEWAY_RPC_RESPONSE: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç RPC-–≤–∞–ª–∏–¥–∞—Ü–∏–∏: {validation_result}")

        # –ü–æ–ª—É—á–∞–µ–º payload –∏–∑ –æ—Ç–≤–µ—Ç–∞ RPC
        rpc_payload = validation_result.get("payload")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ payload —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç is_valid
        if rpc_payload and rpc_payload.get("is_valid"):
            client_id = rpc_payload.get("client_id")
            client_type = rpc_payload.get("client_type")

            if not client_id or not client_type:
                error_message = "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç RPC-—Å–µ—Ä–≤–∏—Å–∞."
                logger.warning(f"‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client_address} –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_message}")
                raise ValueError(f"Authentication failed: {error_message}")

            auth_confirm_correlation_id = uuid.uuid4()

            auth_confirm_payload = WebSocketResponsePayload(
                request_id=auth_confirm_correlation_id,
                status=ResponseStatus.SUCCESS,
                message="Authentication successful.",
                data={"client_id": client_id, "client_type": client_type}
            )
            auth_confirm_message = WebSocketMessage(
                type="AUTH_CONFIRM",
                correlation_id=auth_confirm_correlation_id,
                payload=auth_confirm_payload
            )
            await websocket.send_text(auth_confirm_message.model_dump_json())
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É {client_id}.")

        else:
            # –ï—Å–ª–∏ payload –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ is_valid –Ω–µ True
            error_message = rpc_payload.get("error") if rpc_payload else None
            if not error_message:
                error_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞."
            logger.warning(f"‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client_address} –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_message}")
            raise ValueError(f"Authentication failed: {error_message}")

        if not client_id:
            raise ValueError("–í –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'client_id' –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        
        # --- –®–ê–ì 2: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–Ø ---
        await client_conn_manager.connect(websocket, client_id, client_type)

        # --- –®–ê–ì 3: –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î ---
        while True:
            message_text = await websocket.receive_text()
            raw_message_dict = json.loads(message_text)

            websocket_msg = WebSocketMessage.model_validate(raw_message_dict)


            if websocket_msg.type == "COMMAND":
                # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º "–æ–±–µ—Ä—Ç–∫—É" –∫–æ–º–∞–Ω–¥—ã
                command_wrapper = websocket_msg.payload                                
                logger.debug(f"DEBUG: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ 'command_wrapper': {command_wrapper}")    
                            
                # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∞–º—É "—á–∏—Å—Ç—É—é" –∫–æ–º–∞–Ω–¥—É
                actual_command_dto = command_wrapper['payload']
                actual_command_dto['client_id'] = client_id
                # ‚ñº‚ñº‚ñº –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£ ‚ñº‚ñº‚ñº
                actual_command_dto['correlation_id'] = websocket_msg.correlation_id
                # ‚ñº‚ñº‚ñº –≠–¢–û–¢ –ë–õ–û–ö –ù–£–ñ–ù–û –ü–†–û–í–ï–†–ò–¢–¨ –ò –ò–°–ü–†–ê–í–ò–¢–¨ ‚ñº‚ñº‚ñº
                
                # 3. –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ "–æ–±–µ—Ä—Ç–∫–∏"
                domain = command_wrapper.get("domain", "system") # 'system' –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                
                # 4. –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã –∏–∑ "—á–∏—Å—Ç–æ–π" –∫–æ–º–∞–Ω–¥—ã
                command_name = actual_command_dto.get("command", "default")
                
                # 5. –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
                routing_key = f"{RoutingKeys.COMMAND_PREFIX}.{domain}.{command_name}"
                
                # ‚ñ≤‚ñ≤‚ñ≤ –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò ‚ñ≤‚ñ≤‚ñ≤

                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {client_id}. –ö–ª—é—á: '{routing_key}'.")

                await message_bus.publish(
                    exchange_name=Exchanges.COMMANDS,
                    routing_key=routing_key,
                    message=actual_command_dto
                )
                logger.info(f"–ö–æ–º–∞–Ω–¥–∞ '{command_name}' –æ—Ç {client_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ {Exchanges.COMMANDS} —Å –∫–ª—é—á–æ–º '{routing_key}'.")

    except WebSocketDisconnect:
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client_id or client_address} –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
    except asyncio.TimeoutError:
        logger.warning(f"–¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_address}. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
        if websocket.client_state != WebSocketState.DISCONNECTED:
            await websocket.close(code=status.WS_1008_POLICY_VIOLATION, reason="Authentication timeout.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–ª—è {client_id or client_address}: {e}", exc_info=True)
        if websocket.client_state != WebSocketState.DISCONNECTED:
            await websocket.close(code=status.WS_1011_INTERNAL_ERROR, reason="Internal server error.")
    finally:
        if client_id:
            client_conn_manager.disconnect(client_id)
        logger.info(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {client_id or client_address} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–æ.")
