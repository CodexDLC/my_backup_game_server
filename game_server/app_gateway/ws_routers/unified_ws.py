# game_server/app_gateway/ws_routers/unified_ws.py

import asyncio
import json
from typing import Optional, Dict, Any
import uuid

from fastapi import APIRouter, WebSocket, WebSocketDisconnect, status, Depends
from starlette.websockets import WebSocketState

from game_server.common_contracts.shared_models.api_contracts import WebSocketMessage, WebSocketResponsePayload, ResponseStatus
from game_server.config.logging.logging_setup import app_logger as logger
from game_server.Logic.InfrastructureLogic.messaging.i_message_bus import IMessageBus
from game_server.app_gateway.gateway.client_connection_manager import ClientConnectionManager

from game_server.app_gateway.rest_api_dependencies import get_client_connection_manager_dependency, get_message_bus_dependency
from game_server.config.settings.rabbitmq.rabbitmq_names import Exchanges, RoutingKeys, Queues

logger.info("--- üöÄ –ó–∞–≥—Ä—É–∂–µ–Ω —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WebSocket-—Ä–æ—É—Ç–µ—Ä (unified_ws.py) ---")

router = APIRouter(tags=["Unified WebSocket"])

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
CLIENT_TYPE_PLAYER = "PLAYER"
CLIENT_TYPE_DISCORD_BOT = "DISCORD_BOT"
CLIENT_TYPE_ADMIN_PANEL = "ADMIN_PANEL"

# –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –£–ù–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ô WebSocket-—ç–Ω–¥–ø–æ–∏–Ω—Ç
@router.websocket("/v1/connect") # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —ç—Ç–æ –ø—É—Ç—å, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ—Ç
async def unified_websocket_endpoint(
    websocket: WebSocket,
    client_conn_manager: ClientConnectionManager = Depends(get_client_connection_manager_dependency),
    message_bus: IMessageBus = Depends(get_message_bus_dependency),
):
    """
    –ï–¥–∏–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Å–µ—Ö WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –∫–ª–∏–µ–Ω—Ç–∞: –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è -> –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ -> –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ.
    """
    client_id: Optional[str] = None
    client_type: Optional[str] = None
    client_address = f"{websocket.client.host}:{websocket.client.port}" if websocket.client else "N/A"
    
    await websocket.accept()
    logger.info(f"üîå –í—Ö–æ–¥—è—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç {client_address} –ø—Ä–∏–Ω—è—Ç–æ. –û–∂–∏–¥–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")

    try:
        # --- –®–ê–ì 1: –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ---
        auth_payload_str = await asyncio.wait_for(websocket.receive_text(), timeout=10.0)
        auth_payload = json.loads(auth_payload_str)

        token_to_validate = auth_payload.get("token")
        requested_client_type = auth_payload.get("client_type")
        bot_name_from_payload = auth_payload.get("bot_name")

        if not token_to_validate or not requested_client_type:
            logger.warning(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∏–ª–∏ —Ç–∏–ø –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç {client_address}.")
            raise ValueError("Missing 'token' or 'client_type' in authentication data.")

        rpc_request_data = {
            "token": token_to_validate,
            "client_type": requested_client_type,
            "bot_name": bot_name_from_payload
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ RPC-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞: {requested_client_type}...")
        
        validation_result = await message_bus.call_rpc(
            queue_name=Queues.AUTH_VALIDATE_TOKEN_RPC,
            payload=rpc_request_data
        )

        if validation_result and validation_result.get("is_valid"):
            client_id = validation_result.get("client_id")
            client_type = validation_result.get("client_type")
            if not client_id or not client_type:
                logger.warning(f"‚ùå RPC-–æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç client_id –∏–ª–∏ client_type: {validation_result}")
                raise ValueError("Invalid RPC response: missing client_id or client_type.")
            logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id} ({client_type}) —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ RPC.")

            auth_confirm_correlation_id = uuid.uuid4()

            auth_confirm_payload = WebSocketResponsePayload(
                request_id=auth_confirm_correlation_id,
                status=ResponseStatus.SUCCESS,
                message="Authentication successful.",
                data={"client_id": client_id, "client_type": client_type}
            )
            auth_confirm_message = WebSocketMessage(
                type="AUTH_CONFIRM",
                correlation_id=auth_confirm_correlation_id,
                payload=auth_confirm_payload
            )
            await websocket.send_text(auth_confirm_message.model_dump_json())
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É {client_id}.")

        else:
            error_message = validation_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞.")
            logger.warning(f"‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client_address} –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_message}")
            raise ValueError(f"Authentication failed: {error_message}")

        if not client_id:
            raise ValueError("–í –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'client_id' –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        
        # --- –®–ê–ì 2: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –°–û–ï–î–ò–ù–ï–ù–ò–Ø ---
        await client_conn_manager.connect(websocket, client_id, client_type)

        # --- –®–ê–ì 3: –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–ú–ê–ù–î ---
        while True:
            message_text = await websocket.receive_text()
            raw_message_dict = json.loads(message_text)

            websocket_msg = WebSocketMessage.model_validate(raw_message_dict)

            if websocket_msg.type == "COMMAND":
                command_payload = websocket_msg.payload
                
                # –î–æ–±–∞–≤–ª—è–µ–º client_id –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å payload,
                # —á—Ç–æ–±—ã BaseCommandDTO –º–æ–≥ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å.
                command_payload['client_id'] = client_id

                logger.debug(f"unified_ws: client_id –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –∫–æ–º–∞–Ω–¥—ã: {client_id}")
                logger.debug(f"unified_ws: command_payload –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π: {command_payload}")

                domain = command_payload.get("domain", "system")
                action = command_payload.get("action", "default")
                routing_key = f"{RoutingKeys.COMMAND_PREFIX}.{domain}.{action}"
                
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {client_id}. –ö–ª—é—á: '{routing_key}'.")

                await message_bus.publish(
                    exchange_name=Exchanges.COMMANDS,
                    routing_key=routing_key,
                    message=command_payload
                )
                logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç {client_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ {Exchanges.COMMANDS} —Å –∫–ª—é—á–æ–º '{routing_key}'.")

            elif websocket_msg.type == "ACK":
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω ACK –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {websocket_msg.correlation_id}")
            else:
                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ '{websocket_msg.type}' –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {client_id}.")

    except WebSocketDisconnect:
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {client_id or client_address} –æ—Ç–∫–ª—é—á–∏–ª—Å—è.")
    except asyncio.TimeoutError:
        logger.warning(f"–¢–∞–π–º–∞—É—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_address}. –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
        if websocket.client_state != WebSocketState.DISCONNECTED:
            await websocket.close(code=status.WS_1008_POLICY_VIOLATION, reason="Authentication timeout.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–ª—è {client_id or client_address}: {e}", exc_info=True)
        if websocket.client_state != WebSocketState.DISCONNECTED:
            await websocket.close(code=status.WS_1011_INTERNAL_ERROR, reason="Internal server error.")
    finally:
        if client_id:
            client_conn_manager.disconnect(client_id)
        logger.info(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {client_id or client_address} –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–æ.")
