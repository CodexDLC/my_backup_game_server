import datetime
from uuid import UUID
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from game_server.database.models.models import AppliedPermissions, DiscordBindings
from game_server.services.logging_config import logger
from game_server.Logic.DataAccessLogic.db_instance import get_db_session  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–µ—Å—Å–∏–∏ SQLAlchemy
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from typing import List, Optional

router = APIRouter()

# -------------------- –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ --------------------
class BindingRequest(BaseModel):
    world_id: UUID
    category_id: Optional[str] = None
    channel_id: Optional[str] = None

# -------------------- –û—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ --------------------
class BindingResponse(BaseModel):
    entity_access_key: str
    category_id: Optional[str]
    channel_id: Optional[str]
    world_id: UUID
    created_at: datetime.datetime
    updated_at: datetime.datetime

    model_config = {
        "arbitrary_types_allowed": True
    }

# -------------------- –û—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ --------------------
class PermissionResponse(BaseModel):
    discord_role_id: str
    discord_channel_id: str
    permissions: int


# -------------------- POST /bindings --------------------
@router.post(
    "/bindings/{guild_id}/{entity_access_key}",
    summary="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É Discord",
)
async def save_binding(
    guild_id: int,
    entity_access_key: str,
    payload: BindingRequest,
    db: AsyncSession = Depends(get_db_session)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏—é SQLAlchemy
):
    logger.info(f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏: guild={guild_id}, key={entity_access_key}, world_id={payload.world_id}")

    try:
        # –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLAlchemy
        stmt = select(DiscordBindings).filter_by(guild_id=guild_id, entity_access_key=entity_access_key)
        result = await db.execute(stmt)
        existing_binding = result.scalar_one_or_none()

        if existing_binding:
            # –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
            existing_binding.category_id = payload.category_id
            existing_binding.channel_id = payload.channel_id
            existing_binding.updated_at = datetime.datetime.utcnow()
            db.add(existing_binding)
        else:
            # –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            new_binding = DiscordBindings(
                guild_id=guild_id,
                world_id=payload.world_id,
                entity_access_key=entity_access_key,
                category_id=payload.category_id,
                channel_id=payload.channel_id,
                created_at=datetime.datetime.utcnow(),
                updated_at=datetime.datetime.utcnow()
            )
            db.add(new_binding)

        await db.commit()
        logger.info(f"INFO –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {entity_access_key} –¥–ª—è world_id={payload.world_id}")
        return {"status": "ok"}

    except Exception as e:
        logger.error(f"ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏")


# -------------------- GET /bindings --------------------
@router.get(
    "/bindings/{guild_id}",
    response_model=List[BindingResponse],
    summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ Discord –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–∏–ª—å–¥–∏–∏"
)
async def get_bindings(
    guild_id: int,
    db: AsyncSession = Depends(get_db_session)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏—é SQLAlchemy
):
    logger.info(f"üì• –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è guild_id={guild_id}")

    try:
        stmt = select(DiscordBindings).filter_by(guild_id=guild_id).order_by(DiscordBindings.entity_access_key)
        result = await db.execute(stmt)
        rows = result.scalars().all()

        if not rows:
            logger.info(f"‚ö†Ô∏è –ü—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è guild_id={guild_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–∞ –≥–∏–ª—å–¥–∏—è –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.")
            return []  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç

        logger.info(f"INFO –ù–∞–π–¥–µ–Ω–æ {len(rows)} –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è guild_id={guild_id}")
        return [BindingResponse(**dict(row)) for row in rows]

    except Exception as e:
        logger.error(f"ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–æ–∫: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–æ–∫")


# -------------------- GET /permissions --------------------
@router.get(
    "/permissions/{entity_access_key}",
    response_model=List[PermissionResponse],
    summary="–ü–æ–ª—É—á–∏—Ç—å –±–∏—Ç–æ–≤—ã–π —Ñ–ª–∞–≥ –ø—Ä–∞–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ access_key"
)
async def get_permissions(
    entity_access_key: str,
    db: AsyncSession = Depends(get_db_session)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–µ—Å—Å–∏—é SQLAlchemy
):
    logger.info(f"üîê –ó–∞–ø—Ä–æ—Å –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è entity_access_key={entity_access_key}")

    try:
        stmt = select(AppliedPermissions).filter_by(entity_access_key=entity_access_key).order_by(AppliedPermissions.role_id)
        result = await db.execute(stmt)
        rows = result.scalars().all()

        if not rows:
            # –≤–º–µ—Å—Ç–æ 404 –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            logger.info(f"‚ÑπÔ∏è –ü—Ä–∞–≤ –¥–ª—è {entity_access_key} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω—É –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
            return []

        return [PermissionResponse(**dict(r)) for r in rows]
    
    except Exception as e:
        logger.error(f"ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
