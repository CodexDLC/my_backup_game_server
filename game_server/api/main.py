

import os
from dotenv import load_dotenv
from contextlib import asynccontextmanager
from fastapi import FastAPI
from game_server.api.routers_config import ROUTERS_CONFIG
from game_server.services.logging.logging_setup import logger  # –ò–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–µ—Ä–∞
from prometheus_fastapi_instrumentator import Instrumentator



# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ `.env`
root_env = os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..', '..', '.env')
)

load_dotenv(root_env)

required_env_vars = [
    "REDIS_URL", 
]

required_env_vars = ["REDIS_URL"]  # –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
missing_vars = [var for var in required_env_vars if not os.getenv(var)]
if missing_vars:
    error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}"
    logger.critical(error_msg)
    raise EnvironmentError(error_msg)

# –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è Swagger UI
tags_metadata = [
    {"name": "Discord", "description": "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Discord-—Ñ—É–Ω–∫—Ü–∏—è–º–∏"},
    {"name": "System", "description": "API –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∏—Ä–∞"},
    {"name": "Random", "description": "API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª"},
    {"name": "Character", "description": "API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"},
]


@asynccontextmanager
async def lifespan(app: FastAPI):
    print("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")  # üî• –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤ lifespan
    yield  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞, –Ω–æ –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤




app = FastAPI(
    title="Game Server API",
    description="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API",
    openapi_tags=tags_metadata,
    lifespan=lifespan
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ Prometheus
instrumentator = Instrumentator()
instrumentator.instrument(app).expose(app)

@app.get("/")
async def root():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {
        "message": "Game Server API —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "status": "OK",
        "version": os.getenv("APP_VERSION", "dev")
    }

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
logger.info("‚åõ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤...")
for router_cfg in ROUTERS_CONFIG:
    try:
        app.include_router(
            router_cfg["router"],
            prefix=router_cfg["prefix"],
            tags=router_cfg["tags"]
        )
        logger.success(
            f"‚úÖ –†–æ—É—Ç {router_cfg['prefix']} –ø–æ–¥–∫–ª—é—á–µ–Ω | "
            f"–¢–µ–≥–∏: {router_cfg['tags']} | "
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {router_cfg.get('description', '')}"
        )
    except Exception as e:
        logger.critical(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–∞ {router_cfg['prefix']}: {str(e)}",
            exc_info=True
        )
        raise

logger.info(f"üéØ –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ {len(ROUTERS_CONFIG)} —Ä–æ—É—Ç–µ—Ä–æ–≤")

# Health check endpoint
@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "services": ["discord", "system", "character", "random"],
        "redis": "connected" if hasattr(app.state, 'rp_manager') and app.state.rp_manager.redis else "disconnected"
    }





