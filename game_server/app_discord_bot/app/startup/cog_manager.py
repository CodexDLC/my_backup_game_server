# game_server/app_discord_bot/app/startup/cog_manager.py

import os
import importlib.util
import inspect
import discord
from discord.ext import commands
from game_server.config.logging.logging_setup import app_logger as logger
import inject

# –î–ª—è Prometheus: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ (–ø—Ä–∏–º–µ—Ä—ã)
# from prometheus_client import Counter, Gauge # <--- –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å prometheus_client

# COGS_LOAD_ATTEMPTS = Counter('discord_cogs_load_attempts_total', 'Total attempts to load Discord cogs.')
# COGS_LOAD_SUCCESS = Counter('discord_cogs_load_success_total', 'Total successful Discord cogs loaded.')
# COGS_LOAD_FAILURES = Counter('discord_cogs_load_failures_total', 'Total failed Discord cogs loads.', ['reason'])
# COGS_LOADED_COUNT = Gauge('discord_cogs_loaded_current', 'Current number of loaded Discord cogs.')
# COGS_RELOAD_ATTEMPTS = Counter('discord_cogs_reload_attempts_total', 'Total attempts to reload Discord cogs.')
# COGS_RELOAD_SUCCESS = Counter('discord_cogs_reload_success_total', 'Total successful Discord cogs reloads.')
# COGS_RELOAD_FAILURES = Counter('discord_cogs_reload_failures_total', 'Total failed Discord cogs reloads.')


class CommandsManager:
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        
        self.base_dir_fs = os.path.join(os.path.dirname(__file__), "..", "cogs")
        self.base_dir_fs = os.path.abspath(self.base_dir_fs)
        
        self.base_import_prefix = "game_server.app_discord_bot.app.cogs"
        
        self.EXCLUDED_DIRS = {"__pycache__", "blueprints", "interface_templates", "utils"}
        self.EXCLUDED_FILES = {"__init__.py", "setup_world.txt", "channels_config.json"}
        self.EXCLUDED_PREFIXES = ("_",)
        
        self.loaded_cogs = set()
        logger.info(f"üöÄ –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–≥–æ–≤ | –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –§–°: {self.base_dir_fs}")
        logger.info(f"üöÄ –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–≥–æ–≤ | –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞: {self.base_import_prefix}")
        logger.debug("DEBUG: CommandsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    def _is_valid_cog(self, path: str) -> bool:
        filename = os.path.basename(path)
        dirname = os.path.basename(os.path.dirname(path))
        is_excluded = filename in self.EXCLUDED_FILES or \
                      filename.startswith(self.EXCLUDED_PREFIXES) or \
                      dirname in self.EXCLUDED_DIRS
        logger.debug(f"DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–≥–∞ '{filename}'. –ò—Å–∫–ª—é—á–µ–Ω: {is_excluded}, Python —Ñ–∞–π–ª: {filename.endswith('.py')}")
        return filename.endswith(".py") and not is_excluded

    def _path_to_module(self, file_path_fs: str) -> str:
        rel_path_from_cogs = os.path.relpath(file_path_fs, start=self.base_dir_fs)
        module_path_suffix = rel_path_from_cogs.replace(".py", "").replace(os.sep, ".")
        full_module_name = f"{self.base_import_prefix}.{module_path_suffix}"
        logger.debug(f"DEBUG: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏ '{file_path_fs}' –≤ –º–æ–¥—É–ª—å '{full_module_name}'.")
        return full_module_name

    async def load_cogs(self) -> bool:
        logger.debug("DEBUG: –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–æ–≤.")
        # COGS_LOAD_ATTEMPTS.inc() # Prometheus: –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
        if not os.path.exists(self.base_dir_fs):
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ –∫–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.base_dir_fs}")
            # COGS_LOAD_FAILURES.labels(reason='folder_not_found').inc() # Prometheus
            return False

        logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–≥–æ–≤ –≤: {self.base_dir_fs}")
        success_count = 0
        total_files = 0

        for root, dirs, files in os.walk(self.base_dir_fs):
            dirs[:] = [d for d in dirs if d not in self.EXCLUDED_DIRS]
            logger.debug(f"DEBUG: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {root}. –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {dirs}")
            for filename in files:
                file_path_fs = os.path.join(root, filename)
                total_files += 1
                if self._is_valid_cog(file_path_fs):
                    module_name = self._path_to_module(file_path_fs)
                    logger.debug(f"‚öôÔ∏è –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª –∫–æ–≥–∞: {module_name}")
                    if await self._load_cog(module_name):
                        success_count += 1
                else:
                    logger.debug(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–∞–π–ª: {filename}")

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–≥–æ–≤: {success_count} –∏–∑ {total_files} —Ñ–∞–π–ª–æ–≤")
        # if success_count > 0:
            # COGS_LOAD_SUCCESS.inc(success_count) # Prometheus
            # COGS_LOADED_COUNT.set(len(self.loaded_cogs)) # Prometheus
        # else:
            # COGS_LOAD_FAILURES.labels(reason='no_cogs_loaded').inc() # Prometheus
        return success_count > 0

    async def _load_cog(self, module_name: str) -> bool:
        logger.debug(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞: {module_name}")
        try:
            spec = importlib.util.find_spec(module_name)
            if spec is None:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –º–æ–¥—É–ª—è –∫–æ–≥–∞: {module_name}")
                # COGS_LOAD_FAILURES.labels(reason='spec_not_found').inc() # Prometheus
                return False
            
            lib = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(lib)
            logger.debug(f"DEBUG: –ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω.")

            cog_class = None
            for name, obj in inspect.getmembers(lib):
                if inspect.isclass(obj) and issubclass(obj, commands.Cog) and obj != commands.Cog:
                    cog_class = obj
                    logger.debug(f"DEBUG: –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å –∫–æ–≥–∞ '{cog_class.__name__}' –≤ –º–æ–¥—É–ª–µ '{module_name}'.")
                    break

            if cog_class is None:
                logger.error(f"‚ùå –í –º–æ–¥—É–ª–µ '{module_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å, –Ω–∞—Å–ª–µ–¥—É—é—â–∏–π –æ—Ç commands.Cog.")
                # COGS_LOAD_FAILURES.labels(reason='no_cog_class_found').inc() # Prometheus
                return False
            
            logger.debug(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–≥–∞ {cog_class.__name__} —á–µ—Ä–µ–∑ inject.instance().")
            
            # --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê –û–¢–õ–ê–î–ö–ò INJECTOR ---
            try:
                injector = inject.get_injector()
                if injector and hasattr(injector, '_bindings'):
                    logger.debug("DEBUG: –ò–Ω–∂–µ–∫—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏:")
                    for key, binding in injector._bindings.items():
                        provider_info = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä"
                        if hasattr(binding, 'provider'):
                            provider_info = f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä: {binding.provider}"
                        elif hasattr(binding, 'value'): # –î–ª—è –ø—Ä—è–º—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
                            provider_info = f"–ó–Ω–∞—á–µ–Ω–∏–µ: {binding.value}"
                        else:
                            provider_info = f"–ü—Ä—è–º–∞—è –ø—Ä–∏–≤—è–∑–∫–∞: {binding}"
                        
                        logger.debug(f" - –ö–ª—é—á: {key}  -->  {provider_info}")
                    logger.debug("DEBUG: –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫.")
                else:
                    logger.warning("WARNING: –ò–Ω–∂–µ–∫—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ _bindings.")
            except Exception as e:
                logger.error(f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω—Å–ø–µ–∫—Ü–∏–∏ –∏–Ω–∂–µ–∫—Ç–æ—Ä–∞: {e}", exc_info=True)
            # --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –û–¢–õ–ê–î–ö–ò INJECTOR ---

            cog_instance = inject.instance(cog_class)
            logger.debug(f"DEBUG: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–≥–∞ {cog_class.__name__} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
            
            await self.bot.add_cog(cog_instance)
            logger.debug(f"DEBUG: –ö–æ–≥ {cog_class.__name__} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–æ—Ç–∞.")

            self.loaded_cogs.add(module_name)
            logger.success(f"‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω: {module_name}")
            # COGS_LOAD_SUCCESS.inc() # Prometheus
            # COGS_LOADED_COUNT.set(len(self.loaded_cogs)) # Prometheus
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞ {module_name}", exc_info=True)
            # COGS_LOAD_FAILURES.labels(reason='exception').inc() # Prometheus
            return False

    async def reload_cogs(self):
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–≥–æ–≤.")
        # COGS_RELOAD_ATTEMPTS.inc() # Prometheus
        initial_loaded_cogs = list(self.loaded_cogs) # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–æ–ø–∏–∏
        reloaded_count = 0

        for cog_module_name in initial_loaded_cogs:
            logger.debug(f"DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–≥: {cog_module_name}")
            try:
                # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–≥–∞ –ø–æ –∏–º–µ–Ω–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å
                cog_name_from_module = cog_module_name.split('.')[-1] # –ò–º—è –∫–ª–∞—Å—Å–∞ –æ–±—ã—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º –º–æ–¥—É–ª—è –±–µ–∑ –ø—É—Ç–∏
                cog_instance = self.bot.get_cog(cog_name_from_module) # Discord.py –∏—â–µ—Ç –ø–æ qualified_name –∏–ª–∏ –∏–º–µ–Ω–∏
                
                if cog_instance:
                    await self.bot.remove_cog(cog_instance.qualified_name)
                    logger.debug(f"‚¨áÔ∏è –£–¥–∞–ª–µ–Ω –∫–æ–≥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {cog_instance.qualified_name}")
                    # self.loaded_cogs.remove(cog_module_name) # –ù–µ —É–¥–∞–ª—è–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤–∞–ª—Å—è –¥–ª—è for-—Ü–∏–∫–ª–∞
                else:
                    logger.warning(f"WARNING: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–≥–∞ '{cog_name_from_module}' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")

                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–π –∫–æ–¥
                spec = importlib.util.find_spec(cog_module_name)
                if spec:
                    lib = importlib.import_module(cog_module_name)
                    importlib.reload(lib)
                    logger.debug(f"üîÑ –ú–æ–¥—É–ª—å {cog_module_name} –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω.")
                    
                    # –ò—â–µ–º –∫–ª–∞—Å—Å –∫–æ–≥–∞ –≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –º–æ–¥—É–ª–µ
                    cog_class = None
                    for name, obj in inspect.getmembers(lib):
                        if inspect.isclass(obj) and issubclass(obj, commands.Cog) and obj != commands.Cog:
                            cog_class = obj
                            logger.debug(f"DEBUG: –ö–ª–∞—Å—Å –∫–æ–≥–∞ '{cog_class.__name__}' –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –º–æ–¥—É–ª–µ.")
                            break
                    
                    if cog_class:
                        new_cog_instance = inject.instance(cog_class) # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —á–µ—Ä–µ–∑ DI
                        await self.bot.add_cog(new_cog_instance) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
                        self.loaded_cogs.add(cog_module_name) # –°–Ω–æ–≤–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö
                        logger.success(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –∏ –∑–∞–Ω–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω: {cog_module_name}")
                        reloaded_count += 1
                        # COGS_RELOAD_SUCCESS.inc() # Prometheus
                        # COGS_LOADED_COUNT.set(len(self.loaded_cogs)) # Prometheus
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∞—Å—Å –∫–æ–≥–∞ –≤ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –º–æ–¥—É–ª–µ {cog_module_name}.")
                        # COGS_RELOAD_FAILURES.inc() # Prometheus
                else:
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –∫–æ–≥–∞: {cog_module_name}")
                    # COGS_RELOAD_FAILURES.inc() # Prometheus

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞ {cog_module_name}", exc_info=True)
                # COGS_RELOAD_FAILURES.inc() # Prometheus
        logger.info(f"‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ: {reloaded_count} –∏–∑ {len(initial_loaded_cogs)}")