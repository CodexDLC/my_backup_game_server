# game_server/app_discord_bot/app/services/admin/discord_entity_service.py
import logging
import json # –ù–û–í–û–ï: –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ Redis
from typing import Dict, Any, List, Optional
import discord
import uuid
import inject

from game_server.app_discord_bot.app.services.core_services.admin.article_management_service import ArticleManagementService
from game_server.app_discord_bot.app.services.core_services.admin.game_server_layout_service import GameServerLayoutService
from game_server.app_discord_bot.app.services.core_services.admin.hub_layout_service import HubLayoutService
from game_server.app_discord_bot.app.services.core_services.admin.message_login import send_login_message_to_reception_channel
from game_server.app_discord_bot.app.services.core_services.admin.role_management_service import RoleManagementService
from game_server.app_discord_bot.app.services.utils.name_formatter import NameFormatter
from game_server.app_discord_bot.storage.cache.constant.constant_key import RedisKeys
from game_server.app_discord_bot.app.services.utils.request_helper import RequestHelper
from game_server.app_discord_bot.storage.cache.managers.guild_config_manager import GuildConfigManager
from game_server.contracts.api_models.discord.entity_management_requests import GetDiscordEntitiesRequest, UnifiedEntityBatchDeleteRequest
from game_server.contracts.shared_models.base_responses import ResponseStatus
from game_server.contracts.shared_models.websocket_base_models import WebSocketMessage, WebSocketResponsePayload

from game_server.config.logging.logging_setup import app_logger as logger
from game_server.app_discord_bot.app.services.utils.cache_sync_manager import CacheSyncManager
from game_server.app_discord_bot.app.services.utils.message_sender_service import MessageSenderService


class DiscordEntityService:
    @inject.autoparams()
    def __init__(
        self,
        bot: discord.Client,
        guild_config_manager: GuildConfigManager,
        request_helper: RequestHelper,
        name_formatter: NameFormatter,
        cache_sync_manager: CacheSyncManager,
        game_server_layout_service: GameServerLayoutService,
        hub_layout_service: HubLayoutService,
        role_management_service: RoleManagementService,
        article_management_service: ArticleManagementService,
        message_sender_service: MessageSenderService, 
        logger: logging.Logger,
    ):
        self.bot = bot
        self.logger = logger
        self.guild_config_manager = guild_config_manager
        self.request_helper = request_helper
        self.name_formatter = name_formatter
        self.cache_sync_manager = cache_sync_manager
        self.game_server_layout_service = game_server_layout_service
        self.hub_layout_service = hub_layout_service
        self.role_management_service = role_management_service
        self.article_management_service = article_management_service
        self.message_sender_service = message_sender_service
        self.logger.info("‚ú® DiscordEntityService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        
    async def setup_game_server_layout(self, guild_id: int) -> Dict[str, Any]:
        # ... (–º–µ—Ç–æ–¥ setup_game_server_layout –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:
        1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç/—Å–æ–∑–¥–∞–µ—Ç —Ä–æ–ª–∏.
        2. –°–æ–∑–¥–∞–µ—Ç –ª–µ–π–∞—É—Ç –∫–∞–Ω–∞–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏.
        3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ª–æ–≥–∏–Ω–∞ –≤ –∫–∞–Ω–∞–ª 'reception'.
        """
        self.logger.info(f"–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Game Server {guild_id}.")
        
        guild = self.bot.get_guild(guild_id)
        if not guild:
            self.logger.error(f"–ì–∏–ª—å–¥–∏—è —Å ID {guild_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä.")
            return {"status": "failed", "message": f"–ì–∏–ª—å–¥–∏—è {guild_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

        # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö –æ–±—ä–µ–∫—Ç—ã
        self.logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Discord —Ä–æ–ª–µ–π –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ {guild_id}...")
        synced_roles = await self.role_management_service.sync_discord_roles(guild_id, "game")
        self.logger.success(f"–†–æ–ª–∏ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ {guild_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –ª–µ–π–∞—É—Ç –∫–∞–Ω–∞–ª–æ–≤, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
        self.logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–π–∞—É—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ {guild_id}...")
        layout_creation_result = await self.game_server_layout_service.setup_game_server_layout(guild_id, roles=synced_roles)
        
        if layout_creation_result.get("status") != "success":
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–µ–π–∞—É—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ {guild_id}: {layout_creation_result.get('message')}")
            return layout_creation_result # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ª–µ–π–∞—É—Ç–∞

        self.logger.success(f"–õ–µ–π–∞—É—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ {guild_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ª–æ–≥–∏–Ω–∞ –≤ –∫–∞–Ω–∞–ª 'reception'
        self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –≤ Redis –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}...")
        
        # –ü–æ–ª—É—á–∞–µ–º login_message_id –∏–∑ Redis
        existing_login_message_id = await self.guild_config_manager.get_field(
            guild_id=guild_id,
            shard_type="game",
            field_name=RedisKeys.FIELD_LOGIN_MESSAGE_ID
        )

        if existing_login_message_id:
            self.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_login_message_id}) –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}. –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        else:
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –≤ –∫–∞–Ω–∞–ª 'reception' –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}...")
            layout_config = layout_creation_result.get("layout_config") 

            if layout_config:
                # ‚ñº‚ñº‚ñº –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ‚ñº‚ñº‚ñº
                # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –≤ self
                sent_message = await send_login_message_to_reception_channel(
                    guild=guild,
                    layout_config=layout_config,
                    bot=self.bot,
                    message_sender_service=self.message_sender_service,
                    guild_config_manager=self.guild_config_manager
                )
                if sent_message:
                    self.logger.success(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª 'reception' –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}.")
                else:
                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –≤ –∫–∞–Ω–∞–ª 'reception' –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}.")

        self.logger.success(f"–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Game Server {guild_id} –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return {"status": "success", "message": f"–ò–≥—Ä–æ–≤–æ–π —Å–µ—Ä–≤–µ—Ä {guild_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."}

    async def setup_hub_layout(self, guild_id: int) -> Dict[str, Any]:
        # ... (–º–µ—Ç–æ–¥ setup_hub_layout –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ö–∞–±-—Å–µ—Ä–≤–µ—Ä–∞.
        1. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç/—Å–æ–∑–¥–∞–µ—Ç —Ä–æ–ª–∏.
        2. –°–æ–∑–¥–∞–µ—Ç –ª–µ–π–∞—É—Ç –∫–∞–Ω–∞–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏.
        """
        self.logger.info(f"–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Hub Server {guild_id}.")
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏ –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö –æ–±—ä–µ–∫—Ç—ã
        synced_roles = await self.role_management_service.sync_discord_roles(guild_id, "hub")
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –ª–µ–π–∞—É—Ç, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
        return await self.hub_layout_service.setup_hub_layout(guild_id, roles=synced_roles)

    async def teardown_discord_layout(self, guild_id: int, shard_type: str) -> Dict[str, Any]:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ Discord –¥–ª—è –≥–∏–ª—å–¥–∏–∏.
        –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ —Ä–æ–ª–∏ –∏–≥—Ä–æ–∫–æ–≤, –∑–∞—Ç–µ–º –æ–±—â–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
        –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—á–∏—â–∞–µ—Ç –∫—ç—à.
        """
        guild = self.bot.get_guild(guild_id)
        if not guild:
            self.logger.warning(f"–ì–∏–ª—å–¥–∏—è —Å ID {guild_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ª–µ–π–∞—É—Ç–∞.")
            return {"status": "skipped", "message": f"–ì–∏–ª—å–¥–∏—è {guild_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."}

        self.logger.info(f"–ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ª–µ–π–∞—É—Ç–∞ Discord –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} (—Ç–∏–ø: {shard_type}).")
        
        # =====================================================================
        # –®–∞–≥ 1: –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ä–æ–ª–µ–π –∏–≥—Ä–æ–∫–æ–≤
        # =====================================================================
        self.logger.info(f"–ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —Ä–æ–ª–µ–π –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} (—Ç–∏–ø: {shard_type})...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö Discord ID –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞
        registered_player_ids_json = await self.guild_config_manager.get_field(
            guild_id=guild_id,
            shard_type=shard_type,
            field_name=RedisKeys.FIELD_REGISTERED_PLAYER_IDS
        )

        player_discord_ids: List[str] = []
        if registered_player_ids_json:
            try:
                # get_field —É–∂–µ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç JSON, –ø–æ—ç—Ç–æ–º—É —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞
                if isinstance(registered_player_ids_json, list):
                    player_discord_ids = [str(pid) for pid in registered_player_ids_json] # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∫ —Å—Ç—Ä–æ–∫–∞–º
                else:
                    self.logger.warning(f"–ü–æ–ª–µ '{RedisKeys.FIELD_REGISTERED_PLAYER_IDS}' –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ Redis –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}: {e}", exc_info=True)
        
        if player_discord_ids:
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(player_discord_ids)} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}. –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π.")
            for player_discord_id in player_discord_ids:
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞
                    player_account_key = RedisKeys.PLAYER_ACCOUNT_DATA_HASH.format(
                        shard_id=guild_id, # –ó–¥–µ—Å—å guild_id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ shard_id
                        discord_user_id=player_discord_id
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞
                    # –ï—Å–ª–∏ AccountDataManager –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç get_full_account_data_for_shard, —Ç–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ
                    player_data_from_redis = await self.guild_config_manager.redis_client.hgetall(player_account_key)
                    
                    if player_data_from_redis:
                        discord_channels_str = player_data_from_redis.get(RedisKeys.FIELD_DISCORD_CHANNELS.encode('utf-8'))
                        discord_roles_str = player_data_from_redis.get(RedisKeys.FIELD_DISCORD_ROLES.encode('utf-8'))

                        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                        if discord_channels_str:
                            try:
                                channel_ids = json.loads(discord_channels_str.decode('utf-8'))
                                for channel_id in channel_ids:
                                    try:
                                        channel = guild.get_channel(int(channel_id))
                                        if channel:
                                            await self.base_ops.delete_discord_channel(channel)
                                            self.logger.debug(f"–£–¥–∞–ª–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª {channel_id} –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_discord_id}.")
                                        else:
                                            self.logger.warning(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª {channel_id} –∏–≥—Ä–æ–∫–∞ {player_discord_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø—Ä–æ–ø—É—â–µ–Ω.")
                                    except Exception as e:
                                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {channel_id} –∏–≥—Ä–æ–∫–∞ {player_discord_id}: {e}", exc_info=True)
                            except (json.JSONDecodeError, TypeError) as e:
                                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏–≥—Ä–æ–∫–∞ {player_discord_id}: {e}", exc_info=True)

                        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–æ–ª–µ–π
                        if discord_roles_str:
                            try:
                                role_ids = json.loads(discord_roles_str.decode('utf-8'))
                                for role_id in role_ids:
                                    try:
                                        role = guild.get_role(int(role_id))
                                        if role:
                                            # base_ops.delete_discord_role –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
                                            await self.role_management_service.delete_role(guild.id, role_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º role_management_service
                                            self.logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–ª—å {role_id} –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_discord_id}.")
                                        else:
                                            self.logger.warning(f"–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–ª—å {role_id} –∏–≥—Ä–æ–∫–∞ {player_discord_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
                                    except Exception as e:
                                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Ä–æ–ª–∏ {role_id} –∏–≥—Ä–æ–∫–∞ {player_discord_id}: {e}", exc_info=True)
                            except (json.JSONDecodeError, TypeError) as e:
                                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è —Ä–æ–ª–µ–π –∏–≥—Ä–æ–∫–∞ {player_discord_id}: {e}", exc_info=True)
                        
                        # –£–¥–∞–ª–µ–Ω–∏–µ —Ö—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –∏–∑ Redis
                        await self.guild_config_manager.redis_client.delete(player_account_key) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
                        self.logger.info(f"–£–¥–∞–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ {player_discord_id} –∏–∑ Redis (–∫–ª—é—á: {player_account_key}).")
                    else:
                        self.logger.warning(f"–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–≥—Ä–æ–∫–∞ {player_discord_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Redis –ø–æ –∫–ª—é—á—É {player_account_key}. –ü—Ä–æ–ø—É—â–µ–Ω–æ.")

                except Exception as e:
                    self.logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä–æ–∫–∞ {player_discord_id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}", exc_info=True)
            
            # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π, —É–¥–∞–ª—è–µ–º —Å–∞–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ —à–∞—Ä–¥–∞
            await self.guild_config_manager.delete_fields(
                guild_id=guild_id,
                shard_type=shard_type,
                fields=[RedisKeys.FIELD_REGISTERED_PLAYER_IDS]
            )
            self.logger.success(f"–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} —É–¥–∞–ª–µ–Ω –∏–∑ Redis.")
        else:
            self.logger.info(f"–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} –ø—É—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π.")


        entities_to_delete = []
        source = "Unknown"

        # –®–∞–≥ 2 (–±—ã–≤—à–∏–π –®–∞–≥ 1): –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±—â–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ –∫—ç—à–∞ (–ü–†–ï–î–ü–û–ß–¢–ò–¢–ï–õ–¨–ù–´–ô –ò–°–¢–û–ß–ù–ò–ö)
        # –≠—Ç–æ—Ç –≤—ã–∑–æ–≤ get_all_fields –¥–æ–ª–∂–µ–Ω —Ç–µ–ø–µ—Ä—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω, —á—Ç–æ FIELD_REGISTERED_PLAYER_IDS —É–∂–µ —É–¥–∞–ª–µ–Ω.
        # –ï—Å–ª–∏ get_all_fields –Ω–µ –∏—Å–∫–ª—é—á–∞–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è, —ç—Ç–æ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞, —Ç.–∫. –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç layout –∏ roles
        cached_config = await self.guild_config_manager.get_all_fields(guild_id, shard_type)

        if cached_config:
            self.logger.info(f"–î–∞–Ω–Ω—ã–µ –æ–±—â–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞ Redis –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}.")
            source = "Redis Cache"
            
            # –≠—Ç–æ—Ç –±–ª–æ–∫ Hub Layout –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¢–û–õ–¨–ö–û –µ—Å–ª–∏ shard_type == "hub"
            # –¢–µ–∫—É—â–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ª—é–±–æ–º shard_type, —á—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if shard_type == "hub" and RedisKeys.FIELD_LAYOUT_CONFIG in cached_config:
                hub_layout_data = cached_config[RedisKeys.FIELD_LAYOUT_CONFIG]
                self.logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ Hub Layout –∏–∑ –∫—ç—à–∞.")
                for cat_name, cat_data in hub_layout_data.get('categories', {}).items():
                    entities_to_delete.append({'discord_id': cat_data['discord_id'], 'name': cat_name, 'entity_type': 'category'})
                    for chan_name, chan_data in cat_data.get('channels', {}).items():
                        entities_to_delete.append({'discord_id': chan_data['discord_id'], 'name': chan_name, 'entity_type': 'text_channel'})

            # –≠—Ç–æ—Ç –±–ª–æ–∫ Game Server Layout –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –¢–û–õ–¨–ö–û –µ—Å–ª–∏ shard_type == "game"
            if shard_type == "game" and RedisKeys.FIELD_LAYOUT_CONFIG in cached_config:
                layout_data = cached_config[RedisKeys.FIELD_LAYOUT_CONFIG]
                self.logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ Game Server Layout –∏–∑ –∫—ç—à–∞.")
                for cat_type in ['categories', 'player_channel_categories']:
                    for cat_name, cat_data in layout_data.get('layout_structure', {}).get(cat_type, {}).items():
                        entities_to_delete.append({'discord_id': cat_data['discord_id'], 'name': cat_name, 'entity_type': 'category'})
                        for chan_name, chan_data in cat_data.get('channels', {}).items():
                            entities_to_delete.append({'discord_id': chan_data['discord_id'], 'name': chan_name, 'entity_type': 'text_channel'})
            
            if RedisKeys.FIELD_SYSTEM_ROLES in cached_config:
                self.logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ System Roles –∏–∑ –∫—ç—à–∞.")
                for role_name, role_data in cached_config[RedisKeys.FIELD_SYSTEM_ROLES].items():
                    entities_to_delete.append({'discord_id': role_data['discord_id'], 'name': role_name, 'entity_type': 'role'})

        # –®–∞–≥ 3 (–±—ã–≤—à–∏–π –®–∞–≥ 2): –ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç –ò–õ–ò –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã–µ, –û–ë–†–ê–©–ê–ï–ú–°–Ø –ö –ë–≠–ö–ï–ù–î–£ (Fallback/–ì–∞—Ä–∞–Ω—Ç–∏—è)
        if not entities_to_delete: 
            self.logger.warning(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É –±—ç–∫–µ–Ω–¥–∞.")
            source = "Backend DB (Fallback)"
            try:
                get_entities_payload = GetDiscordEntitiesRequest(guild_id=guild_id)
                raw_ws_dict, _ = await self.request_helper.send_and_await_response(
                    api_method=self.request_helper.http_client_gateway.discord.get_entities,
                    request_payload=get_entities_payload,
                    correlation_id=get_entities_payload.correlation_id,
                    discord_context={"guild_id": guild_id, "command_source": "teardown_fallback"}
                )
                full_message = WebSocketMessage(**raw_ws_dict)
                response_payload = WebSocketResponsePayload(**full_message.payload)

                if response_payload.status != ResponseStatus.SUCCESS:
                    error_msg = response_payload.error.message if response_payload.error else "–ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—É—â–Ω–æ—Å—Ç–µ–π."
                    raise RuntimeError(error_msg)
                
                retrieved_entities_from_backend = response_payload.data.get("entities", [])
                entities_to_delete.extend(retrieved_entities_from_backend)

            except Exception as e:
                self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}", exc_info=True)
                return {"status": "failed", "message": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}"}

        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ —Å–ø–∏—Å–æ–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—É—Å—Ç
        if not entities_to_delete:
            self.logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} (–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã: {source}).")
            # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏ –æ–±—â–∏—Ö –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ –≤—ã—Ö–æ–¥–∏–º.
            await self.guild_config_manager.delete_config(guild_id, shard_type) # –£–¥–∞–ª—è–µ–º –≤–µ—Å—å —Ö—ç—à –∫–æ–Ω—Ñ–∏–≥–∞, –≤–∫–ª—é—á–∞—è –ø–æ–ª–µ players_ids, –µ—Å–ª–∏ –æ–Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å –ø—É—Å—Ç—ã–º
            self.logger.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (Hash) –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} (–∫–ª—é—á '{RedisKeys.GUILD_CONFIG_HASH.format(shard_type=shard_type, guild_id=guild_id)}') —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞.")
            return {"status": "skipped", "message": "–ù–µ—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."}

        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(entities_to_delete)} –æ–±—â–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–∏—Å—Ç–æ—á–Ω–∏–∫: {source}).")

        # # –®–∞–≥ 4 (–±—ã–≤—à–∏–π –®–∞–≥ 3): –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–∏–ª—å–¥–∏–∏ –∏–∑ –±—ç–∫–µ–Ω–¥-Redis
        # self.logger.info(f"–ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–∏–ª—å–¥–∏–∏ {guild_id} –∏–∑ –±—ç–∫–µ–Ω–¥-Redis —á–µ—Ä–µ–∑ CacheSyncManager...")
        # delete_success_on_backend_redis = await self.cache_sync_manager.delete_guild_config_from_backend(guild_id, shard_type)
        
        # if not delete_success_on_backend_redis:
        #     self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–∏–ª—å–¥–∏–∏ {guild_id} –∏–∑ –±—ç–∫–µ–Ω–¥-Redis. –û—Ç–º–µ–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ —É–¥–∞–ª–µ–Ω–∏–µ.")
        #     return {"status": "failed", "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –±—ç–∫–µ–Ω–¥-Redis."}
        
        # self.logger.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–∏–ª—å–¥–∏–∏ {guild_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±—ç–∫–µ–Ω–¥-Redis.")


        # –®–∞–≥ 5 (–±—ã–≤—à–∏–π –®–∞–≥ 4): –£–¥–∞–ª—è–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ Discord (–ª–æ–≥–∏–∫–∞ –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        discord_ids_to_delete = []
        for entity in filter(lambda e: e.get('entity_type') in ["text_channel", "voice_channel", "forum", "news"], entities_to_delete):
            try:
                channel = guild.get_channel(entity['discord_id'])
                if channel: await channel.delete()
                discord_ids_to_delete.append(entity['discord_id'])
            except discord.errors.NotFound:
                discord_ids_to_delete.append(entity['discord_id'])
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ {entity['name']}: {e}", exc_info=True)
        
        for entity in filter(lambda e: e.get('entity_type') == 'category', entities_to_delete):
            try:
                category = guild.get_channel(entity['discord_id'])
                if category: await category.delete()
                discord_ids_to_delete.append(entity['discord_id'])
            except discord.errors.NotFound:
                discord_ids_to_delete.append(entity['discord_id'])
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {entity['name']}: {e}", exc_info=True)
        
        for entity in filter(lambda e: e.get('entity_type') == 'role', entities_to_delete):
            try:
                role = guild.get_role(entity['discord_id'])
                if role: await role.delete()
                discord_ids_to_delete.append(entity['discord_id'])
            except discord.errors.NotFound:
                discord_ids_to_delete.append(entity['discord_id'])
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ {entity['name']}: {e}", exc_info=True)

        # –®–∞–≥ 6 (–±—ã–≤—à–∏–π –®–∞–≥ 5): –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π Discord –∏–∑ –ë–î
        if not discord_ids_to_delete:
            self.logger.info("–ù–µ—Ç —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î (–ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Discord).")
            return {"status": "success", "message": "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å."}
            
        delete_payload = UnifiedEntityBatchDeleteRequest(guild_id=guild_id, discord_ids=list(set(discord_ids_to_delete)))
        raw_ws_dict, _ = await self.request_helper.send_and_await_response(
            api_method=self.request_helper.http_client_gateway.discord.batch_delete_entities,
            request_payload=delete_payload,
            correlation_id=delete_payload.correlation_id,
            discord_context={"guild_id": guild_id, "command_source": "teardown_delete"}
        )
        full_message = WebSocketMessage(**raw_ws_dict)
        response_payload = WebSocketResponsePayload(**full_message.payload)

        if response_payload.status != ResponseStatus.SUCCESS:
            error_msg = response_payload.error.message if response_payload.error else "–ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π."
            raise RuntimeError(error_msg)

        self.logger.success(f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ {len(discord_ids_to_delete)} —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ –ë–î –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")

        # –®–∞–≥ 7 (–±—ã–≤—à–∏–π –®–∞–≥ 6): –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ)
        # –≠—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ö—ç—à–∞ –∫–æ–Ω—Ñ–∏–≥–∞ —à–∞—Ä–¥–∞, –≤–∫–ª—é—á–∞—è —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –ø—É—Å—Ç—ã–º.
        await self.guild_config_manager.delete_config(guild_id, shard_type)
        self.logger.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (Hash) –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} (–∫–ª—é—á '{RedisKeys.GUILD_CONFIG_HASH.format(shard_type=shard_type, guild_id=guild_id)}') —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞.")
        
        return {"status": "success", "message": "–õ–µ–π–∞—É—Ç Discord —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω."}