# game_server/app_discord_bot/app/services/authentication/logic_handlers/login_start.py

import inject
import discord
from discord.ext import commands

from game_server.app_discord_bot.app.services.utils.error_handlers import handle_flow_errors
from game_server.app_discord_bot.core.contracts.handler_response_dto import InitialLobbySetupDTO
from game_server.app_discord_bot.storage.cache.interfaces.account_data_manager_interface import IAccountDataManager
from game_server.app_discord_bot.transport.websocket_client.ws_manager import WebSocketManager

# üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ DTO –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
from game_server.contracts.api_models.character.responses import CharacterListResponseData
from game_server.contracts.dtos.system.commands import GetCharacterListForAccountCommandDTO


from game_server.contracts.shared_models.base_responses import ResponseStatus
from game_server.contracts.shared_models.websocket_base_models import WebSocketMessage, WebSocketResponsePayload
from game_server.app_discord_bot.app.services.utils.interaction_response_manager import InteractionResponseManager


class LoginStartHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Å—Å–∏–∏ –∏–≥—Ä–æ–∫–∞.
    """
    @inject.autoparams()
    def __init__(
        self,
        account_data_manager: IAccountDataManager,
        ws_manager: WebSocketManager,
        interaction_response_manager: InteractionResponseManager,
    ):
        self.account_data_manager = account_data_manager
        self.ws_manager = ws_manager
        self.interaction_response_manager = interaction_response_manager
        
    @handle_flow_errors
    async def execute(self, payload: str, interaction: discord.Interaction, response_message_object: discord.Message | None = None):
        user = interaction.user
        guild = interaction.guild
        
        # --- –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê ---
        if user.mobile_status != discord.Status.offline:
            await self.interaction_response_manager.send_personal_notification_message(
                interaction,
                "**–í–Ω–∏–º–∞–Ω–∏–µ!** –ü–æ—Ö–æ–∂–µ, –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –º–æ–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é Discord.\n\n"
                "–ò–∑-–∑–∞ –µ—ë –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π, –∏–≥—Ä–æ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–∂–µ—Ç –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —Å—Ä–∞–∑—É. "
                "–ï—Å–ª–∏ –≤—ã –Ω–µ –≤–∏–¥–∏—Ç–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, **–ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Discord**.",
                delete_after=60
            )
            # –ú—ã –ù–ï –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ª–æ–≥–∏–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –≤ —Ñ–æ–Ω–µ.
        # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---
        
        try:
            account_id_str = await self.account_data_manager.get_account_id_by_discord_id(user.id)
            if not account_id_str:
                raise ValueError("–í–∞—à –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            
            account_id = int(account_id_str)

            # üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ DTO –∫–æ–º–∞–Ω–¥—ã
            command_dto = GetCharacterListForAccountCommandDTO(account_id=account_id)
            
            full_message_dict, _ = await self.ws_manager.send_command(
                command_type=command_dto.command,
                command_payload=command_dto.model_dump(),
                domain="system", # üî• –ò–ó–ú–ï–ù–ï–ù–û: domain —Å "auth" –Ω–∞ "system"
                discord_context={"user_id": user.id, "guild_id": guild.id}
            )

            response_payload_dict = full_message_dict.get('payload', {})
            ws_response_payload = WebSocketResponsePayload(**response_payload_dict)
            
            if ws_response_payload.status != ResponseStatus.SUCCESS:
                error_message = ws_response_payload.message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏."
                raise RuntimeError(error_message)
            
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ DTO —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_data = CharacterListResponseData(**ws_response_payload.data)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º DTO —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            return InitialLobbySetupDTO(
                type="initial_lobby_setup",
                characters=result_data.characters
            )
        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–¥–µ—Å—å, –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            # –∏ —É–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä.
            await self.interaction_response_manager.send_personal_notification_message(
                interaction,
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –ª–æ–±–±–∏: {e}",
                delete_after=None
            )
            if response_message_object:
                await self.interaction_response_manager.complete_thinking_message(response_message_object, delete_delay=0)
            return None
