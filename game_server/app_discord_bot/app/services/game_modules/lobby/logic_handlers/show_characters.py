#  game_server\app_discord_bot\app\services\authentication\lobby\logic_handlers\show_characters.py

import inject
import discord
from discord.ext import commands

from game_server.app_discord_bot.core.contracts.handler_response_dto import CharacterSelectionDTO
from game_server.app_discord_bot.storage.cache.interfaces.account_data_manager_interface import IAccountDataManager
from game_server.app_discord_bot.transport.websocket_client.ws_manager import WebSocketManager

# üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ DTO –∫–æ–º–∞–Ω–¥—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞



from game_server.contracts.api_models.character.responses import CharacterListResponseData
from game_server.contracts.dtos.system.commands import GetCharacterListForAccountCommandDTO
from game_server.contracts.shared_models.base_responses import ResponseStatus
from game_server.contracts.shared_models.websocket_base_models import WebSocketMessage, WebSocketResponsePayload
from game_server.app_discord_bot.app.services.utils.error_handlers import handle_flow_errors


class ShowCharactersHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏'.
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ WebSocket.
    """
    @inject.autoparams()
    def __init__(
        self,
        account_data_manager: IAccountDataManager,
        ws_manager: WebSocketManager,
    ):
        self.account_data_manager = account_data_manager
        self.ws_manager = ws_manager

    @handle_flow_errors
    async def execute(self, payload: str, interaction: discord.Interaction):
        user = interaction.user
        guild = interaction.guild

        print(f"[+] Logic Handler (show_characters): –í—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}.")

        account_id_str = await self.account_data_manager.get_account_id_by_discord_id(user.id)
        if not account_id_str:
            raise ValueError("–í–∞—à –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

        account_id = int(account_id_str)

        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ DTO –∫–æ–º–∞–Ω–¥—ã
        command_dto = GetCharacterListForAccountCommandDTO(account_id=account_id)

        full_message_dict, _ = await self.ws_manager.send_command(
            command_type=command_dto.command, # command_dto.command —Ç–µ–ø–µ—Ä—å "get_character_list_for_account"
            command_payload=command_dto.model_dump(),
            domain="system", # domain –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "system", —Ç–∞–∫ –∫–∞–∫ –º—ã –ø–µ—Ä–µ–Ω–µ—Å–ª–∏ —ç—Ç–æ —Ç—É–¥–∞
            discord_context={"user_id": user.id, "guild_id": guild.id}
        )

        response_payload_dict = full_message_dict.get('payload', {})
        ws_response_payload = WebSocketResponsePayload(**response_payload_dict)

        if ws_response_payload.status != ResponseStatus.SUCCESS:
            error_message = ws_response_payload.message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."
            raise RuntimeError(error_message)

        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ DTO —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_data = CharacterListResponseData(**ws_response_payload.data)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º DTO —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏
        return CharacterSelectionDTO(
            type="character_selection_view",
            characters=result_data.characters
        )