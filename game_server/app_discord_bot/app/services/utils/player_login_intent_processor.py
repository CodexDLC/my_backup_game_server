# game_server/app_discord_bot/app/services/utils/player_login_intent_processor.py
import asyncio
import uuid
import discord
import logging
import inject
from typing import Tuple, Union

from game_server.app_discord_bot.storage.cache.managers.account_data_manager import AccountDataManager
from game_server.app_discord_bot.app.services.admin.base_discord_operations import BaseDiscordOperations
from game_server.app_discord_bot.storage.cache.managers.guild_config_manager import GuildConfigManager

from game_server.app_discord_bot.app.constant.constants_world import HUB_GUILD_ID
from game_server.app_discord_bot.app.services.utils.request_helper import RequestHelper
# üî• –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PlayerEventsHandler, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∑–¥–µ—Å—å
from game_server.app_discord_bot.app.events.player_events_handler import PlayerEventsHandler
from game_server.contracts.api_models.system.requests import HubRoutingRequest
from game_server.contracts.shared_models.websocket_base_models import WebSocketResponsePayload


class PlayerLoginIntentProcessor:
    """
    –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏–≥—Ä–æ–∫–∞.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –±—ã—Ç—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞—Ä–¥–µ.
    """
    @inject.autoparams()
    def __init__(
        self,
        account_data_manager: AccountDataManager,
        base_ops: BaseDiscordOperations,
        guild_config_manager: GuildConfigManager,
        request_helper: RequestHelper,
        logger: logging.Logger,
        # üî• –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º PlayerEventsHandler –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
        player_events_handler: PlayerEventsHandler
    ):
        self.account_data_manager = account_data_manager
        self.base_ops = base_ops
        self.guild_config_manager = guild_config_manager
        self.request_helper = request_helper
        self.logger = logger
        # üî• –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º PlayerEventsHandler –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç –∫–ª–∞—Å—Å–∞
        self.player_events_handler = player_events_handler
        self.logger.info("‚ú® PlayerLoginIntentProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def process_login_intent(self, interaction: discord.Interaction) -> bool:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞—Ä–¥–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –∏–≥—Ä–æ–∫ –±—ã–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω.
        """
        user = interaction.user
        guild = interaction.guild
        current_shard_id = guild.id

        self.logger.info(f"[LoginProcessor] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ª–æ–≥–∏–Ω –Ω–∞ —à–∞—Ä–¥–µ {current_shard_id}.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await interaction.followup.send("‚è≥ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", ephemeral=True)


        try:
            # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Redis
            roles_data = await self.account_data_manager.get_account_field(
                shard_id=current_shard_id,
                discord_user_id=user.id,
                field_name="discord_roles"
            )
            channels_data = await self.account_data_manager.get_account_field(
                shard_id=current_shard_id,
                discord_user_id=user.id,
                field_name="discord_channels"
            )

            if roles_data and channels_data:
                self.logger.info(f"[LoginProcessor] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è {user.id} (–ø–æ–ª—è discord_roles –∏ discord_channels). –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É –¥–∞–ª—å—à–µ –≤–æ–∑–≤—Ä–∞—â–∞—è True.")
                
                return True
            else:
                self.logger.warning(f"[LoginProcessor] –ü—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è {user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ —É –±—ç–∫–µ–Ω–¥–∞.")
                # _handle_backend_resolution —Ç–µ–ø–µ—Ä—å —Å–∞–º –≤—ã–∑—ã–≤–∞–µ—Ç handle_player_join –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
                return await self._handle_backend_resolution(interaction, user, guild, current_shard_id)

        except Exception as e:
            self.logger.critical(f"[LoginProcessor] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –¥–ª—è {user.id}: {e}", exc_info=True)
            if not interaction.response.is_done():
                await interaction.followup.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", ephemeral=True)
            return False

    async def _handle_backend_resolution(
        self, interaction: discord.Interaction, user: Union[discord.User, discord.Member],
        guild: discord.Guild, current_shard_id: int
    ) -> bool:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–≥–æ –æ—Ç–≤–µ—Ç–∞.
        """
        try:
            correlation_id_obj = uuid.uuid4()
            request_payload = HubRoutingRequest(
                correlation_id=str(correlation_id_obj),
                discord_user_id=str(user.id),
                guild_id=str(HUB_GUILD_ID),
            )

            discord_context = {
                "discord_user_id": str(user.id),
                "guild_id": str(guild.id),
                "command_source": "process_login_intent"
            }

            self.logger.info(f"[LoginProcessor] –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞ –¥–ª—è {user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ RequestHelper...")
            
            # –í—ã–∑—ã–≤–∞–µ–º —Ö–µ–ª–ø–µ—Ä
            raw_payload_dict, _ = await self.request_helper.send_and_await_response(
                api_method=self.request_helper.http_client_gateway.auth.hub_login,
                request_payload=request_payload,
                correlation_id=correlation_id_obj,
                discord_context=discord_context
            )
            
            response_payload = WebSocketResponsePayload(**raw_payload_dict)

            if response_payload.status.upper() != "SUCCESS":
                error_msg = response_payload.error.message if response_payload.error else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
                raise RuntimeError(error_msg)

            backend_resolved_shard_id = response_payload.data.get("shard_id")
            account_id = response_payload.data.get("account_id") # –ü–æ–ª—É—á–∞–µ–º account_id –∏–∑ –æ—Ç–≤–µ—Ç–∞ –±—ç–∫–µ–Ω–¥–∞

            if backend_resolved_shard_id is None or account_id is None:
                self.logger.error(f"[LoginProcessor] –ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª SUCCESS, –Ω–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ: {response_payload.data}")
                raise RuntimeError("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—ç–∫–µ–Ω–¥–∞ –ø—Ä–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏ –ª–æ–≥–∏–Ω–∞.")


            if int(backend_resolved_shard_id) == current_shard_id:
                self.logger.info(f"[LoginProcessor] –ë—ç–∫–µ–Ω–¥ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏–≤—è–∑–∫—É –∫ —Ç–µ–∫—É—â–µ–º—É —à–∞—Ä–¥—É {current_shard_id}. –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç-–ª–æ–≥–∏–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
                
                # üî• –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º account_id –≤ Redis –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è handle_player_join
                await self.account_data_manager.set_discord_account_mapping(
                    discord_user_id=user.id,
                    account_id=int(account_id)
                )
                self.logger.debug(f"[LoginProcessor] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ Discord ID {user.id} -> Account ID {account_id}.")

                # üî• –ù–û–í–û–ï: –í—ã–∑—ã–≤–∞–µ–º handle_player_join –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                await self.player_events_handler.handle_player_join(user)
                return True
            else:
                self.logger.info(f"[LoginProcessor] –ë—ç–∫–µ–Ω–¥ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª {user.id} –Ω–∞ –¥—Ä—É–≥–æ–π —à–∞—Ä–¥: {backend_resolved_shard_id}.")
                await self._redirect_player(interaction, user, guild, int(backend_resolved_shard_id))
                return False

        except (RuntimeError, asyncio.TimeoutError) as e:
            self.logger.error(f"[LoginProcessor] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±—ç–∫–µ–Ω–¥—É –¥–ª—è {user.id}: {e}", exc_info=True)
            await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}", ephemeral=True)
            return False
        except Exception as e:
            self.logger.critical(f"[LoginProcessor] –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ –¥–ª—è {user.id}: {e}", exc_info=True)
            await interaction.followup.send(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {e}", ephemeral=True)
            return False

    async def _redirect_player(self, interaction: discord.Interaction, user: discord.Member, current_guild: discord.Guild, target_shard_id: int):
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —à–∞—Ä–¥."""
        target_guild = await self.base_ops.get_guild_by_id(target_shard_id)
        if not target_guild:
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–µ–ª–µ–≤–æ–π —à–∞—Ä–¥-—Å–µ—Ä–≤–µ—Ä —Å ID: {target_shard_id}")

        layout_config = await self.guild_config_manager.get_field(target_guild.id, "layout_config", "game")
        if not layout_config:
            raise RuntimeError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ —à–∞—Ä–¥–∞ {target_guild.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        reception_channel_id_str = layout_config.get("layout_structure", {}).get("categories", {}).get("Category: GENERAL_CHANNELS", {}).get("channels", {}).get("reception", {}).get("discord_id")
        if not reception_channel_id_str:
            raise RuntimeError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª 'reception' –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ü–µ–ª–µ–≤–æ–≥–æ —à–∞—Ä–¥–∞.")

        welcome_channel = target_guild.get_channel(int(reception_channel_id_str))
        if not welcome_channel or not isinstance(welcome_channel, discord.TextChannel):
            raise RuntimeError(f"–ö–∞–Ω–∞–ª 'reception' (ID: {reception_channel_id_str}) –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Ü–µ–ª–µ–≤–æ–º —à–∞—Ä–¥–µ.")

        invite_link = await self.base_ops.create_invite_link(welcome_channel)
        if not invite_link:
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")

        await self.base_ops.send_dm_message(user, f"–í–∞—à –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –º–∏—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: {invite_link}")
        await interaction.followup.send("‚úÖ –í—ã –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–≤–æ–π –º–∏—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", ephemeral=True)
        await current_guild.kick(user, reason=f"–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —à–∞—Ä–¥ {target_shard_id}.")
