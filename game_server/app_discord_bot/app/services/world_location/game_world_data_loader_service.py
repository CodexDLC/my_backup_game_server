# game_server/app_discord_bot/app/services/game_world/game_world_data_loader_service.py
# Version: 0.003 # Incrementing version

import inject
import json
from typing import Dict, Any, Optional
from pydantic import ValidationError # üî• –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ValidationError

from game_server.config.logging.logging_setup import app_logger as logger
from game_server.app_discord_bot.storage.cache.interfaces.game_world_data_manager_interface import IGameWorldDataManager
from game_server.app_discord_bot.storage.cache.constant.constant_key import RedisKeys
from game_server.app_discord_bot.transport.websocket_client.ws_manager import WebSocketManager
from game_server.contracts.dtos.game_world.commands import GetWorldDataCommandDTO
from game_server.contracts.dtos.game_world.data_models import WorldLocationDataDTO
from game_server.contracts.dtos.game_world.results import GetWorldDataResponseData
from game_server.contracts.shared_models.base_responses import ResponseStatus
from game_server.contracts.shared_models.websocket_base_models import WebSocketResponsePayload

class GameWorldDataLoaderService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞ (—Å–∫–µ–ª–µ—Ç–∞) –≤ Redis.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞ (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ WebSocket) –∏ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö–µ—à–µ Redis.
    """
    @inject.autoparams()
    def __init__(
        self, 
        game_world_data_manager: IGameWorldDataManager,
        ws_manager: WebSocketManager
    ):
        self._game_world_data_manager = game_world_data_manager
        self._ws_manager = ws_manager
        logger.info("GameWorldDataLoaderService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def load_world_data_from_backend(self) -> None:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–∫–µ–ª–µ—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞ —Å –±—ç–∫–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ WebSocket
        –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –≤ Redis.
        """
        logger.info("–ó–∞–ø—Ä–æ—Å —Å–∫–µ–ª–µ—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞ —Å –±—ç–∫–µ–Ω–¥–∞ —á–µ—Ä–µ–∑ WebSocket...")

        command_dto = GetWorldDataCommandDTO()
        
        try:
            full_message_dict, _ = await self._ws_manager.send_command(
                command_type=command_dto.command,
                command_payload=command_dto.model_dump(),
                domain="system",
                discord_context={}
            )
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É '{command_dto.command}': {full_message_dict}")

            response_payload_dict = full_message_dict.get('payload', {})
            ws_response_payload = WebSocketResponsePayload(**response_payload_dict)

            if ws_response_payload.status == ResponseStatus.SUCCESS:
                world_data_response = GetWorldDataResponseData(**ws_response_payload.data)
                await self._save_locations_to_redis(world_data_response.locations)
                logger.info("–°–∫–µ–ª–µ—Ç –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Redis.")
            else:
                error_message = ws_response_payload.message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞."
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞ —Å –±—ç–∫–µ–Ω–¥–∞: {error_message}")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫–µ–ª–µ—Ç–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞: {e}", exc_info=True)

    async def _save_locations_to_redis(self, locations_data: Dict[str, WorldLocationDataDTO]) -> None:
        """
        –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –≤ Redis.
        –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö–µ—à –∏ –∑–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ.
        """
        logger.info("–ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π –≤ Redis...")
        
        await self._game_world_data_manager.delete_hash(RedisKeys.GLOBAL_GAME_WORLD_DATA)
        logger.info(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö–µ—à Redis '{RedisKeys.GLOBAL_GAME_WORLD_DATA}' –æ—á–∏—â–µ–Ω.")

        if not locations_data:
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            return

        for location_id, location_info_dto in locations_data.items():
            # model_dump() –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DTO –≤ —Å–ª–æ–≤–∞—Ä—å, –≥–æ—Ç–æ–≤—ã–π –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            json_location_data = json.dumps(location_info_dto.model_dump(), ensure_ascii=False)
            
            await self._game_world_data_manager.set_hash_field(
                key=RedisKeys.GLOBAL_GAME_WORLD_DATA,
                field=location_id,
                value=json_location_data
            )
            logger.debug(f"–õ–æ–∫–∞—Ü–∏—è '{location_id}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Redis.")
        logger.info("–î–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Redis.")


    async def get_location_data(self, location_id: str) -> Optional[WorldLocationDataDTO]: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–µ–ª–µ—Ç–∞ –º–∏—Ä–∞ –∏–∑ Redis –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏—Ö.
        """
        try:
            json_data = await self._game_world_data_manager.get_hash_field(
                key=RedisKeys.GLOBAL_GAME_WORLD_DATA,
                field=location_id
            )
            if json_data:
                # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ WorldLocationDataDTO
                return WorldLocationDataDTO(**json.loads(json_data))
            return None
        except ValidationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏ '{location_id}' –∏–∑ Redis: {e}", exc_info=True)
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏ '{location_id}' –∏–∑ —Å–∫–µ–ª–µ—Ç–∞ –º–∏—Ä–∞: {e}", exc_info=True)
            return None

    async def get_all_locations(self) -> Dict[str, WorldLocationDataDTO]: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π —Ç–∏–ø
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–π –∏–∑ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–µ–ª–µ—Ç–∞ –º–∏—Ä–∞ –∏–∑ Redis –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏—Ö.
        """
        try:
            all_fields = await self._game_world_data_manager.get_all_hash_fields(
                key=RedisKeys.GLOBAL_GAME_WORLD_DATA
            )
            parsed_data = {}
            for field, json_data in all_fields.items():
                try:
                    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ª–æ–∫–∞—Ü–∏—é –≤ WorldLocationDataDTO
                    parsed_data[field] = WorldLocationDataDTO(**json.loads(json_data))
                except ValidationError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ '{field}' –∏–∑ Redis: {e}", exc_info=True)
                    # –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–¥–Ω—è—Ç—å –æ—à–∏–±–∫—É
                    continue 
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ/–≤–∞–ª–∏–¥–∞—Ü–∏–∏ JSON –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ '{field}' –∏–∑ Redis: {e}", exc_info=True)
                    continue
            return parsed_data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π –∏–∑ —Å–∫–µ–ª–µ—Ç–∞ –º–∏—Ä–∞: {e}", exc_info=True)
            return {}
