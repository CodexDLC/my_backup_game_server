# game_server/app_discord_bot/app/services/authentication/authentication_orchestrator.py

import inject
import discord # üî• –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç discord

from .authentication_config import AUTH_LOGIC_HANDLER_MAP, AUTH_PRESENTATION_HANDLER_MAP
from game_server.app_discord_bot.app.services.utils.interaction_response_manager import InteractionResponseManager # üî• –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–æ–≤

class AuthenticationOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    @inject.autoparams() # –î–æ–±–∞–≤–∏–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    def __init__(self, interaction_response_manager: InteractionResponseManager): # üî• –ù–û–í–û–ï: –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        self.interaction_response_manager = interaction_response_manager

    # üî• –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º response_message_object –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä—É –º–µ—Ç–æ–¥–∞
    async def process(self, command_str: str, interaction: discord.Interaction, response_message_object: discord.Message | None = None):
        command_parts = command_str.split(':', 1)
        command_name = command_parts[0]
        payload = command_parts[1] if len(command_parts) > 1 else None
        
        LogicHandlerClass = AUTH_LOGIC_HANDLER_MAP.get(command_name)
        if not LogicHandlerClass:
            # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if response_message_object:
                await self.interaction_response_manager.complete_thinking_message(response_message_object, delete_delay=0)
            return

        logic_handler_instance = inject.instance(LogicHandlerClass)
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º response_message_object –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        data_dto = await logic_handler_instance.execute(payload, interaction, response_message_object=response_message_object)
        
        # üî• –ù–û–í–û–ï: –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏–∫–∏ –≤–µ—Ä–Ω—É–ª None, –∑–Ω–∞—á–∏—Ç, –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.
        # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä.
        if data_dto is None:
            if response_message_object:
                await self.interaction_response_manager.complete_thinking_message(response_message_object, delete_delay=0)
            return

        data_type = data_dto.type # –ò—Å–ø–æ–ª—å–∑—É–µ–º data_dto –≤–º–µ—Å—Ç–æ data –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        PresentationHandlerClass = AUTH_PRESENTATION_HANDLER_MAP.get(data_type)
        if not PresentationHandlerClass:
            # –ï—Å–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            if response_message_object:
                await self.interaction_response_manager.complete_thinking_message(response_message_object, delete_delay=0)
            return

        presentation_handler_instance = inject.instance(PresentationHandlerClass)
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º response_message_object –≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await presentation_handler_instance.execute(data_dto, interaction, helpers=None, response_message_object=response_message_object)