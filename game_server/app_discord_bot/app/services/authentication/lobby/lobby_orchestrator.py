# game_server/app_discord_bot/app/services/authentication/lobby/lobby_orchestrator.py

import inject
import discord
import logging
from discord.ext import commands

from .lobby_config import LOGIC_HANDLER_MAP, PRESENTATION_HANDLER_MAP
from game_server.app_discord_bot.app.services.utils.interaction_response_manager import InteractionResponseManager

class LobbyOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –õ–æ–±–±–∏."""
    @inject.autoparams()
    def __init__(self, interaction_response_manager: InteractionResponseManager, logger: logging.Logger):
        self.interaction_response_manager = interaction_response_manager
        self.logger = logger
        self.logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def process(self, command_str: str, interaction: discord.Interaction, response_message_object: discord.Message | None = None):
        # command_str –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ "enter_world:16" –∏–ª–∏ "show_characters"
        
        command_parts = command_str.split(':', 1)
        command_name = command_parts[0]
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–≤–ª–µ–∫–∞–ª–∞ payload –∑–¥–µ—Å—å –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ execute
        # payload = command_parts[1] if len(command_parts) > 1 else None 

        LogicHandlerClass = LOGIC_HANDLER_MAP.get(command_name)
        if not LogicHandlerClass:
            self.logger.warning(f"–õ–æ–≥–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ LobbyOrchestrator.")
            if response_message_object:
                await self.interaction_response_manager.complete_thinking_message(response_message_object, delete_delay=0)
            return

        logic_handler_instance = inject.instance(LogicHandlerClass)
        
        self.logger.info(f"–ü–µ—Ä–µ–¥–∞—é –∫–æ–º–∞–Ω–¥—É '{command_str}' –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É '{command_name}'.")

        try:
            # üî• –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –ü–û–õ–ù–£–Æ —Å—Ç—Ä–æ–∫—É command_str –≤ execute
            # –ù–∞–ø—Ä–∏–º–µ—Ä, "enter_world:16" –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ payload –≤ SelectCharacterHandler.execute()
            data_dto = await logic_handler_instance.execute(command_str, interaction) # –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º command_str –∫–∞–∫ payload

            if data_dto is None:
                self.logger.info(f"–õ–æ–≥–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command_name}' –≤–µ—Ä–Ω—É–ª None. –î–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.")
                if response_message_object:
                    await self.interaction_response_manager.complete_thinking_message(response_message_object, delete_delay=0)
                return

            data_type = data_dto.type
            PresentationHandlerClass = PRESENTATION_HANDLER_MAP.get(data_type)
            if not PresentationHandlerClass:
                self.logger.warning(f"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö '{data_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ LobbyOrchestrator.")
                if response_message_object:
                    await self.interaction_response_manager.complete_thinking_message(response_message_object, delete_delay=0)
                return

            presentation_handler_instance = inject.instance(PresentationHandlerClass)
            self.logger.info(f"–ü–µ—Ä–µ–¥–∞—é –¥–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ '{data_type}' –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É '{PresentationHandlerClass.__name__}'.")
            await presentation_handler_instance.execute(data_dto, interaction, helpers=None, response_message_object=response_message_object)
            self.logger.info(f"–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '{PresentationHandlerClass.__name__}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command_name}': {e}", exc_info=True)
            if not interaction.response.is_done():
                await interaction.response.send_message(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", ephemeral=True)
            elif response_message_object:
                await response_message_object.edit(content=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", delete_after=None)

