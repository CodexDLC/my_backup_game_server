# --- –§–∞–π–ª: app/services/lobby/presentation_handlers/display_deck_stub.py ---

import inject
import discord
import logging # üî• –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º logging

from game_server.app_discord_bot.core.contracts.handler_response_dto import StubResponseDTO
from game_server.app_discord_bot.storage.cache.interfaces.account_data_manager_interface import IAccountDataManager
from game_server.app_discord_bot.storage.cache.constant.constant_key import RedisKeys
from game_server.app_discord_bot.app.services.utils.interaction_response_manager import InteractionResponseManager

class DisplayDeckStubPresenter:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –∫–æ–ª–æ–¥—ã, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –Ω–∏–∂–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª –¥–∞—à–±–æ—Ä–¥–∞.
    """
    @inject.autoparams()
    def __init__(
        self,
        bot: discord.Client,
        account_data_manager: IAccountDataManager,
        interaction_response_manager: InteractionResponseManager,
        logger: logging.Logger, # üî• –ù–û–í–û–ï: –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
    ):
        self.bot = bot
        self.account_data_manager = account_data_manager
        self.interaction_response_manager = interaction_response_manager
        self.logger = logger # üî• –ù–û–í–û–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–≥–µ—Ä

    async def execute(self, response_dto: StubResponseDTO, interaction: discord.Interaction, helpers, response_message_object: discord.Message | None = None):
        user = interaction.user
        guild = interaction.guild

        embed = discord.Embed(
            title="–ö–æ–ª–æ–¥–∞",
            description=response_dto.message,
            color=discord.Color.orange()
        )

        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ Redis
            message_ids_data = await self.account_data_manager.get_account_field(guild.id, user.id, RedisKeys.FIELD_MESSAGES)
            footer_msg_id = int(message_ids_data["footer_id"])

            channels_data = await self.account_data_manager.get_account_field(guild.id, user.id, RedisKeys.FIELD_DISCORD_CHANNELS)
            interface_channel_id = int(channels_data["interface_channel_id"])
            dashboard_channel_id = int(channels_data["dashboard_channel_id"])

            interface_channel = guild.get_channel(interface_channel_id)
            dashboard_channel = guild.get_channel(dashboard_channel_id) or await self.bot.fetch_channel(dashboard_channel_id)

            # 2. –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            footer_msg = await interface_channel.fetch_message(footer_msg_id)
            await footer_msg.edit(embed=embed, view=None)

            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª –¥–∞—à–±–æ—Ä–¥–∞
            if isinstance(dashboard_channel, discord.TextChannel):
                dashboard_embed = discord.Embed(
                    title="üìù –û—Ç—á–µ—Ç –ø–æ –∫–æ–ª–æ–¥–µ",
                    description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–¥–µ. "
                                f"–°–æ–æ–±—â–µ–Ω–∏–µ: '{response_dto.message}'",
                    color=discord.Color.blue()
                )
                await dashboard_channel.send(embed=dashboard_embed)
                self.logger.info(f"–û—Ç—á–µ—Ç –æ –∫–æ–ª–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –¥–∞—à–±–æ—Ä–¥ –¥–ª—è {user.name} (–ö–∞–Ω–∞–ª: {dashboard_channel.name}).") # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï
            else:
                self.logger.warning(f"–ö–∞–Ω–∞–ª –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è {user.name} (ID: {dashboard_channel_id}) –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.") # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï

            # 4. –£–¥–∞–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if response_message_object:
                await self.interaction_response_manager.complete_thinking_message(response_message_object)

        except discord.NotFound:
            await self.interaction_response_manager.send_personal_notification_message(
                interaction,
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
                delete_after=None
            )
            if response_message_object:
                await self.interaction_response_manager.complete_thinking_message(response_message_object, delete_delay=0)
        except Exception as e:
            self.logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ DisplayDeckStubPresenter –¥–ª—è {user.name}: {e}", exc_info=True) # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï
            await self.interaction_response_manager.send_personal_notification_message(
                interaction,
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}",
                delete_after=None
            )
            if response_message_object:
                await self.interaction_response_manager.complete_thinking_message(response_message_object, delete_delay=0)