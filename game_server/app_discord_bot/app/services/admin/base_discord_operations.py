# game_server/app_discord_bot/app/services/admin/base_discord_operations.py

import discord
import logging # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
import inject # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è inject.autoparams
from typing import Optional, Dict, Any, Union, List
from discord import Forbidden, Guild, CategoryChannel, HTTPException, Member, TextChannel, ForumChannel, VoiceChannel, ChannelType, utils, PermissionOverwrite, Role

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
from game_server.app_discord_bot.config.assets.data.channels_config import CHANNELS_CONFIG
# –ò–º–ø–æ—Ä—Ç NameFormatter
from game_server.app_discord_bot.app.services.utils.name_formatter import NameFormatter




class BaseDiscordOperations:
    """
    –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Discord API.
    –°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞, —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    Discord-—Å—É—â–Ω–æ—Å—Ç–µ–π (–∫–∞–Ω–∞–ª—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ä–æ–ª–∏).
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ @inject.autoparams(), –±–µ–∑ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–ª—é—á–µ–π.
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç inject –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ –∏—Ö —Ç–∏–ø–∞–º.
    @inject.autoparams()
    def __init__(self, bot: discord.Client, name_formatter: NameFormatter, logger: logging.Logger):
        self.bot = bot
        self.logger = logger
        self.name_formatter = name_formatter


    async def get_guild_by_id(self, guild_id: int) -> Optional[Guild]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ Guild –ø–æ ID."""
        guild = self.bot.get_guild(guild_id)
        if not guild:
            try:
                guild = await self.bot.fetch_guild(guild_id)
            except (discord.NotFound, discord.HTTPException) as e:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–∏–ª—å–¥–∏—é {guild_id}: {e}")
                return None
        return guild

    def get_discord_channel_type(self, type_str: str) -> ChannelType:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–∞–Ω–∞–ª–∞ Discord –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
        type_map = {
            "text": ChannelType.text,
            "voice": ChannelType.voice,
            "category": ChannelType.category,
            "news": ChannelType.text,
            "forum": ChannelType.text,
        }
        return type_map.get(type_str.lower(), ChannelType.text)

    async def create_discord_category(
        self, guild: Guild, category_name: str, 
        overwrites: Optional[Dict[Union[Role, Member], PermissionOverwrite]] = None
    ) -> CategoryChannel:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ Discord.
        üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å 'overwrites' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤.
        """
        formatted_category_name = self.name_formatter.format_name_for_discord(category_name, 'category')
        
        existing_category = utils.get(guild.categories, name=formatted_category_name)
        if existing_category:
            self.logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{formatted_category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.")
            return existing_category

        try:
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º 'overwrites' –Ω–∞–ø—Ä—è–º—É—é.
            category_channel = await guild.create_category(name=formatted_category_name, overwrites=overwrites)
            self.logger.success(f"–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: '{formatted_category_name}' (ID: {category_channel.id}).")
            return category_channel
        except (Forbidden, HTTPException) as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Discord API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{formatted_category_name}': {e}", exc_info=True)
            raise

    async def create_discord_channel(
        self, guild: Guild, channel_name: str, channel_type_str: str,
        parent_category: Optional[CategoryChannel] = None, 
        overwrites: Optional[Dict[Union[Role, Member], PermissionOverwrite]] = None,
        description: Optional[str] = None
    ) -> Optional[Union[TextChannel, VoiceChannel, ForumChannel]]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ Discord.
        üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å 'overwrites' –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∞–≤.
        –ü–∞—Ä–∞–º–µ—Ç—Ä 'private_for_member' —É–¥–∞–ª–µ–Ω –≤ –ø–æ–ª—å–∑—É –±–æ–ª–µ–µ –≥–∏–±–∫–æ–≥–æ 'overwrites'.
        """
        discord_channel_type = self.get_discord_channel_type(channel_type_str)
        
        formatted_channel_name_for_lookup = self.name_formatter.format_name_for_discord(channel_name, discord_channel_type.name)
        clean_name_for_api = self.name_formatter.normalize_name_from_discord(channel_name, discord_channel_type.name)
        
        if not clean_name_for_api:
            self.logger.error(f"–ò–º—è –∫–∞–Ω–∞–ª–∞ '{channel_name}' –ø–æ—Å–ª–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è Discord API —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º. –ü—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è.")
            return None

        existing_channel = utils.get(guild.channels, name=formatted_channel_name_for_lookup.lstrip('#'), category=parent_category)

        if existing_channel and existing_channel.type == discord_channel_type:
            self.logger.info(f"–ö–∞–Ω–∞–ª '{formatted_channel_name_for_lookup}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π.")
            return existing_channel

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: 'overwrites' –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é.
        channel_kwargs_common = {
            "name": clean_name_for_api,
            "category": parent_category,
            "overwrites": overwrites or {}
        }
        if description: channel_kwargs_common["topic"] = description

        try:
            if discord_channel_type == ChannelType.voice:
                channel_obj = await guild.create_voice_channel(**channel_kwargs_common)
            elif discord_channel_type == ChannelType.text:
                channel_obj = await guild.create_text_channel(**channel_kwargs_common)
            else:
                self.logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ create_discord_channel: {discord_channel_type.name}. –û–∂–∏–¥–∞–µ—Ç—Å—è text –∏–ª–∏ voice.")
                return None

            self.logger.success(f"–°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª: '{formatted_channel_name_for_lookup}' (ID: {channel_obj.id}, –¢–∏–ø: {channel_type_str}).")
            return channel_obj
        except (Forbidden, HTTPException) as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Discord API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ '{formatted_channel_name_for_lookup}': {e}", exc_info=True)
            raise
            
    async def create_or_update_role(
        self, guild: discord.Guild, role_name: str,
        permissions_data: Optional[Dict[str, Any]] = None,
        color: Optional[discord.Color] = None,
        hoist: bool = False, mentionable: bool = False
    ) -> discord.Role:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å permissions_data –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.
        """
        formatted_role_name = self.name_formatter.format_name_for_discord(role_name, 'role')

        existing_role = discord.utils.get(guild.roles, name=formatted_role_name)
        if existing_role:
            self.logger.info(f"–†–æ–ª—å '{formatted_role_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.")
            return existing_role
        
        discord_permissions = discord.Permissions.none()
        if permissions_data:
            for perm, value in permissions_data.items():
                if hasattr(discord.Permissions, perm):
                    setattr(discord_permissions, perm, value)
                else:
                    self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ Discord: {perm}")
        
        try:
            new_role = await guild.create_role(
                name=formatted_role_name,
                permissions=discord_permissions,
                color=color or discord.Color.default(),
                hoist=hoist, mentionable=mentionable, reason="–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –±–æ—Ç–∞"
            )
            self.logger.success(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å –≤ Discord: '{new_role.name}' (ID: {new_role.id}).")
            return new_role
        except (Forbidden, HTTPException) as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Discord API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏ '{formatted_role_name}': {e}", exc_info=True)
            raise

    async def delete_discord_entity(self, entity: Union[Role, CategoryChannel, TextChannel, VoiceChannel, ForumChannel]):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å Discord (—Ä–æ–ª—å, –∫–∞–Ω–∞–ª, –∫–∞—Ç–µ–≥–æ—Ä–∏—é)."""
        try:
            entity_name = entity.name
            await entity.delete(reason="–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ –±–æ—Ç–∞.")
            self.logger.info(f"–°—É—â–Ω–æ—Å—Ç—å '{entity_name}' (ID: {entity.id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Discord.")
        except discord.NotFound:
            self.logger.warning(f"–°—É—â–Ω–æ—Å—Ç—å '{entity_name}' (ID: {entity.id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.")
        except Forbidden:
            self.logger.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ '{entity_name}'.")
            raise
        except HTTPException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ Discord API –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ '{entity_name}': {e}")
            raise

    async def get_discord_object_by_id(self, guild: Guild, discord_id: int) -> Optional[Union[Role, CategoryChannel, TextChannel, VoiceChannel, ForumChannel]]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç Discord –ø–æ –µ–≥–æ ID (—Ä–æ–ª—å, –∫–∞–Ω–∞–ª –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é)."""
        obj = guild.get_channel(discord_id) or guild.get_role(discord_id)
        if obj:
            return obj
        
        try:
            obj = await self.bot.fetch_channel(discord_id)
            return obj
        except (discord.NotFound, discord.HTTPException):
            pass

        try:
            all_roles = await guild.fetch_roles()
            obj = discord.utils.get(all_roles, id=discord_id)
            return obj
        except (discord.NotFound, discord.HTTPException):
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—É—â–Ω–æ—Å—Ç—å —Å ID {discord_id} –Ω–∏ –∫–∞–∫ –∫–∞–Ω–∞–ª, –Ω–∏ –∫–∞–∫ —Ä–æ–ª—å.")
        
        return None
            
    async def create_player_role(self, guild: discord.Guild, account_id: int) -> Optional[discord.Role]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –∏–≥—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º "Player-<account_id>".
        –ï—Å–ª–∏ —Ä–æ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–µ.
        """
        role_name = f"Player-{account_id}"
        existing_role = discord.utils.get(guild.roles, name=role_name)
        if existing_role:
            self.logger.info(f"–†–æ–ª—å '{role_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ.")
            return existing_role

        try:
            new_role = await guild.create_role(name=role_name, reason=f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–∏ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id}")
            self.logger.success(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–æ–ª—å '{role_name}' –≤ –≥–∏–ª—å–¥–∏–∏ '{guild.name}'.")
            return new_role
        except (Forbidden, HTTPException) as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å '{role_name}': {e}", exc_info=True)
            return None

    async def create_invite_link(
        self, channel: discord.TextChannel, max_age: int = 600, max_uses: int = 1, temporary: bool = True
    ) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é, –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.
        """
        try:
            invite = await channel.create_invite(
                max_age=max_age, max_uses=max_uses, temporary=temporary,
                reason="–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞"
            )
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel.name}': {invite.url}")
            return invite.url
        except (Forbidden, HTTPException) as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{channel.name}': {e}", exc_info=True)
            return None

    async def send_dm_message(self, user: Union[Member, discord.User], message_content: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        """
        try:
            await user.send(message_content)
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} ({user.name}).")
            return True
        except (Forbidden, HTTPException) as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
            return False