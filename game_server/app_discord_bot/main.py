# main.py
import sys
import asyncio
import os
from typing import Optional
from discord.ext import commands
import discord
from dotenv import load_dotenv

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
from game_server.app_discord_bot.app.startup.utils_initializer import UtilsInitializer
# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã
from game_server.app_discord_bot.storage.cache.bot_cache_initializer import BotCache, BotCacheInitializer
from game_server.app_discord_bot.storage.cache.discord_redis_client import DiscordRedisClient
from game_server.app_discord_bot.transport.pending_requests import PendingRequestsManager
from game_server.app_discord_bot.app.services.utils.request_helper import RequestHelper
from game_server.app_discord_bot.app.startup.event_manager import load_events
from game_server.app_discord_bot.config.discord_settings import (
    API_URL, BOT_NAME_FOR_GATEWAY, BOT_PREFIX, DISCORD_TOKEN,
    GAME_SERVER_API, GATEWAY_URL,
    REDIS_BOT_LOCAL_URL, REDIS_BOT_LOCAL_PASSWORD, REDIS_BOT_LOCAL_POOL_SIZE
)
from game_server.app_discord_bot.transport.http_client.http_manager import HTTPManager, create_http_manager
from game_server.app_discord_bot.app.startup.cog_manager import CommandsManager
from game_server.app_discord_bot.transport.websocket_client.ws_manager import WebSocketManager
from game_server.config.logging.logging_setup import app_logger as logger
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è —Ç–∞–π–ø-—Ö–∏–Ω—Ç–∏–Ω–≥–∞
from game_server.app_discord_bot.app.services.utils.cache_sync_manager import CacheSyncManager


# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

redis_client_instance: Optional[DiscordRedisClient] = None
bot_cache_instance: Optional[BotCache] = None
pending_requests_orchestrator: Optional[PendingRequestsManager] = None


class GameBot(commands.Bot):
    http_manager: Optional[HTTPManager]
    ws_manager: Optional[WebSocketManager]
    request_helper: Optional[RequestHelper]
    pending_requests_transport_manager: Optional[PendingRequestsManager]
    cache_manager: Optional[BotCache]
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ø-—Ö–∏–Ω—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    sync_manager: Optional[CacheSyncManager]

    def __init__(self):
        intents = discord.Intents.default()
        intents.members = True
        intents.message_content = True
        intents.guilds = True
        
        super().__init__(command_prefix=BOT_PREFIX, intents=intents)
        logger.info(f"–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: {BOT_PREFIX}")

    async def setup_hook(self):
        global redis_client_instance
        global bot_cache_instance
        global pending_requests_orchestrator 

        logger.info("--- –ó–∞–ø—É—Å–∫ setup_hook ---")

        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis Client
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞...")
        redis_client_instance = DiscordRedisClient(
            redis_url=REDIS_BOT_LOCAL_URL,
            max_connections=REDIS_BOT_LOCAL_POOL_SIZE,
            redis_password=REDIS_BOT_LOCAL_PASSWORD
        )
        logger.info("‚úÖ Redis –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω.")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫–µ—à–∞
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫–µ—à–∞...")
        cache_initializer = BotCacheInitializer()
        bot_cache_instance = cache_initializer.initialize(redis_client_instance)
        self.cache_manager = bot_cache_instance
        logger.info("‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∫–µ—à–∞ Redis —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PendingRequestsManager (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PendingRequestsManager (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)...")
        pending_requests_orchestrator = PendingRequestsManager(
            redis_pending_request_manager=self.cache_manager.pending_requests
        )
        self.pending_requests_transport_manager = pending_requests_orchestrator
        logger.info("‚úÖ PendingRequestsManager (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        self.http_manager = await create_http_manager(base_url=GAME_SERVER_API) 
        logger.info("‚úÖ HTTP –º–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RequestHelper –≤—ã–∑—ã–≤–∞–µ–º UtilsInitializer
        # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç (RequestHelper, CacheSyncManager)
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç...")
        utils_initializer = UtilsInitializer()
        utils_initializer.initialize(self) # 'self' –∑–¥–µ—Å—å - —ç—Ç–æ –∏ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç bot
        logger.info("‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã (RequestHelper, SyncManager) —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        
        # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        self.ws_manager = WebSocketManager(
            bot=self,
            pending_requests_manager=self.pending_requests_transport_manager,
            bot_name=BOT_NAME_FOR_GATEWAY,
            bot_cache=self.cache_manager
        )
        logger.info("‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω.")
        
        # 7. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π Discord...")
        await load_events(self)
        logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        # 8. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤...")
        cog_manager = CommandsManager(self)
        await cog_manager.load_cogs()
        logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        logger.info("--- setup_hook –∑–∞–≤–µ—Ä—à–µ–Ω ---")

    async def on_ready(self):
        """
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Discord.
        –¢–µ–ø–µ—Ä—å self.user –¥–æ—Å—Ç—É–ø–µ–Ω.
        """
        logger.info(f"–í–æ—à–µ–ª –∫–∞–∫ {self.user.name} (ID: {self.user.id})")

        logger.info("--- on_ready: –ó–ê–ü–£–°–ö WS MANAGER ---")
        
        if self.ws_manager:
            logger.debug("–í—ã–∑–æ–≤ ws_manager.start()...") # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ DEBUG
            self.ws_manager.start()
            logger.info("‚úÖ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.") # –û—Å—Ç–∞–µ—Ç—Å—è INFO
        else:
            logger.critical("‚ùå WebSocketManager –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ setup_hook!")
            
        logger.debug("--- on_ready: –ë–õ–û–ö –ó–ê–ü–£–°–ö–ê WS MANAGER –ó–ê–í–ï–†–®–ï–ù ---") # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ DEBUG
            
            
    async def close(self):
        global redis_client_instance
        global pending_requests_orchestrator 

        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...")
        
        # 1. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
        if self.ws_manager:
            await self.ws_manager.disconnect()
            logger.info("üîó WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        
        # 2. –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP —Å–µ—Å—Å–∏—é
        if self.http_manager:
            if hasattr(self.http_manager, 'session') and not self.http_manager.session.closed:
                await self.http_manager.session.close()
                logger.info("üîó HTTP —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞.")
        
        # 3. –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Redis (–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫–µ—à–∞)
        if redis_client_instance:
            await redis_client_instance.close()
            logger.info("üîó Redis –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç. –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∫–µ—à–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É.")
        
        # –û—á–∏—â–∞–µ–º pending requests, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤–∏—Å–µ—Ç—å
        if pending_requests_orchestrator:
            await pending_requests_orchestrator.shutdown()
            logger.info("–û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—á–∏—â–µ–Ω—ã –∏–∑ –ø–∞–º—è—Ç–∏ –∏ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

        await super().close()
        logger.info("üîö –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


async def main():
    bot = GameBot()
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await bot.start(DISCORD_TOKEN)
    except discord.LoginFailure:
        logger.critical("üîë –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω Discord! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DISCORD_TOKEN.")
        sys.exit(1)
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        sys.exit(1)
    finally:
        pass


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (KeyboardInterrupt).")
    except Exception as e:
        logger.critical(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–ª–æ–∫–µ –∑–∞–ø—É—Å–∫–∞: {e}", exc_info=True)
        sys.exit(1)
