# game_server/app_discord_bot/storage/cache/managers/guild_config_manager.py
import json
import logging
from typing import Dict, Any, Optional, List
import inject

from game_server.app_discord_bot.storage.cache.constant.constant_key import RedisKeys
from game_server.app_discord_bot.storage.cache.discord_redis_client import DiscordRedisClient
from game_server.app_discord_bot.storage.cache.interfaces.guild_config_manager_interface import IGuildConfigManager

class GuildConfigManager(IGuildConfigManager):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–∏–ª—å–¥–∏–π (—à–∞—Ä–¥–æ–≤) –≤ –≤–∏–¥–µ Redis Hash.
    –î–∞–Ω–Ω—ã–µ, —Ö—Ä–∞–Ω—è—â–∏–µ—Å—è –∑–¥–µ—Å—å, —è–≤–ª—è—é—Ç—Å—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º–∏.
    """
    ALLOWED_SHARD_TYPES = {"hub", "game"}
    @inject.autoparams()
    def __init__(self, redis_client: DiscordRedisClient, logger: logging.Logger):
        self.redis_client = redis_client
        self.logger = logger
        self.KEY_PATTERN = RedisKeys.GUILD_CONFIG_HASH
        self.logger.info("‚ú® GuildConfigManager (DI-ready) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        
    async def _get_key(self, guild_id: int, shard_type: str) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª—é—á Redis –¥–ª—è Hash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–∏–ª—å–¥–∏–∏."""
        if shard_type not in GuildConfigManager.ALLOWED_SHARD_TYPES:
            raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —à–∞—Ä–¥–∞: '{shard_type}'. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω –∏–∑ {GuildConfigManager.ALLOWED_SHARD_TYPES}.")
        return self.KEY_PATTERN.format(guild_id=guild_id, shard_type=shard_type)

    async def set_field(self, guild_id: int, field_name: str, data: Any, shard_type: str):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤ Hash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–∏–ª—å–¥–∏–∏.
        :param guild_id: ID –≥–∏–ª—å–¥–∏–∏ Discord.
        :param field_name: –ò–º—è –ø–æ–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
        :param data: –î–∞–Ω–Ω—ã–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–±—É–¥—É—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ JSON, –µ—Å–ª–∏ —ç—Ç–æ dict/list).
        :param shard_type: –¢–∏–ø —à–∞—Ä–¥–∞ ("hub" –∏–ª–∏ "game").
        """
        key = await self._get_key(guild_id, shard_type)
        try:
            value = json.dumps(data) if isinstance(data, (dict, list)) else data
            await self.redis_client.hset(key, field_name, value)
            self.logger.debug(f"–ü–æ–ª–µ '{field_name}' –≤ Hash '{key}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ª—è '{field_name}' –≤ Hash '{key}': {e}", exc_info=True)

    async def get_field(self, guild_id: int, field_name: str, shard_type: str) -> Optional[Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–¥–Ω–æ –ø–æ–ª–µ –∏–∑ Hash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–∏–ª—å–¥–∏–∏.
        :param guild_id: ID –≥–∏–ª—å–¥–∏–∏ Discord.
        :param field_name: –ò–º—è –ø–æ–ª—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è.
        :param shard_type: –¢–∏–ø —à–∞—Ä–¥–∞ ("hub" –∏–ª–∏ "game").
        :return: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        key = await self._get_key(guild_id, shard_type)
        try:
            value = await self.redis_client.hget(key, field_name)
            if value:
                try:
                    return json.loads(value)
                except (json.JSONDecodeError, TypeError):
                    return value
            return None
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—è '{field_name}' –∏–∑ Hash '{key}': {e}", exc_info=True)
            return None

    async def get_all_fields(self, guild_id: int, shard_type: str) -> Optional[Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –∏ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Hash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–∏–ª—å–¥–∏–∏.
        :param guild_id: ID –≥–∏–ª—å–¥–∏–∏ Discord.
        :param shard_type: –¢–∏–ø —à–∞—Ä–¥–∞ ("hub" –∏–ª–∏ "game").
        :return: –°–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –∏–ª–∏ None, –µ—Å–ª–∏ Hash –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        key = await self._get_key(guild_id, shard_type)
        try:
            all_data = await self.redis_client.hgetall(key)
            if not all_data:
                self.logger.warning(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} (–∫–ª—é—á {key}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ.")
                return None
            
            parsed_data = {}
            for field, value in all_data.items():
                try:
                    parsed_data[field] = json.loads(value) 
                except (json.JSONDecodeError, TypeError):
                    parsed_data[field] = value
            return parsed_data
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏–∑ Hash '{key}': {e}", exc_info=True)
            return None

    async def delete_fields(self, guild_id: int, fields: List[str], shard_type: str) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π –∏–∑ Hash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–∏–ª—å–¥–∏–∏.
        :param guild_id: ID –≥–∏–ª—å–¥–∏–∏ Discord.
        :param fields: –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –ø–æ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
        :param shard_type: –¢–∏–ø —à–∞—Ä–¥–∞ ("hub" –∏–ª–∏ "game").
        """
        if not fields:
            return
        key = await self._get_key(guild_id, shard_type)
        try:
            await self.redis_client.hdel(key, *fields)
            self.logger.info(f"–ü–æ–ª—è {fields} —É–¥–∞–ª–µ–Ω—ã –∏–∑ Hash '{key}'.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π {fields} –∏–∑ Hash '{key}': {e}", exc_info=True)

    async def delete_config(self, guild_id: int, shard_type: str) -> None:
        """
        –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç Hash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≥–∏–ª—å–¥–∏–∏.
        :param guild_id: ID –≥–∏–ª—å–¥–∏–∏ Discord.
        :param shard_type: –¢–∏–ø —à–∞—Ä–¥–∞ ("hub" –∏–ª–∏ "game").
        """
        key = await self._get_key(guild_id, shard_type)
        try:
            await self.redis_client.delete(key)
            self.logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (Hash) –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} (–∫–ª—é—á '{key}') —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Hash '{key}': {e}", exc_info=True)

    # =========================================================================
    # –ù–û–í–´–ô –ú–ï–¢–û–î: –ê—Ç–æ–º–∞—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ID –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    # =========================================================================
    async def add_player_id_to_registered_list(self, guild_id: int, shard_type: str, player_discord_id: str):
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç Discord ID –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞,
        –∏—Å–ø–æ–ª—å–∑—É—è Lua-—Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π —Å—Ä–µ–¥–µ.
        """
        key = await self._get_key(guild_id, shard_type)
        field = RedisKeys.FIELD_REGISTERED_PLAYER_IDS
        
        lua_script = """
            local key = KEYS[1]
            local field = ARGV[1]
            local new_id = ARGV[2]

            local current_json = redis.call('HGET', key, field)
            local current_list = {}

            -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –≤ current_json –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
            if current_json and current_json ~= '' then
                current_list = cjson.decode(current_json)
            end

            local found = false
            for i, v in ipairs(current_list) do
                if v == new_id then
                    found = true
                    break
                end
            end

            if not found then
                table.insert(current_list, new_id)
                redis.call('HSET', key, field, cjson.encode(current_list))
                return 1 -- ID –¥–æ–±–∞–≤–ª–µ–Ω
            else
                return 0 -- ID —É–∂–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ
            end
        """
        
        try:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª—é—á–∏ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–∞–∫ —Å–ø–∏—Å–∫–∏, –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç DiscordRedisClient.eval
            result = await self.redis_client.eval(lua_script, keys=[key], args=[field, player_discord_id])

            if result == 1:
                self.logger.debug(f"–ò–≥—Ä–æ–∫ {player_discord_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ {field} –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}.")
            else:
                self.logger.debug(f"–ò–≥—Ä–æ–∫ {player_discord_id} —É–∂–µ –±—ã–ª –≤ —Å–ø–∏—Å–∫–µ {field} –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}, –ø—Ä–æ–ø—É—â–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ Lua-—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ {player_discord_id} –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}: {e}", exc_info=True)
            raise