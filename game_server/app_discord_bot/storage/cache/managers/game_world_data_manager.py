# game_server/app_discord_bot/storage/cache/managers/game_world_data_manager.py
# Version: 0.003 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é

from datetime import datetime
import inject
import redis.asyncio as redis
import json
from typing import Dict, Any, Optional

from game_server.config.logging.logging_setup import app_logger as logger
from game_server.app_discord_bot.storage.cache.interfaces.game_world_data_manager_interface import IGameWorldDataManager
from game_server.app_discord_bot.storage.cache.constant.constant_key import RedisKeys
from game_server.app_discord_bot.storage.cache.discord_redis_client import DiscordRedisClient


class GameWorldDataManager(IGameWorldDataManager):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–≤–æ–≥–æ –º–∏—Ä–∞, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π IGameWorldDataManager.
    –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–µ–ª–µ—Ç–∞ –º–∏—Ä–∞,
    –∞ —Ç–∞–∫–∂–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ª–æ–∫–∞—Ü–∏—è—Ö.
    """
    @inject.autoparams()
    def __init__(self, redis_client: DiscordRedisClient):
        self._redis = redis_client
        logger.info("GameWorldDataManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def set_hash_field(self, key: str, field: str, value: str) -> None:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤ —Ö–µ—à–µ Redis. (–î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º–∏—Ä–∞)
        """
        try:
            await self._redis.hset(key, field, value)
            logger.debug(f"Redis: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ '{field}' –≤ —Ö–µ—à–µ '{key}'.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ª—è '{field}' –≤ —Ö–µ—à–µ '{key}' Redis: {e}", exc_info=True)

    async def delete_hash(self, key: str) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –≤–µ—Å—å —Ö–µ—à –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–ª—é—á—É.
        """
        try:
            await self._redis.delete(key)
            logger.info(f"Redis: –•–µ—à '{key}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–µ—à–∞ '{key}' Redis: {e}", exc_info=True)

    async def get_hash_field(self, key: str, field: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ —Ö–µ—à–∞."""
        try:
            return await self._redis.hget(key, field)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Redis HGET –¥–ª—è —Ö–µ—à–∞ '{key}', –ø–æ–ª—è '{field}': {e}", exc_info=True)
            return None

    async def get_all_hash_fields(self, key: str) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ö–µ—à–∞."""
        try:
            return await self._redis.hgetall(key)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Redis HGETALL –¥–ª—è —Ö–µ—à–∞ '{key}': {e}", exc_info=True)
            return {}

    # üî• –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ª–æ–∫–∞—Ü–∏–π (Redis String) üî•

    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –∏—Å–ø–æ–ª—å–∑—É–µ–º HMSET –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    async def set_dynamic_location_data(self, location_id: str, data: Dict[str, Any]) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏–∏ –≤ Redis Hash.
        –ö–ª—é—á —Ö–µ—à–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ GLOBAL_GAME_WORLD_DYNAMIC_LOCATION_DATA.
        –ü–æ–ª—è —Ö–µ—à–∞: players_in_location, npcs_in_location, last_update.

        Args:
            location_id (str): ID –ª–æ–∫–∞—Ü–∏–∏.
            data (Dict[str, Any]): –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, players_in_location, npcs_in_location, last_update).
        """
        hash_key = RedisKeys.GLOBAL_GAME_WORLD_DYNAMIC_LOCATION_DATA.format(location_id=location_id)
        try:
            processed_data = {}
            for k, v in data.items():
                if isinstance(v, datetime):
                    processed_data[k] = v.isoformat().replace('+00:00', 'Z') # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º datetime –≤ ISO —Å—Ç—Ä–æ–∫—É
                elif isinstance(v, (int, float, bool)): # –ß–∏—Å–ª–∞ –∏ –±—É–ª–µ–≤—ã –º–æ–∂–Ω–æ –Ω–∞–ø—Ä—è–º—É—é
                    processed_data[k] = str(v)
                else: # –û—Å—Ç–∞–ª—å–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∏)
                    processed_data[k] = v

            # üî•üî•üî• –í–û–¢ –ó–î–ï–°–¨ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–°–ü–û–õ–¨–ó–£–ï–ú HMSET üî•üî•üî•
            await self._redis.hmset(hash_key, processed_data) # <--- –ò–°–ü–û–õ–¨–ó–£–ï–ú HMSET
            logger.debug(f"Redis: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ '{location_id}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ö–µ—à–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ '{location_id}' –≤ Redis: {e}", exc_info=True)

    # üî• –ù–û–í–´–ô/–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis Hash
    async def get_dynamic_location_data(self, location_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ Redis Hash.

        Args:
            location_id (str): ID –ª–æ–∫–∞—Ü–∏–∏.

        Returns:
            Optional[Dict[str, Any]]: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
        """
        hash_key = RedisKeys.GLOBAL_GAME_WORLD_DYNAMIC_LOCATION_DATA.format(location_id=location_id)
        try:
            raw_data = await self._redis.hgetall(hash_key)
            if not raw_data:
                return None

            parsed_data = {}
            for k, v in raw_data.items():
                # raw_data.keys() –º–æ–≥—É—Ç –±—ã—Ç—å –±–∞–π—Ç–∞–º–∏, –µ—Å–ª–∏ decode_responses=False –≤ redis-–∫–ª–∏–µ–Ω—Ç–µ
                key_str = k.decode('utf-8') if isinstance(k, bytes) else k
                value_str = v.decode('utf-8') if isinstance(v, bytes) else v

                if key_str == "players_in_location" or key_str == "npcs_in_location":
                    parsed_data[key_str] = int(value_str) if value_str.isdigit() else 0
                elif key_str == "last_update":
                    try:
                        # last_update_str –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 –¥–ª—è datetime.fromisoformat
                        parsed_data[key_str] = value_str # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ç–∞–∫ –∫–∞–∫ DTO –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
                        # –ï—Å–ª–∏ DTO –æ–∂–∏–¥–∞–µ—Ç datetime, —Ç–æ: datetime.fromisoformat(value_str.replace('Z', '+00:00'))
                    except ValueError:
                        parsed_data[key_str] = None
                else:
                    parsed_data[key_str] = value_str

            return parsed_data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ '{location_id}' –∏–∑ Redis: {e}", exc_info=True)
            return None