# game_server/app_discord_bot/storage/cache/managers/pending_request_manager.py

import json
from typing import Dict, Any, Optional


from game_server.app_discord_bot.storage.cache.discord_redis_client import DiscordRedisClient
from game_server.app_discord_bot.storage.cache.interfaces.pending_request_manager_interface import IPendingRequestManager
from game_server.config.logging.logging_setup import app_logger as logger

class PendingRequestManager(IPendingRequestManager): # –≠—Ç–æ –≤–∞—à Redis-–º–µ–Ω–µ–¥–∂–µ—Ä
    def __init__(self, redis_client: DiscordRedisClient, ttl: int = 300):
        self.redis_client = redis_client
        self.ttl = ttl
        self.KEY_PREFIX = "pending_request"
        logger.info("‚ú® PendingRequestManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def store_request(self, command_id: str, data: Dict[str, Any]) -> None:
        key = f"{self.KEY_PREFIX}:{command_id}"
        try:
            await self.redis_client.set_with_ttl(key, json.dumps(data), self.ttl)
            logger.debug(f"–ó–∞–ø—Ä–æ—Å {command_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–µ—à–µ —Å TTL {self.ttl}s.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ {command_id} –≤ –∫–µ—à–µ: {e}", exc_info=True)

    async def retrieve_and_delete_request(self, command_id: str) -> Optional[Dict[str, Any]]:
        key = f"{self.KEY_PREFIX}:{command_id}"
        try:
            data_str = await self.redis_client.get(key)
            if data_str:
                await self.redis_client.delete(key) # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
                logger.debug(f"–ó–∞–ø—Ä–æ—Å {command_id} –∏–∑–≤–ª–µ—á–µ–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –∫–µ—à–∞.")
                return json.loads(data_str)
            logger.warning(f"–ó–∞–ø—Ä–æ—Å {command_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–µ—à–µ –∏–ª–∏ –∏—Å—Ç–µ–∫.")
            return None
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {command_id}: {e}", exc_info=True)
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ {command_id} –∏–∑ –∫–µ—à–∞: {e}", exc_info=True)
            return None

    def clear_all_pending(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ Future –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã)."""
        for request_id, future in list(self._pending.items()): # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–æ–ø–∏–∏, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å
            if not future.done():
                future.cancel("Manager shutting down")
                logger.debug(f"Pending request {request_id} cancelled during shutdown.")
            self._pending.pop(request_id, None)
        logger.info("–í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ Future –æ—á–∏—â–µ–Ω—ã.")
            
    # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ)
    async def delete_request(self, command_id: str) -> None:
        key = f"{self.KEY_PREFIX}:{command_id}"
        try:
            await self.redis_client.delete(key)
            logger.debug(f"–ó–∞–ø—Ä–æ—Å {command_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–µ—à–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ {command_id} –∏–∑ –∫–µ—à–∞: {e}", exc_info=True)