# game_server/app_discord_bot/transport/websocket_client/ws_manager.py

import aiohttp
import asyncio
import uuid
import json
import logging
from typing import Any, Dict, Optional, Tuple
from discord.ext import commands
import aiohttp.client_exceptions

from game_server.app_discord_bot.transport.websocket_client.handlers.event_handlers import WSEventHandlers
from game_server.app_discord_bot.transport.websocket_client.handlers.system_command_handlers import WSSystemCommandHandlers
from game_server.app_discord_bot.transport.websocket_client.rest_api.websocket_rest_helpers import request_auth_token
from game_server.contracts.shared_models.websocket_base_models import WebSocketCommandFromClientPayload, WebSocketMessage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–∞—à–∏—Ö —Ö–µ–ª–ø–µ—Ä-—Ñ–∞–π–ª–æ–≤
from .websocket_error_handlers import (
    handle_auth_success,
    handle_auth_error_response,
    handle_auth_invalid_data,
    handle_json_decode_error,
    handle_non_text_message,
    handle_client_connector_error,
    handle_timeout_error
)

# üî• –ù–û–í–´–ô –ò–ú–ü–û–†–¢ –î–ò–°–ü–ï–¢–ß–ï–†–ê:
from .websocket_inbound_dispatcher import WebSocketInboundDispatcher




from game_server.app_discord_bot.config.discord_settings import BOT_NAME_FOR_GATEWAY, GATEWAY_AUTH_TOKEN, GATEWAY_URL, GAME_SERVER_API
from game_server.app_discord_bot.transport.pending_requests import PendingRequestsManager
from game_server.app_discord_bot.storage.cache.bot_cache_initializer import BotCache

import inject

# ... (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Prometheus –º–µ—Ç—Ä–∏–∫, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã)


class WebSocketManager:

    @inject.autoparams()
    def __init__(
        self,
        bot: commands.Bot,
        pending_requests_manager: PendingRequestsManager,
        event_handler: WSEventHandlers,
        system_command_handler: WSSystemCommandHandlers,
        logger: logging.Logger,
        bot_cache: Optional[BotCache] = None
    ):
        self.logger = logger
        self.logger.info("WSManager: –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è __init__.")
        self.logger.debug("DEBUG: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WSManager –∑–∞–ø—É—â–µ–Ω–∞.")

        self._bot = bot
        self._ws_url = GATEWAY_URL
        self._api_key = GATEWAY_AUTH_TOKEN
        self._rest_api_base_url = GAME_SERVER_API
        self._auth_token_rest_endpoint = f"{self._rest_api_base_url}/auth/token"

        if not self._ws_url:
            self.logger.critical("CRITICAL: GATEWAY_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            raise ValueError("GATEWAY_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        if not self._api_key:
            self.logger.critical("CRITICAL: GATEWAY_AUTH_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            raise ValueError("GATEWAY_AUTH_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        if not self._rest_api_base_url:
            self.logger.critical("CRITICAL: GAME_SERVER_API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            raise ValueError("GAME_SERVER_API –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")

        self.pending_requests = pending_requests_manager
        self.event_handler = event_handler
        self.system_command_handler = system_command_handler
        self._bot_cache = bot_cache
        self._bot_name = BOT_NAME_FOR_GATEWAY
        
        self._session: Optional[aiohttp.ClientSession] = None
        self._ws: Optional[aiohttp.ClientWebSocketResponse] = None
        self._is_running = False
        self._listen_task: Optional[asyncio.Task] = None
        self._websocket_auth_token: Optional[str] = None
        
        # üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        self._inbound_dispatcher = WebSocketInboundDispatcher(
            logger=self.logger,
            pending_requests_manager=self.pending_requests,
            event_handler=self.event_handler,
            system_command_handler=self.system_command_handler
        )

        self.logger.info("WSManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è __init__ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        self.logger.debug("DEBUG: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WSManager –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

    def start(self):
        self.logger.info("WSManager: –í—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ start().")
        self.logger.debug("DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ WSManager.")
        if not self._is_running:
            self._is_running = True
            try:
                self._listen_task = asyncio.create_task(
                    self._main_loop(),
                    name=f"WSManager_{self._bot_name}"
                )
                self.logger.info("WSManager: –ó–∞–¥–∞—á–∞ _main_loop —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞.")
                self.logger.debug(f"DEBUG: –ó–∞–¥–∞—á–∞ _main_loop '{self._listen_task.get_name()}' –∑–∞–ø—É—â–µ–Ω–∞.")
            except Exception as e:
                self.logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}", exc_info=True)
                self._is_running = False
        else:
            self.logger.warning("WSManager: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä.")
            self.logger.debug("DEBUG: WSManager —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—É start().")

    async def _main_loop(self):
        self.logger.info("WSManager: _main_loop() –∑–∞–ø—É—â–µ–Ω.")
        reconnect_delay = 5
        
        while self._is_running:
            try:
                self.logger.debug("DEBUG: –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è _main_loop.")
                
                if self._session is None or self._session.closed:
                    self.logger.debug("DEBUG: –°–µ—Å—Å–∏—è aiohttp –∑–∞–∫—Ä—ã—Ç–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—é –Ω–æ–≤—É—é.")
                    self._session = aiohttp.ClientSession()

                # –í—Å–µ–≥–¥–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                self.logger.debug("DEBUG: –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è WebSocket.")
                self._websocket_auth_token = await request_auth_token(
                    logger_instance=self.logger,
                    session=self._session,
                    auth_token_rest_endpoint=self._auth_token_rest_endpoint,
                    api_key=self._api_key,
                    bot_name=self._bot_name
                )
                if self._websocket_auth_token is None:
                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ REST. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {reconnect_delay}—Å.")
                    await asyncio.sleep(reconnect_delay)
                    self._websocket_auth_token = None # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—à–µ–Ω
                    continue # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
                
                ws_connect_url = (
                    self._ws_url
                    .replace('http://', 'ws://')
                    .replace('https://', 'wss://')
                )
                auth_ws_url = ws_connect_url
                
                self.logger.info(f"WSManager: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫: {auth_ws_url}")
                self.logger.debug(f"DEBUG: URL –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {auth_ws_url}")

                async with self._session.ws_connect(auth_ws_url, timeout=10) as ws:
                    self._ws = ws
                    self.logger.info("WSManager: ‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω")
                    
                    auth_message = {
                        "command": "validate_token_rpc",
                        "token": self._websocket_auth_token,
                        "client_type": "DISCORD_BOT",
                        "bot_name": self._bot_name
                    }
                    await self._ws.send_str(json.dumps(auth_message))
                    self.logger.info("WSManager: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ WebSocket.")
                    self.logger.debug(f"DEBUG: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {auth_message}")

                    self.logger.debug("DEBUG: –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
                    auth_confirm_msg = await asyncio.wait_for(ws.receive(), timeout=5)
                    self.logger.debug(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –¢–∏–ø: {auth_confirm_msg.type}, –î–∞–Ω–Ω—ã–µ: {auth_confirm_msg.data}")
                    
                    if auth_confirm_msg.type == aiohttp.WSMsgType.TEXT:
                        try:
                            confirm_data = json.loads(auth_confirm_msg.data)
                            self.logger.debug(f"DEBUG: –ü–æ–ª—É—á–µ–Ω JSON –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {confirm_data}")
                            ws_response_message = WebSocketMessage.model_validate(confirm_data)
                            self.logger.debug(f"DEBUG: –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ WebSocketMessage –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: –¢–∏–ø={ws_response_message.type}, –°—Ç–∞—Ç—É—Å={ws_response_message.payload.get('status') if ws_response_message.payload else 'Payload Missing'}")

                            rpc_payload = ws_response_message.payload
                            
                            if not rpc_payload:
                                await handle_auth_invalid_data(self.logger, confirm_data) 
                                self.logger.error("WSManager: Payload –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞.")
                                self._websocket_auth_token = None # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
                                continue # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞

                            response_status = rpc_payload.get("status")
                            if isinstance(response_status, str):
                                response_status_lower = response_status.lower()
                            else:
                                response_status_lower = None

                            self.logger.debug(f"DEBUG: –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ RPC payload: '{response_status_lower}' (original: {response_status})")

                            if ws_response_message.type == "AUTH_CONFIRM" and response_status_lower == "success":
                                client_id_from_server = rpc_payload.get("data", {}).get("client_id")
                                client_type_from_server = rpc_payload.get("data", {}).get("client_type")
                                
                                if client_id_from_server and client_type_from_server:
                                    await handle_auth_success(self.logger, client_id_from_server, client_type_from_server)
                                else:
                                    await handle_auth_invalid_data(self.logger, confirm_data)
                                    self.logger.error("WSManager: –î–∞–Ω–Ω—ã–µ client_id –∏–ª–∏ client_type –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞.")
                                    self._websocket_auth_token = None # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
                                    continue # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                            else:
                                await handle_auth_error_response(self.logger, rpc_payload)
                                self.logger.error("WSManager: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞.")
                                self._websocket_auth_token = None # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
                                continue # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞

                        except json.JSONDecodeError as e: 
                            await handle_json_decode_error(self.logger, auth_confirm_msg.data)
                            self.logger.error(f"WSManager: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞.")
                            self._websocket_auth_token = None # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
                            continue # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                        except Exception as e:
                            self.logger.error(f"WSManager: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}", exc_info=True)
                            self.logger.error("WSManager: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞.")
                            self._websocket_auth_token = None # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
                            continue # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                    else:
                        await handle_non_text_message(self.logger, auth_confirm_msg.type)
                        self.logger.error(f"WSManager: –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Ç–∏–ø: {auth_confirm_msg.type}). –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞.")
                        self._websocket_auth_token = None # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
                        continue # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
                    
                    self.logger.info("WSManager: –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π.")
                    self.logger.debug("DEBUG: –í—Ö–æ–¥ –≤ —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π.")
                    
                    async for msg in ws:
                        self.logger.debug(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢–∏–ø: {msg.type}.")
                        if msg.type == aiohttp.WSMsgType.TEXT:
                            await self._inbound_dispatcher.dispatch_message(msg.data)
                        elif msg.type in (aiohttp.WSMsgType.ERROR, aiohttp.WSMsgType.CLOSED, aiohttp.WSMsgType.CLOSE):
                            self.logger.warning(f"WSManager: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ (—Ç–∏–ø: {msg.type}). –†–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
                            break # –í—ã—Ö–æ–¥ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                        elif msg.type == aiohttp.WSMsgType.PING:
                            self.logger.debug("WSManager: –ü–æ–ª—É—á–µ–Ω PING, –æ—Ç–ø—Ä–∞–≤–ª—è—é PONG.")
                            await ws.pong()
                        elif msg.type == aiohttp.WSMsgType.PONG:
                            self.logger.debug("DEBUG: –ü–æ–ª—É—á–µ–Ω PONG.")
                        else:
                            self.logger.warning(f"WSManager: –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {msg.type}")
            
            except asyncio.CancelledError:
                self.logger.info("WSManager: –ó–∞–¥–∞—á–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                self.logger.debug("DEBUG: –ó–∞–¥–∞—á–∞ _main_loop –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                self._websocket_auth_token = None # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
                break # –í—ã—Ö–æ–¥ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            except aiohttp.client_exceptions.ClientConnectorError as e:
                await handle_client_connector_error(self.logger, e, auth_ws_url)
                self.logger.error(f"WSManager: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: {e}. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞.")
                self._websocket_auth_token = None # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            except asyncio.TimeoutError as e:
                await handle_timeout_error(self.logger, e)
                self.logger.error(f"WSManager: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–ª–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞.")
                self._websocket_auth_token = None # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
            except Exception as e:
                self.logger.critical(f"WSManager: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _main_loop (–Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Ç–æ–∫–µ–Ω–∞): {e}", exc_info=True)
                self.logger.error("WSManager: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞.")
                self._websocket_auth_token = None # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –ª—é–±–æ–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
            finally:
                self.logger.debug("DEBUG: –ë–ª–æ–∫ finally _main_loop. –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤.")
                if self._ws:
                    self.logger.debug("DEBUG: –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket.")
                    await self._ws.close()
                    self._ws = None
                if self._session and not self._session.closed:
                    self.logger.debug("DEBUG: –ó–∞–∫—Ä—ã—Ç–∏–µ aiohttp.ClientSession.")
                    await self._session.close()
                    self._session = None
                
                # –í—Å–µ–≥–¥–∞ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ,
                # –µ—Å–ª–∏ _is_running (—Ç.–µ. –±–æ—Ç –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω —è–≤–Ω–æ).
                if self._is_running:
                    self.logger.info("WSManager: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ. –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.")
                    self._websocket_auth_token = None # –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ/–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                    self.logger.info(f"WSManager: –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {reconnect_delay} —Å–µ–∫...")
                    self.logger.debug(f"DEBUG: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é —á–µ—Ä–µ–∑ {reconnect_delay} —Å–µ–∫—É–Ω–¥.")
                    await asyncio.sleep(reconnect_delay)
                else:
                    self.logger.info("WSManager: –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω. –ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    async def send_command(self, command_type: str, command_payload: Dict, domain: str, discord_context: Dict) -> Tuple[Dict, Dict]:
        self.logger.debug(f"–í—ã–∑–≤–∞–Ω send_command —Å command_type='{command_type}', domain='{domain}'.")
        if not self._ws or self._ws.closed:
            self.logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            raise ConnectionError("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

        command_id = str(uuid.uuid4())
        self.logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω command_id: {command_id}")

        # 1. –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è Redis
        request_context = discord_context.copy()
        request_context.update({
            "correlation_id": command_id,
            "command": command_type,
            "domain": domain
        })
        self.logger.debug(f"–°–æ–∑–¥–∞–Ω request_context –¥–ª—è Redis: {request_context}")
        
        # 2. "–û–±–µ—Ä—Ç–∫–∞" –∫–æ–º–∞–Ω–¥—ã
        command_wrapper_payload = WebSocketCommandFromClientPayload(
            command_id=command_id,
            type=command_type,
            domain=domain,
            payload=command_payload
        )
        self.logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ '–æ–±–µ—Ä—Ç–∫–∞' –∫–æ–º–∞–Ω–¥—ã (WebSocketCommandFromClientPayload): {command_wrapper_payload.model_dump()}")
        
        # 3. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = WebSocketMessage(
            type="COMMAND",
            correlation_id=command_id,
            payload=command_wrapper_payload
        )
        self.logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (WebSocketMessage) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {message.model_dump(mode='json')}")
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        future = await self.pending_requests.create_request(command_id, request_context)
        self.logger.debug(f"–°–æ–∑–¥–∞–Ω Future –≤ PendingRequestsManager –¥–ª—è command_id: {command_id}")
        
        try:
            # 5. –û—Ç–ø—Ä–∞–≤–∫–∞
            await self._ws.send_str(message.model_dump_json())
            self.logger.info(f"–ö–æ–º–∞–Ω–¥–∞ '{command_type}' (ID: {command_id}) —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –¥–æ–º–µ–Ω '{domain}'.")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã '{command_type}' (ID: {command_id}): {e}", exc_info=True)
            self.pending_requests.remove_request(command_id) 
            raise

        # 6. –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        self.logger.debug(f"–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command_type}' (ID: {command_id})...")
        response, retrieved_context = await future
        self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É '{command_type}' (ID: {command_id}).")
        return response, retrieved_context

    async def disconnect(self):
        self.logger.info("WSManager: –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.")
        self.logger.debug("DEBUG: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ _is_running –≤ False.")
        self._is_running = False
        if self._listen_task:
            self.logger.debug("DEBUG: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è.")
            self._listen_task.cancel()
            try:
                await self._listen_task
            except asyncio.CancelledError:
                self.logger.debug("DEBUG: –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ (–æ–∂–∏–¥–∞–µ–º–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ).")
                pass 
            except Exception as e:
                self.logger.error(f"DEBUG: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}", exc_info=True)
            self._listen_task = None
            self.logger.info("WSManager: –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        
        if self._ws:
            self.logger.debug("DEBUG: –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
            await self._ws.close()
            self._ws = None
            self.logger.info("WSManager: WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")
        if self._session and not self._session.closed:
            self.logger.debug("DEBUG: –ó–∞–∫—Ä—ã—Ç–∏–µ aiohttp.ClientSession.")
            await self._session.close()
            self._session = None
            self.logger.info("WSManager: aiohttp.ClientSession –∑–∞–∫—Ä—ã—Ç–∞.")
        self.logger.debug("DEBUG: –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω.")