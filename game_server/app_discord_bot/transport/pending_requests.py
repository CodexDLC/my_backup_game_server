# game_server/app_discord_bot/transport/pending_requests.py

import asyncio
import uuid
import logging
from typing import Dict, Optional, Any, Tuple, Union
import inject

from game_server.app_discord_bot.storage.cache.interfaces.pending_request_manager_interface import IPendingRequestManager

class PendingRequestsManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...
    """
    @inject.autoparams()
    def __init__(
        self,
        redis_pending_request_manager: IPendingRequestManager,
        logger: logging.Logger
    ):
        self._pending: Dict[uuid.UUID, asyncio.Future] = {}
        self._timeout_handles: Dict[uuid.UUID, asyncio.Handle] = {}
        self.redis_pending_request_manager = redis_pending_request_manager
        self.logger = logger
        self._timeout = 60.0
        self.logger.info(f"‚ú® PendingRequestsManager (transport) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –¢–∞–π–º–∞—É—Ç: {self._timeout}—Å.")

    async def create_request(self, request_id: Union[str, uuid.UUID], context_data: Dict[str, Any]) -> asyncio.Future:
        """
        –°–æ–∑–¥–∞–µ—Ç Future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ Redis –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∞–π–º–∞—É—Ç.
        """
        if isinstance(request_id, str):
            try:
                request_id = uuid.UUID(request_id)
            except ValueError:
                self.logger.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π request_id –≤ create_request: {request_id}")
                raise

        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ DEBUG
        self.logger.debug(f"PendingRequestsManager: create_request –¥–ª—è ID: {request_id}")
        if request_id in self._pending:
            self.logger.warning(f"–ó–∞–ø—Ä–æ—Å —Å ID {request_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–º—è—Ç–∏. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å.")
        
        future = asyncio.get_running_loop().create_future()
        self._pending[request_id] = future
        
        await self.redis_pending_request_manager.store_request(str(request_id), context_data)
        
        handle = asyncio.get_running_loop().call_later(
            self._timeout, self._timeout_request, request_id
        )
        self._timeout_handles[request_id] = handle
        
        self.logger.debug(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è ID: {request_id}.")

        return future

    async def resolve_request(self, request_id: uuid.UUID, response_payload: Any) -> Tuple[bool, Optional[Dict[str, Any]]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π Future, –∑–∞–≤–µ—Ä—à–∞–µ—Ç –µ–≥–æ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ Redis.
        """
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ DEBUG
        self.logger.debug(f"PendingRequestsManager: resolve_request –¥–ª—è ID: {request_id}")
        
        if isinstance(request_id, str):
            try:
                request_id = uuid.UUID(request_id)
            except ValueError:
                self.logger.error(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π request_id: {request_id}")
                return False, None

        future = self._pending.pop(request_id, None)
        handle = self._timeout_handles.pop(request_id, None) 
        if handle:
            handle.cancel()

        context_data = None
        if future and not future.done():
            self.logger.debug(f"Future –¥–ª—è ID {request_id} –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Redis.")
            context_data = await self.redis_pending_request_manager.retrieve_and_delete_request(str(request_id))
            future.set_result((response_payload, context_data))
            self.logger.debug(f"–ó–∞–ø—Ä–æ—Å —Å ID {request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            return True, context_data
        elif future:
            self.logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π Future –¥–ª—è ID: {request_id}.")
        else:
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ –ª—É—á—à–µ –¥–µ–ª–∞—Ç—å —É—Ä–æ–≤–Ω—è INFO, —á—Ç–æ–±—ã –µ–≥–æ –±—ã–ª–æ –≤–∏–¥–Ω–æ
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–ª–∏ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å ID: {request_id}.")
            await self.redis_pending_request_manager.delete_request(str(request_id))
        
        return False, None

    def _timeout_request(self, request_id: uuid.UUID):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞."""
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –¢–∞–π–º–∞—É—Ç - —ç—Ç–æ –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –ª—É—á—à–µ –ø–æ–¥–Ω—è—Ç—å –¥–æ WARNING
        self.logger.warning(f"PendingRequestsManager: —Å—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–π–º–∞—É—Ç –¥–ª—è ID: {request_id}.")
        
        future = self._pending.pop(request_id, None)
        self._timeout_handles.pop(request_id, None)

        if future and not future.done():
            error = asyncio.TimeoutError(f"–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å {request_id} –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ {self._timeout}—Å.")
            future.set_exception(error)
            # –û—Å—Ç–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ ERROR, —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            self.logger.error(f"–¢–∞–π–º-–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å ID: {request_id}. Future –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.")
            asyncio.create_task(self.redis_pending_request_manager.delete_request(str(request_id)))

    def clear_all_pending(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã."""
        self.logger.info("–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        for future in self._pending.values():
            if not future.done():
                future.cancel("Manager is shutting down.")
        self._pending.clear()
        
        for handle in self._timeout_handles.values():
            handle.cancel()
        self._timeout_handles.clear()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        self.logger.info("PendingRequestsManager: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.clear_all_pending()
        self.logger.info("PendingRequestsManager: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")