# game_server/app_discord_bot/transport/pending_requests.py

import asyncio
import uuid
import json
from typing import Dict, Optional, Any, Tuple
from game_server.config.logging.logging_setup import app_logger as logger

from game_server.app_discord_bot.storage.cache.managers.pending_request_manager import PendingRequestManager as RedisPendingRequestManager


class PendingRequestsManager:
    def __init__(self, redis_pending_request_manager: RedisPendingRequestManager, timeout: float = 60.0):
        self._pending: Dict[uuid.UUID, asyncio.Future] = {}
        self._timeout_handles: Dict[uuid.UUID, asyncio.Handle] = {} 
        self._redis_pending_request_manager = redis_pending_request_manager
        self._timeout = timeout
        # –≠—Ç–æ—Ç –ª–æ–≥ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è INFO, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        logger.info(f"PendingRequestsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—É–ø—Ä–∞–≤–ª—è–µ—Ç Futures –∏ Redis). –¢–∞–π–º–∞—É—Ç: {timeout}—Å.")

    async def create_request(self, request_id: uuid.UUID, context_data: Dict[str, Any]) -> asyncio.Future:
        # –≠—Ç–æ—Ç –ª–æ–≥ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è INFO, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—Ö–æ–¥ –≤ –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
        logger.info(f"PendingRequestsManager: create_request –í–•–û–î –¥–ª—è ID: {request_id}")
        if request_id in self._pending:
            logger.warning(f"PendingRequestsManager: –ó–∞–ø—Ä–æ—Å —Å ID {request_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø–∞–º—è—Ç–∏ (_pending). –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å.")
        
        future = asyncio.get_running_loop().create_future()
        
        logger.debug(f"PendingRequestsManager: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Future –¥–ª—è ID {request_id} –≤ _pending. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(self._pending)}. –¢–∏–ø –∫–ª—é—á–∞: {type(request_id)}") # NEW LOG
        self._pending[request_id] = future

        logger.debug(f"PendingRequestsManager: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ Redis –¥–ª—è ID: {request_id}")
        await self._redis_pending_request_manager.store_request(str(request_id), context_data)
        logger.debug(f"PendingRequestsManager: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis –¥–ª—è ID: {request_id}.")
        
        handle = asyncio.get_running_loop().call_later(
            self._timeout, self._timeout_request, request_id
        )
        self._timeout_handles[request_id] = handle
        
        logger.debug(f"PendingRequestsManager: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è ID: {request_id}. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä _timeout_handles: {len(self._timeout_handles)}")
        # –≠—Ç–æ—Ç –ª–æ–≥ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è INFO, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—ã—Ö–æ–¥ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        logger.info(f"PendingRequestsManager: create_request –í–´–•–û–î –¥–ª—è ID: {request_id}. Future —Å–æ–∑–¥–∞–Ω –∏ —Ç–∞–π–º–∞—É—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω.")
        return future

    async def resolve_request(self, request_id: uuid.UUID, response_payload: Any) -> Tuple[bool, Optional[Dict[str, Any]]]:
        # –≠—Ç–æ—Ç –ª–æ–≥ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è INFO, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—Ö–æ–¥ –≤ –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥
        logger.info(f"PendingRequestsManager: resolve_request –í–•–û–î –¥–ª—è ID: {request_id}. –¢–∏–ø –≤—Ö–æ–¥—è—â–µ–≥–æ ID: {type(request_id)}") # NEW LOG
        
        if isinstance(request_id, str):
            try:
                request_id = uuid.UUID(request_id)
                logger.debug(f"PendingRequestsManager: –í—Ö–æ–¥—è—â–∏–π request_id –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ UUID: {request_id}") # NEW LOG
            except ValueError:
                logger.error(f"PendingRequestsManager: –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç—Ä–æ–∫–æ–≤—ã–π request_id: {request_id}. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ UUID.")
                return False, None

        logger.debug(f"PendingRequestsManager: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å Future –¥–ª—è ID {request_id} –∏–∑ _pending. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(self._pending)}. –¢–∏–ø –∫–ª—é—á–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {type(request_id)}") # NEW LOG
        future = self._pending.pop(request_id, None)
        logger.debug(f"PendingRequestsManager: Future –∏–∑–≤–ª–µ—á–µ–Ω: {future is not None}. –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä _pending: {len(self._pending)}")

        logger.debug(f"PendingRequestsManager: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å handle –¥–ª—è ID {request_id} –∏–∑ _timeout_handles. –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(self._timeout_handles)}. –¢–∏–ø –∫–ª—é—á–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {type(request_id)}") # NEW LOG
        handle = self._timeout_handles.pop(request_id, None) 
        if handle:
            handle.cancel()
            logger.debug(f"PendingRequestsManager: –¢–∞–π–º–∞—É—Ç handle –¥–ª—è ID {request_id} –æ—Ç–º–µ–Ω–µ–Ω. –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä _timeout_handles: {len(self._timeout_handles)}")
        else:
            logger.warning(f"PendingRequestsManager: –¢–∞–π–º–∞—É—Ç handle –¥–ª—è ID {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω.")


        context_data = None
        
        if future and not future.done():
            logger.debug(f"PendingRequestsManager: Future –¥–ª—è ID {request_id} –Ω–∞–π–¥–µ–Ω –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ Redis.")
            context_data = await self._redis_pending_request_manager.retrieve_and_delete_request(str(request_id))
            
            future.set_result((response_payload, context_data))
            # üî• –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ª–æ–≥ –±—É–¥–µ—Ç —É—Ä–æ–≤–Ω—è DEBUG
            logger.debug(f"PendingRequestsManager: –ó–∞–ø—Ä–æ—Å —Å ID {request_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_data}")
            return True, context_data
        elif future:
            logger.warning(f"PendingRequestsManager: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π Future –¥–ª—è ID: {request_id}. Future.done(): {future.done()}")
        else:
            logger.warning(f"PendingRequestsManager: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–ª–∏ –∏—Å—Ç–µ–∫—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å ID: {request_id}. Future –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await self._redis_pending_request_manager.delete_request(str(request_id))
        # –≠—Ç–æ—Ç –ª–æ–≥ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è INFO, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—ã—Ö–æ–¥ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
        logger.info(f"PendingRequestsManager: resolve_request –í–´–•–û–î –¥–ª—è ID: {request_id}.")
        return False, None

    def _timeout_request(self, request_id: uuid.UUID):
        # –≠—Ç–æ—Ç –ª–æ–≥ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è INFO, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—Ö–æ–¥ –≤ –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥/–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        logger.info(f"PendingRequestsManager: _timeout_request –í–•–û–î –¥–ª—è ID: {request_id}.")
        
        handle = self._timeout_handles.pop(request_id, None) 
        if handle:
            handle.cancel()
            logger.debug(f"PendingRequestsManager: –¢–∞–π–º–∞—É—Ç handle –¥–ª—è ID {request_id} –æ—Ç–º–µ–Ω–µ–Ω (–∏–∑ _timeout_request).")

        logger.debug(f"PendingRequestsManager: –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å Future –¥–ª—è ID {request_id} –∏–∑ _pending (–≤ _timeout_request). –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: {len(self._pending)}")
        future = self._pending.pop(request_id, None)
        logger.debug(f"PendingRequestsManager: Future –∏–∑–≤–ª–µ—á–µ–Ω (–≤ _timeout_request): {future is not None}. –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä _pending: {len(self._pending)}")

        if future and not future.done():
            error = asyncio.TimeoutError(f"–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å {request_id} –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ {self._timeout}—Å.")
            future.set_exception(error)
            logger.error(f"PendingRequestsManager: –¢–∞–π–º-–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å ID: {request_id}. Future –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.")
            asyncio.create_task(self._redis_pending_request_manager.delete_request(str(request_id)))
        elif future:
            logger.warning(f"PendingRequestsManager: –¢–∞–π–º-–∞—É—Ç —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ Future: {request_id}. Future.done(): {future.done()}")
        else:
            logger.info(f"PendingRequestsManager: –¢–∞–π–º-–∞—É—Ç —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ Future: {request_id}.")
        # –≠—Ç–æ—Ç –ª–æ–≥ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è INFO, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—ã—Ö–æ–¥ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞/–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        logger.info(f"PendingRequestsManager: _timeout_request –í–´–•–û–î –¥–ª—è ID: {request_id}.")

    def clear_all_pending(self):
        # –≠—Ç–æ—Ç –ª–æ–≥ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è INFO, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
        logger.info("PendingRequestsManager: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∏—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤.")
        for request_id, future in list(self._pending.items()):
            if not future.done():
                future.cancel("Manager is shutting down.")
            self._pending.pop(request_id, None)
        for handle in list(self._timeout_handles.values()):
            handle.cancel()
        self._timeout_handles.clear()
        # –≠—Ç–æ—Ç –ª–æ–≥ –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è INFO, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        logger.info("PendingRequestsManager: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    async def startup(self):
        # –≠—Ç–∏ –ª–æ–≥–∏ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è INFO
        logger.info("PendingRequestsManager: –ó–∞–ø—É—Å–∫...")
        logger.info("PendingRequestsManager: –ó–∞–ø—É—â–µ–Ω.")

    async def shutdown(self):
        # –≠—Ç–∏ –ª–æ–≥–∏ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è INFO
        logger.info("PendingRequestsManager: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.clear_all_pending()
        logger.info("PendingRequestsManager: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
