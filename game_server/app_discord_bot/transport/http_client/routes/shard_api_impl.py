# transport/http_client/routes/shard_api_impl.py

import aiohttp
from typing import Optional, Dict, Any, Tuple
from pydantic import BaseModel # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º BaseModel –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SaveShardCommandDTO –≤–º–µ—Å—Ç–æ RegisterGameShardRequest
from game_server.common_contracts.dtos.shard_dtos import SaveShardCommandDTO # –ò–õ–ò game_server.common_contracts.api_models.system_api.RegisterGameShardRequest, –µ—Å–ª–∏ SaveShardCommandDTO –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞

from game_server.config.logging.logging_setup import app_logger as logger
from game_server.app_discord_bot.transport.http_client.interfaces.i_shard_api import IShardAPIRoutes


class ShardAPIRoutesImpl(IShardAPIRoutes):
    def __init__(self, session: aiohttp.ClientSession, base_url: str):
        self._session = session
        self._base_url = f"{base_url}/shards"

    async def _send_request(self, method: str, path: str, data: BaseModel, headers: Optional[Dict[str, str]] = None) -> Tuple[Optional[int], Optional[Dict[str, Any]]]:
        payload_data = data.model_dump(mode='json', by_alias=True)

        try:
            async with self._session.request(
                method, f"{self._base_url}{path}", json=payload_data, headers=headers
            ) as response:
                response_json = None
                try:
                    response_json = await response.json()
                except aiohttp.ContentTypeError:
                    if not (200 <= response.status < 300):
                         logger.error(f"HTTP –∑–∞–ø—Ä–æ—Å {method} {path} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π: {response.status}, –Ω–µ-JSON –æ—Ç–≤–µ—Ç: {await response.text()}")
                         return response.status, {"detail": await response.text()}
                    pass 

                return response.status, response_json if response_json is not None else {}
                
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ aiohttp –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {method} {path}: {e}", exc_info=True)
            return None, None
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ {method} {path}: {e}", exc_info=True)
            return None, None


    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ register —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç SaveShardCommandDTO
    async def register(self, data: SaveShardCommandDTO, headers: Optional[Dict[str, str]] = None) -> Tuple[Optional[int], Optional[Dict[str, Any]]]:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–≥—Ä–æ–≤–æ–π —à–∞—Ä–¥ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (HTTP_—Å—Ç–∞—Ç—É—Å, —Ç–µ–ª–æ_–æ—Ç–≤–µ—Ç–∞_FastAPI)
        """
        return await self._send_request("POST", "/register", data, headers=headers)
