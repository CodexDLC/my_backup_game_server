import os
from dotenv import load_dotenv
from contextlib import asynccontextmanager
from fastapi import FastAPI
from game_server.api_rest.routers_config import ROUTERS_CONFIG
from game_server.services.logging.logging_setup import logger  # –ò–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–µ—Ä–∞


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π health —Ä–æ—É—Ç
from game_server.api_rest.routers.health import router as health_router


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ `.env`
root_env = os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..', '..', '.env')
)

load_dotenv(root_env)

required_env_vars = [
    "REDIS_URL", 
    "APP_VERSION" # –î–æ–±–∞–≤–∏–ª APP_VERSION, —Ç–∞–∫ –∫–∞–∫ –≤—ã –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤ —Ä–æ—É—Ç–µ
]

missing_vars = [var for var in required_env_vars if not os.getenv(var)]
if missing_vars:
    error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}"
    logger.critical(error_msg)
    raise EnvironmentError(error_msg)

# –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è Swagger UI
tags_metadata = [
    {"name": "Discord", "description": "API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Discord-—Ñ—É–Ω–∫—Ü–∏—è–º–∏"},
    {"name": "System", "description": "API –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–∏—Ä–∞"},
    {"name": "Random", "description": "API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª"},
    {"name": "Character", "description": "API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"},
    {"name": "utils_route", "description": "API —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º"},
    {"name": "Health Check", "description": "API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"} # üî• –î–æ–±–∞–≤–∏–ª —Ç–µ–≥ –¥–ª—è health check
]

@asynccontextmanager
async def lifespan(app: FastAPI):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º FastAPI.
    –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –∫—ç—à–∏, –∏ —Ç.–¥.
    """
    logger.info("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω! –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ Lifespan...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Redis, –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥—Ä—É–≥–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å RedisManager, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
    # app.state.rp_manager = await initialize_redis_manager() # –ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    logger.info("üëã –°–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É! –í—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Lifespan...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # if hasattr(app.state, 'rp_manager') and app.state.rp_manager:
    #     await app.state.rp_manager.close() # –ü—Ä–∏–º–µ—Ä –∑–∞–∫—Ä—ã—Ç–∏—è Redis
    logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Lifespan –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.")


app = FastAPI(
    title="Game Server API",
    description="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API",
    openapi_tags=tags_metadata,
    lifespan=lifespan
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ Prometheus
#instrumentator = Instrumentator()
#instrumentator.instrument(app).expose(app)

@app.get("/", summary="–ö–æ—Ä–Ω–µ–≤–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞ API")
async def root():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {
        "message": "Game Server API —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "status": "OK",
        "version": os.getenv("APP_VERSION", "dev")
    }



# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
logger.info("‚åõ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏–∑ ROUTERS_CONFIG...")
for router_cfg in ROUTERS_CONFIG:
    try:
        app.include_router(
            router_cfg["router"],
            prefix=router_cfg["prefix"],
            tags=router_cfg["tags"]
        )
        logger.success(
            f"‚úÖ –†–æ—É—Ç {router_cfg['prefix']} –ø–æ–¥–∫–ª—é—á–µ–Ω | "
            f"–¢–µ–≥–∏: {router_cfg['tags']} | "
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {router_cfg.get('description', '')}"
        )
    except Exception as e:
        logger.critical(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–∞ {router_cfg['prefix']}: {str(e)}",
            exc_info=True
        )
        raise

logger.info(f"üéØ –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ {len(ROUTERS_CONFIG) + 1} —Ä–æ—É—Ç–µ—Ä–æ–≤ (–≤–∫–ª—é—á–∞—è health check)") # +1 –¥–ª—è health_check