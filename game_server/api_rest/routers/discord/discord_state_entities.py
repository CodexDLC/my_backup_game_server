# app/api/v1/endpoints/discord_entities.py

from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Dict, Any

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤–µ—Ä–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from game_server.Logic.InfrastructureLogic.DataAccessLogic.db_instance import get_db_session



# –õ–æ–≥–≥–µ—Ä, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –≤ —Ä–æ—É—Ç–∞—Ö
from game_server.services.logging.logging_setup import logger
from game_server.Logic.InterfacesLogic.Discord.Discord_State_Entities_logic import StateEntitiesDiscordLogic
from game_server.database.models.pandemic_models import StateEntitiesDiscordBase, StateEntitiesDiscordCreateUpdateRequest, StateEntitiesDiscordResponse

router = APIRouter()

# --- GET /discord/entities/{guild_id} ---
@router.get(
    "/entities/{guild_id}",
    summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥–∏–ª—å–¥–∏–∏",
    response_model=List[StateEntitiesDiscordResponse] # –£–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –º–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞
)
async def get_all_entities_for_guild_route(
    guild_id: int,
    db_session: AsyncSession = Depends(get_db_session) # üîë –ò–Ω—ä–µ–∫—Ü–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
) -> List[StateEntitiesDiscordResponse]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ `state_entities_discord` –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–∏–ª—å–¥–∏–∏.
    """
    # üîë –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–∏–∫–∏, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å–µ—Å—Å–∏—é –ë–î
    logic = StateEntitiesDiscordLogic(db_session)
    result = await logic.get_all_entities_for_guild(guild_id)

    if result["status"] == "found":
        # –ï—Å–ª–∏ get_all_entities_for_guild —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Row objects,
        # FastAPI/Pydantic –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ List[StateEntitiesDiscordResponse]
        return result["data"]
    elif result["status"] == "error":
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ get_all_entities_for_guild_route: {result['message']}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=result["message"]
        )
    else:
        return [] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ "not_found" –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∞—Ç—É—Å

# --- GET /discord/entity_by_pk/{guild_id}/{world_id}/{access_code} ---
@router.get(
    "/entity_by_pk/{guild_id}/{world_id}/{access_code}",
    summary="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É",
    response_model=StateEntitiesDiscordResponse # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É —Å—É—â–Ω–æ—Å—Ç—å
)
async def get_entity_by_primary_key_route(
    guild_id: int,
    world_id: str,
    access_code: int,
    db_session: AsyncSession = Depends(get_db_session)
) -> StateEntitiesDiscordResponse:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å `state_entities_discord` –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É.
    """
    logic = StateEntitiesDiscordLogic(db_session)
    result = await logic.get_entity_by_primary_key(guild_id, world_id, access_code)

    if result["status"] == "found":
        return result["data"]
    elif result["status"] == "not_found":
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=result["message"]
        )
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ get_entity_by_primary_key_route: {result['message']}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=result["message"]
        )

# --- PUT /discord/update_by_pk/{guild_id}/{world_id}/{access_code} ---
@router.put(
    "/update_by_pk/{guild_id}/{world_id}/{access_code}",
    summary="–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É",
    response_model=StateEntitiesDiscordResponse # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å –∏–ª–∏ —Å—Ç–∞—Ç—É—Å
)
async def update_entity_route(
    guild_id: int,
    world_id: str,
    access_code: int,
    entity_data: StateEntitiesDiscordCreateUpdateRequest, # Pydantic –º–æ–¥–µ–ª—å –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    db_session: AsyncSession = Depends(get_db_session)
) -> StateEntitiesDiscordResponse:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å `state_entities_discord` –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É.
    """
    logic = StateEntitiesDiscordLogic(db_session)
    result = await logic.update_entity_by_primary_key(guild_id, world_id, access_code, entity_data.model_dump()) # –ò–õ–ò entity_data.dict() –¥–ª—è Pydantic v1

    if result["status"] == "success":
        return result["data"] # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    elif result["status"] == "not_found":
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=result["message"]
        )
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ update_entity_route: {result['message']}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=result["message"]
        )

# --- DELETE /discord/delete_by_pk/{guild_id}/{world_id}/{access_code} ---
@router.delete(
    "/delete_by_pk/{guild_id}/{world_id}/{access_code}",
    summary="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É",
    status_code=status.HTTP_204_NO_CONTENT # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
)
async def delete_entity_route(
    guild_id: int,
    world_id: str,
    access_code: int,
    db_session: AsyncSession = Depends(get_db_session)
) -> None: # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, —Ç–∞–∫ –∫–∞–∫ 204 No Content
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å `state_entities_discord` –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É.
    """
    logic = StateEntitiesDiscordLogic(db_session)
    result = await logic.delete_entity_by_primary_key(guild_id, world_id, access_code)

    if result["status"] == "success":
        return # FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω–µ—Ç 204 No Content
    elif result["status"] == "not_found":
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=result["message"]
        )
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ delete_entity_route: {result['message']}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=result["message"]
        )

# --- POST /discord/create_roles/ ---
@router.post(
    "/create_roles/",
    summary="–ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π",
    response_model=Dict[str, Any] # –ò–ª–∏ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
)
async def create_roles_discord_route(
    roles_batch: List[StateEntitiesDiscordCreateUpdateRequest], # –û–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ Pydantic –º–æ–¥–µ–ª–µ–π
    db_session: AsyncSession = Depends(get_db_session)
) -> Dict[str, Any]:
    """
    –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Ä–æ–ª–µ–π –≤ –ë–î (UPSERT).
    """
    logic = StateEntitiesDiscordLogic(db_session)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ Pydantic-–º–æ–¥–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ª–æ–≥–∏–∫—É
    processed_roles = [role.model_dump() for role in roles_batch] # –ò–õ–ò role.dict() –¥–ª—è Pydantic v1

    result = await logic.create_roles_discord(processed_roles)

    if result.get("error"): # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á "error"
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–æ—É—Ç–µ create_roles_discord_route: {result['error']}")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST, # –ò–ª–∏ 500 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
            detail=result["error"]
        )
    return result


@router.post(
    "/create_roles/",
    summary="–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–ª—è Discord-—Ä–æ–ª–µ–π (UPSERT)",
    response_model=Dict[str, Any]
)
async def create_roles_route(
    roles_batch: List[StateEntitiesDiscordCreateUpdateRequest], # <-- –≠–¢–û –í–ê–ñ–ù–û!
    db_session: Any = Depends(get_db_session)
) -> Dict[str, Any]:
    """
    –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π `state_entities_discord` (UPSERT).
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ Discord-—Ä–æ–ª—è—Ö.
    """
    logic = StateEntitiesDiscordLogic(db_session)

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –ë–ï–ó guild_id, –∫–∞–∫ –≤—ã –∏ —Ö–æ—Ç–∏—Ç–µ
    formatted_batch = [item.model_dump() for item in roles_batch]

    # –¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è logic.create_roles_discord –¥–æ–ª–∂–Ω–∞ –±—É–¥–µ—Ç
    # —Å–∞–º–∞ –ø–æ–Ω—è—Ç—å, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å guild_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞)
    # –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î.
    result = await logic.create_roles_discord(formatted_batch)

    if result.get("status") == "success":
        return result
    elif "error" in result:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=result["error"]
        )
    else:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π."
        )

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
state_entities_discord_router = router