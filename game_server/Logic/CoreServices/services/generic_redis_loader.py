# game_server/Logic/CoreServices/services/generic_redis_loader.py

from pathlib import Path
from typing import Dict, Any, List, TypeVar, Type, Optional, Union
from pydantic import BaseModel, ValidationError

from game_server.Logic.CoreServices.utils.yaml_readers import YamlReader
from game_server.config.logging.logging_setup import app_logger as logger

PydanticDTO = TypeVar('PydanticDTO', bound=BaseModel)

class GenericRedisLoader:
    def __init__(self):
        logger.info("‚úÖ GenericRedisLoader (CoreService) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def load_from_directory(
        self,
        directory_path: str,
        dto_type: Type[PydanticDTO]
    ) -> List[PydanticDTO]:
        base_path = Path(directory_path)
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ GenericRedisLoader –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{base_path}'...")
        
        all_dtos: List[PydanticDTO] = []
        if not base_path.is_dir():
            logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {base_path}")
            return all_dtos

        yaml_files = sorted(list(base_path.glob('*.yml')))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(yaml_files)} YAML-—Ñ–∞–π–ª–æ–≤ –¥–ª—è '{dto_type.__name__}'.")

        for file_path in yaml_files:
            try:
                full_yaml_content: Optional[Dict[str, Any]] = await YamlReader.read_and_parse_yaml(file_path)
                
                if full_yaml_content is None:
                    continue 

                # –í–°–ï–ì–î–ê –û–ñ–ò–î–ê–ï–ú, –ß–¢–û –î–ê–ù–ù–´–ï –ù–ê–•–û–î–Ø–¢–°–Ø –ü–û–î –ö–õ–Æ–ß–û–ú 'data'
                if 'data' not in full_yaml_content:
                    logger.error(f"‚ùå –§–∞–π–ª '{file_path.name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–ª—é—á–∞ 'data'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue
                
                raw_items_data = full_yaml_content['data']
                items_to_process_list: List[Dict[str, Any]] = []

                # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ 'data'
                if isinstance(raw_items_data, list):
                    # –ï—Å–ª–∏ 'data' —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π (–∫–∞–∫ GameLocation)
                    logger.debug(f"–§–∞–π–ª '{file_path.name}': 'data' —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫.")
                    items_to_process_list = raw_items_data

                elif isinstance(raw_items_data, dict):
                    # –ï—Å–ª–∏ 'data' —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä—å (–∫–∞–∫ ItemBase)
                    logger.debug(f"–§–∞–π–ª '{file_path.name}': 'data' —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä—å (–∫–ª—é—á: item_data).")
                    if 'item_code' not in dto_type.model_fields:
                        logger.error(f"–û—à–∏–±–∫–∞: DTO '{dto_type.__name__}' –Ω–µ –∏–º–µ–µ—Ç –ø–æ–ª—è 'item_code', –Ω–æ —Ñ–∞–π–ª '{file_path.name}' –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç 'item_code: dict' –ø–æ–¥ –∫–ª—é—á–æ–º 'data'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ DTO –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —ç—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É

                    for item_code_key, item_data_dict in raw_items_data.items():
                        if not isinstance(item_data_dict, dict):
                            logger.warning(f"–≠–ª–µ–º–µ–Ω—Ç '{item_code_key}' –≤ —Ñ–∞–π–ª–µ '{file_path.name}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                            continue
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º item_code –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è DTO
                        processed_item_dict = {"item_code": item_code_key, **item_data_dict}
                        items_to_process_list.append(processed_item_dict)
                else:
                    logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥ –∫–ª—é—á–æ–º 'data' –≤ —Ñ–∞–π–ª–µ '{file_path.name}': –æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–µ–Ω {type(raw_items_data)}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue
                
                # –¢–µ–ø–µ—Ä—å –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                for item_dict in items_to_process_list:
                    try:
                        item_dto = dto_type(**item_dict)
                        all_dtos.append(item_dto)
                    except ValidationError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ '{file_path.name}' ({item_dict.get('item_code', 'N/A')}): {e.errors()}")
                        continue
                    except Exception as e:
                        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ '{file_path.name}' ({item_dict.get('item_code', 'N/A')}): {e}", exc_info=True)
                        continue

            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{file_path}': {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", exc_info=True)
                continue
        
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ {len(all_dtos)} –∑–∞–ø–∏—Å–µ–π —Ç–∏–ø–∞ '{dto_type.__name__}'.")
        return all_dtos