# game_server/Logic/InfrastructureLogic/services/data_version_manager.py

import json
import hashlib
import logging
from typing import List, Dict, Any, Optional
from uuid import UUID

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.dialects.postgresql import insert as pg_insert
from sqlalchemy import select, Column, String, Table, MetaData

from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π ---
metadata_obj = MetaData()

data_versions_table = Table(
    'data_versions',
    metadata_obj,
    Column('table_name', String, primary_key=True, comment="–ò–º—è —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø—ã –¥–∞–Ω–Ω—ã—Ö"),
    Column('data_hash', String, nullable=False, comment="–•—ç—à-—Å—É–º–º–∞ –¥–∞–Ω–Ω—ã—Ö (SHA256)")
)


def _json_serializer_with_uuid(obj):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è JSON, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å UUID.
    """
    if isinstance(obj, UUID):
        return str(obj)
    raise TypeError(f"Object of type {type(obj).__name__} is not JSON serializable")


class DataVersionManager:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    –≤ PostgreSQL –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ö –≤ Redis.
    """


    @staticmethod
    def _calculate_data_hash(data_list: List[Dict[str, Any]]) -> str:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç SHA256 —Ö—ç—à –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –¥–∞–Ω–Ω—ã–µ.
        –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        """
        if not data_list:
            return hashlib.sha256(b"").hexdigest()

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ JSON-—Å—Ç—Ä–æ–∫—É, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–≤ –∫–ª—é—á–∏, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
            # UUID –æ–±—ä–µ–∫—Ç—ã –±—É–¥—É—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é _json_serializer_with_uuid
            serialized_items = []
            for item in data_list:
                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –∫–ª—é—á–µ–π —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JSON
                serialized_item = json.dumps(item, sort_keys=True, default=_json_serializer_with_uuid)
                serialized_items.append(serialized_item)

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ JSON-—Å—Ç—Ä–æ–∫ –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞
            serialized_items.sort()

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JSON-—Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É –±–æ–ª—å—à—É—é —Å—Ç—Ä–æ–∫—É
            combined_string = "".join(serialized_items)

            # üî• –î–û–ë–ê–í–õ–ï–ù–ê –õ–û–ì–ì–ò–†–£–Æ–©–ê–Ø –°–¢–†–û–ö–ê –î–õ–Ø –î–ï–ë–ê–ì–ê
            # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ logger.debug –∏–ª–∏ logger.info, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –ª–æ–≥–∞—Ö
            logger.debug(f"DEBUG_HASH_STRING for {data_list[0].get('material_code', 'N/A') if data_list else 'N/A'} (first 500 chars): {combined_string[:500]}")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –≤–µ—Å—å —Ö–µ—à
            # logger.debug(f"DEBUG_HASH_VALUE for {data_list[0].get('material_code', 'N/A') if data_list else 'N/A'}: {hashlib.sha256(combined_string.encode('utf-8')).hexdigest()}")


            return hashlib.sha256(combined_string.encode('utf-8')).hexdigest()
        except TypeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
            raise
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
            raise

    @staticmethod
    async def get_db_version(session: AsyncSession, table_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ö—ç—à-–≤–µ—Ä—Å–∏—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –ë–î."""
        try:
            stmt = select(data_versions_table.c.data_hash).where(data_versions_table.c.table_name == table_name)
            result = await session.execute(stmt)
            version = result.scalar_one_or_none()
            return version
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –¥–ª—è '{table_name}' –∏–∑ –ë–î: {e}", exc_info=True)
            return None

    @staticmethod
    async def update_db_version(session: AsyncSession, table_name: str, new_hash: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç (UPSERT) —Ö—ç—à-–≤–µ—Ä—Å–∏—é –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î."""
        try:
            stmt = pg_insert(data_versions_table).values(
                table_name=table_name,
                data_hash=new_hash
            )
            stmt = stmt.on_conflict_do_update(
                index_elements=['table_name'],
                set_={'data_hash': new_hash}
            )
            await session.execute(stmt)
            logger.debug(f"–í–µ—Ä—Å–∏—è –¥–ª—è '{table_name}' –≤ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Ö—ç—à: {new_hash[:8]}...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –¥–ª—è '{table_name}' –≤ –ë–î: {e}", exc_info=True)
            raise
        
    @staticmethod
    async def get_redis_version(redis_client: CentralRedisClient, data_key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis –ø–æ –∫–ª—é—á—É-—Å—É—Ñ—Ñ–∏–∫—Å—É :version."""
        # –í–†–ï–ú–ï–ù–ù–´–ô –î–ï–ë–ê–ì-–õ–û–ì:
        logger.debug(f"DEBUG: DataVersionManager.get_redis_version –≤—ã–∑–≤–∞–Ω. redis_client type: {type(redis_client).__name__}, is None: {redis_client is None}")
        if redis_client is None:
            logger.critical("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DataVersionManager –ø–æ–ª—É—á–∏–ª redis_client=None. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            raise ValueError("redis_client –≤ DataVersionManager –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None.") # –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —è–≤–Ω–æ

        version_key = f"{data_key}:version"
        return await redis_client.get(version_key)   

    @staticmethod
    async def update_redis_version(redis_client: CentralRedisClient, data_key: str, version: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ Redis."""
        version_key = f"{data_key}:version"
        await redis_client.set(version_key, version)
        logger.debug(f"–í–µ—Ä—Å–∏—è –¥–ª—è –∫–ª—é—á–∞ '{version_key}' –≤ Redis –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {version[:8]}...")
        
    @staticmethod
    async def get_redis_fingerprint(redis_client: CentralRedisClient, data_keys: List[str]) -> Dict[str, Optional[str]]:
        """–°–æ–±–∏—Ä–∞–µ—Ç '—Å–ª–µ–ø–æ–∫ –≤–µ—Ä—Å–∏–π' –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis."""
        versions = {}
        for key in data_keys:
            versions[key] = await DataVersionManager.get_redis_version(redis_client, key)
        return versions