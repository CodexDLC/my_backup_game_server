# game_server/Logic/CoreServices/services/data_version_manager.py

from datetime import datetime
import json
import hashlib
import logging
from typing import List, Dict, Any, Optional, Callable
from uuid import UUID
import msgpack
import inject

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select as fselect
from sqlalchemy.dialects.postgresql import insert as pg_insert
from sqlalchemy import Column, String, Table, MetaData

from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
# üî• –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ñ–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤–µ—Ä—Å–∏–π –¥–∞–Ω–Ω—ã—Ö
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.system.interfaces_system import IDataVersionRepository


# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
metadata_obj = MetaData()

data_versions_table = Table(
    'data_versions',
    metadata_obj,
    Column('table_name', String, primary_key=True, comment="–ò–º—è —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ –ª–æ–≥–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø—ã –¥–∞–Ω–Ω—ã—Ö"),
    Column('data_hash', String, nullable=False, comment="–•—ç—à-—Å—É–º–º–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (SHA256)")
)

def _custom_json_serializer_for_hash(obj):
    """
    –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö—ç—à–∞.
    –£–º–µ–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å UUID –∏ datetime –æ–±—ä–µ–∫—Ç—ã.
    """
    if isinstance(obj, UUID):
        return str(obj)
    if isinstance(obj, datetime):
        return obj.isoformat()
    raise TypeError(f"Object of type {type(obj).__name__} is not JSON serializable")


class DataVersionManager:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    –≤ PostgreSQL –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ö –≤ Redis.
    """
    @inject.autoparams()
    def __init__(
        self,
        redis_client: CentralRedisClient, # –¢–µ–ø–µ—Ä—å redis_client –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è
        session_factory: Callable[[], AsyncSession], # –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å –ë–î
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –°–¥–µ–ª–∞–µ–º —Ç–∏–ø –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º: Any -> IDataVersionRepository
        data_version_repo_factory: Callable[[AsyncSession], IDataVersionRepository],
        logger: logging.Logger
    ):
        self.redis_client = redis_client
        self._session_factory = session_factory
        self._data_version_repo_factory = data_version_repo_factory
        self.logger = logger
        self.logger.info("‚úÖ DataVersionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Å–µ—Ä–≤–∏—Å.")

    @staticmethod
    def _calculate_data_hash(data_list: List[Dict[str, Any]]) -> str:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç SHA256 —Ö—ç—à –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –¥–∞–Ω–Ω—ã–µ.
        """
        if not data_list:
            return hashlib.sha256(b"").hexdigest()

        try:
            serialized_items = []
            for item in data_list:
                serialized_item = json.dumps(item, sort_keys=True, default=_custom_json_serializer_for_hash)
                serialized_items.append(serialized_item)

            serialized_items.sort()
            combined_string = "".join(serialized_items)

            logging.getLogger(__name__).debug(f"DEBUG_HASH_STRING (first 500 chars): {combined_string[:500]}")

            return hashlib.sha256(combined_string.encode('utf-8')).hexdigest()
        except TypeError as e:
            logging.getLogger(__name__).error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", exc_info=True)
            raise
        except Exception as e:
            logging.getLogger(__name__).critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ö—ç—à–∞ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
            raise

    async def get_db_version(self, table_name: str) -> Optional[str]:
        async with self._session_factory() as session:
            try:
                data_version_repo = self._data_version_repo_factory(session)
                version = await data_version_repo.get_current_data_version(table_name)
                return version
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –¥–ª—è '{table_name}' –∏–∑ –ë–î: {e}", exc_info=True)
                return None

    async def update_db_version(self, table_name: str, new_hash: str):
        async with self._session_factory() as session:
            try:
                data_version_repo = self._data_version_repo_factory(session)
                await data_version_repo.update_version(table_name, new_hash)
                self.logger.debug(f"–í–µ—Ä—Å–∏—è –¥–ª—è '{table_name}' –≤ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ —Ö—ç—à: {new_hash[:8]}...")
                await session.commit()
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏ –¥–ª—è '{table_name}' –≤ –ë–î: {e}", exc_info=True)
                raise
            
    async def get_redis_version(self, data_key: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ö—ç—à-–≤–µ—Ä—Å–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis –ø–æ –∫–ª—é—á—É-—Å—É—Ñ—Ñ–∏–∫—Å—É :version.
        """
        self.logger.debug(f"DEBUG: DataVersionManager.get_redis_version –≤—ã–∑–≤–∞–Ω. redis_client type: {type(self.redis_client).__name__}")
        if self.redis_client is None:
            self.logger.critical("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DataVersionManager –ø–æ–ª—É—á–∏–ª redis_client=None. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            raise ValueError("redis_client –≤ DataVersionManager –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None.")

        version_key = f"{data_key}:version"
        version_data = await self.redis_client.get_msgpack(version_key)
        if version_data is None:
            return None
        if not isinstance(version_data, str):
            self.logger.error(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ Redis —Ö—ç—à –≤–µ—Ä—Å–∏–∏ –¥–ª—è '{data_key}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π. –¢–∏–ø: {type(version_data).__name__}. –ó–Ω–∞—á–µ–Ω–∏–µ: {version_data}")
            return None
        return version_data

    async def update_redis_version(self, data_key: str, version: str):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ Redis.
        """
        version_key = f"{data_key}:version"
        packed_version = msgpack.packb(version, use_bin_type=True)
        set_success = await self.redis_client.set_msgpack(version_key, packed_version)
        if not set_success:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–µ—Ä—Å–∏—é –¥–ª—è –∫–ª—é—á–∞ '{version_key}' –≤ Redis. –†–µ–∑—É–ª—å—Ç–∞—Ç set_success: {set_success}")
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏—é Redis –¥–ª—è '{data_key}'.")
        
        self.logger.debug(f"–í–µ—Ä—Å–∏—è –¥–ª—è –∫–ª—é—á–∞ '{version_key}' –≤ Redis –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {version[:8]}...")
        
    async def get_redis_fingerprint(self, data_keys: List[str]) -> Dict[str, Optional[str]]:
        """–°–æ–±–∏—Ä–∞–µ—Ç '—Å–ª–µ–ø–æ–∫ –≤–µ—Ä—Å–∏–π' –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis."""
        versions = {}
        for key in data_keys:
            versions[key] = await self.get_redis_version(key) # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        return versions
