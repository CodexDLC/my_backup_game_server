# game_server/utils/load_seeds/yaml_readers.py

import yaml
from pathlib import Path
from typing import Dict, Any, List, Optional
from game_server.config.logging.logging_setup import app_logger as logger

class YamlReader:
    @staticmethod
    async def read_and_parse_yaml(file_path: Path) -> Optional[Dict[str, Any]]:
        """
        –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML-—Ñ–∞–π–ª–∞.
        –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É.
        """
        try:
            logger.info(f"üìÇ –ß—Ç–µ–Ω–∏–µ YAML-—Ñ–∞–π–ª–∞: {file_path.name}")
            with open(str(file_path), 'r', encoding='utf-8') as f:
                loaded_data = yaml.safe_load(f)
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ '{file_path.name}'.")
                return loaded_data
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return None
        except yaml.YAMLError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML –≤ —Ñ–∞–π–ª–µ {file_path}: {e}", exc_info=True)
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path}: {e}", exc_info=True)
            return None

    @staticmethod
    async def get_items_from_yaml(file_path: Path, pk_column_name: str) -> List[Dict[str, Any]]:
        """
        –ß–∏—Ç–∞–µ—Ç YAML –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
        ‚ùóÔ∏è –í–ê–ñ–ù–û: –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
        """
        loaded_data = await YamlReader.read_and_parse_yaml(file_path)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        if loaded_data is None:
            raise RuntimeError(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ñ–∞–π–ª '{file_path.name}'.")

        # üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'data' –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'data' not in loaded_data:
            logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ '{file_path.name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ—Ä–Ω–µ–≤–æ–π –∫–ª—é—á 'data'.")
            raise RuntimeError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–¥–∞ –≤ —Ñ–∞–π–ª–µ {file_path.name}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á 'data'.")

        data_content = loaded_data['data']

        # –ï—Å–ª–∏ 'data' –ø—É—Å—Ç (data: ), —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.
        if not data_content:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª '{file_path.name}' —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Å—Ç–æ–π –∫–ª—é—á 'data'.")
            return []

        items_to_process: List[Dict[str, Any]] = []
        if isinstance(data_content, list):
            items_to_process = data_content

        elif isinstance(data_content, dict):
            if not pk_column_name:
                raise RuntimeError(f"–ù–µ —É–∫–∞–∑–∞–Ω pk_column_name –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä—è –≤ '{file_path.name}'.")
            for key, item_dict in data_content.items():
                if not isinstance(item_dict, dict):
                    logger.warning(f"–≠–ª–µ–º–µ–Ω—Ç '{key}' –≤ —Å–ª–æ–≤–∞—Ä–µ '{file_path.name}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue
                item_dict[pk_column_name] = key
                items_to_process.append(item_dict)
        else:
            # üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ç–∏–ø–µ –¥–∞–Ω–Ω—ã—Ö
            logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ '{file_path.name}': –æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å, –ø–æ–ª—É—á–µ–Ω {type(data_content)}.")
            raise RuntimeError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ {file_path.name}.")
        
        return items_to_process