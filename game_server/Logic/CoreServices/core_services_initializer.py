# game_server/Logic/CoreServices/core_services_initializer.py

import logging
from typing import Optional, Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å - RepositoryManager
from game_server.Logic.InfrastructureLogic.app_post.app_post_initializer import get_repository_manager_instance

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
from .services.identifiers_servise import IdentifiersServise
from .services.random_service import RandomService # <-- –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢

logger = logging.getLogger(__name__)

_initialized_core_services: Dict[str, Any] = {}

def initialize_core_services() -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–∑ CoreServices –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ–≤–∞—Ä—å.
    """
    global _initialized_core_services
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Core-—Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    try:
        if _initialized_core_services:
            logger.warning("Core-—Å–µ—Ä–≤–∏—Å—ã —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫.")
            return True
            
        repo_manager = get_repository_manager_instance()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–µ—Ä–≤–∏—Å –∏ —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        _initialized_core_services["identifiers_service"] = IdentifiersServise(repository_manager=repo_manager)
        logger.info("‚úÖ IdentifiersServise –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RandomService
        _initialized_core_services["random_service"] = RandomService()
        logger.info("‚úÖ RandomService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        logger.info("‚úÖ –í—Å–µ Core-—Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        return True
    except Exception as e:
        logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Core-—Å–µ—Ä–≤–∏—Å–æ–≤: {e}", exc_info=True)
        return False

def get_identifiers_service_instance() -> IdentifiersServise:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä IdentifiersServise.
    """
    try:
        return _initialized_core_services["identifiers_service"]
    except KeyError:
        logger.error("üö´ IdentifiersServise –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize_core_services() —Å–Ω–∞—á–∞–ª–∞.")
        raise RuntimeError("IdentifiersServise is not initialized.")
    
def get_random_service_instance() -> RandomService:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RandomService.
    """
    try:
        return _initialized_core_services["random_service"]
    except KeyError:
        logger.error("üö´ RandomService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize_core_services() —Å–Ω–∞—á–∞–ª–∞.")
        raise RuntimeError("RandomService is not initialized.")