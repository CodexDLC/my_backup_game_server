# Logic/ApplicationLogic/tick_infra/collector/tick_collector_processor.py

from game_server.Logic.ApplicationLogic.coordinator_tick.tick_utils.tick_logger import logger
from game_server.Logic.InfrastructureLogic.DataAccessLogic.db_in import AsyncDatabase

# --- –ò–ú–ü–û–†–¢–´ –î–õ–Ø –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---
# get_ready_characters –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ tick_collector_handler.py
# categorize_tasks_in_memory –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ tick_collector_handler.py
from game_server.Logic.ApplicationLogic.coordinator_tick.collector.handler.tick_collector_handler import (
    get_ready_characters, 
    categorize_tasks_in_memory, # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    update_tick_info # update_tick_info –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–¥–µ—Å—å
)

# –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è:
# cleanup_tick_processing_queue, fetch_and_process_tasks, send_to_redis


async def collector_handler(db: AsyncDatabase) -> dict: # –£–¥–∞–ª—è–µ–º tick_id, –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–±–æ—Ä–∞ –∑–∞–¥–∞—á. –ü–æ–ª—É—á–∞–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –ë–î,
    –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –∏—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è TaskProcessor.
    –ë–æ–ª—å—à–µ –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å Redis –Ω–∞–ø—Ä—è–º—É—é.
    """
    logger.info("üîÑ [auto_tick] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–∞")

    try:
        # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        logger.debug("üîç –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
        active_sessions = await get_ready_characters(db)
        if not active_sessions:
            logger.info("‚úÖ –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –∫–∞–∫ –∏ —Ä–∞–Ω–µ–µ
        logger.debug(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(active_sessions)} –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")

        # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ `next_tick_at` –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ë–î
        logger.debug("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∏–∫–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ë–î...")
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ active_sessions —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞—Ä–∏ —Å 'character_id'
        # –ï—Å–ª–∏ active_sessions - —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã SQLAlchemy, —Ç–æ char.character_id
        for session_obj in active_sessions:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ session_obj - —ç—Ç–æ –æ–±—ä–µ–∫—Ç SQLAlchemy —Å –∞—Ç—Ä–∏–±—É—Ç–æ–º character_id
            await update_tick_info(session_obj.character_id, db) 
        
        # 3. –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –≤ –ø–∞–º—è—Ç–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º categorize_tasks_in_memory, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç—ã —Å–µ—Å—Å–∏–π –≤ —Å–ª–æ–≤–∞—Ä–∏
        logger.debug("üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ –ø–∞–º—è—Ç–∏...")
        categorized_raw_tasks = categorize_tasks_in_memory(active_sessions) # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å–µ—Å—Å–∏–π
        
        logger.info(f"üèÅ `collector_handler` —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(categorized_raw_tasks)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–¥–∞—á.")
        return categorized_raw_tasks # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—ã—Ä—ã–µ –∑–∞–¥–∞—á–∏

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ `collector_handler`: {e}", exc_info=True)
        return {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏