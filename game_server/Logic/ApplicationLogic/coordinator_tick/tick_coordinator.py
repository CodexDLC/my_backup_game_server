# coordinator_tick/tick_coordinator.py

import asyncio
import json
import logging
from typing import Dict, List, Any, Optional

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ Coordinator
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from .collector.tick_collector import Collector

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π TaskProcessor
from .coordinator.tick_task_processor import TaskProcessor

from .tick_utils.tick_logger import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RabbitMQ –æ—á–µ—Ä–µ–¥—å –∏ TTL
from game_server.Logic.ApplicationLogic.coordinator_tick.constant_tick import RABBITMQ_QUEUE_TICK_WORKER, BATCH_TASK_TTL_SECONDS
# –ù–û–í–ê–Ø –ö–û–ù–°–¢–ê–ù–¢–ê: –û—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–º–∞–Ω–¥ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É
from game_server.Logic.ApplicationLogic.coordinator_tick.constant_tick import COORDINATOR_COMMAND_QUEUE

# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π TaskDispatcher
from game_server.Logic.InfrastructureLogic.messaging.rabbit_utils import TaskDispatcher
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é Celery-–∑–∞–¥–∞—á—É –¥–ª—è —Ç–∏–∫–æ–≤
from game_server.Logic.InfrastructureLogic.celery.task.tasks_tick_processing import process_tick_batch_task
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π RabbitMQClient
from game_server.Logic.InfrastructureLogic.messaging.rabbitmq_client import rabbitmq_client as central_rabbitmq_client


class Coordinator:
    def __init__(self):
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞.
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
        """
        self.processing_lock = asyncio.Lock()
        self.redis = CentralRedisClient()
        
        self.task_dispatcher = TaskDispatcher()
        self.rabbitmq_client = central_rabbitmq_client
        
        self.collector = Collector()
        self.task_processor = TaskProcessor(redis=self.redis) 
        
        self.active_tasks = []
        self._command_consumer_task: Optional[asyncio.Task] = None

        self.logger = logger
        self.logger.info("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def _listen_for_rabbitmq_commands(self):
        """
        –°–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å RabbitMQ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞.
        """
        try:
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–î–ê–õ–Ø–ï–ú –ü–û–í–¢–û–†–ù–´–ô –í–´–ó–û–í connect() üî•
            # await self.rabbitmq_client.connect() 
            
            channel = self.rabbitmq_client._channel
            if not channel:
                self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª RabbitMQ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥.")
                return

            command_queue = await channel.declare_queue(
                COORDINATOR_COMMAND_QUEUE,
                durable=True
            )
            self.logger.info(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–ª—É—à–∞–µ—Ç RabbitMQ –æ—á–µ—Ä–µ–¥—å –∫–æ–º–∞–Ω–¥: '{COORDINATOR_COMMAND_QUEUE}'")

            async with command_queue.iterator() as queue_iter:
                async for message in queue_iter:
                    async with message.process():
                        try:
                            command_data = json.loads(message.body.decode('utf-8'))
                            command = command_data.get('command')
                            data = command_data.get('data')

                            if command:
                                self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ RabbitMQ –∫–æ–º–∞–Ω–¥–∞: {command} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
                                await self.handle_command(command, data)
                            else:
                                self.logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ RabbitMQ: {command_data}")
                        except json.JSONDecodeError:
                            self.logger.error(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ JSON —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ RabbitMQ: {message.body.decode('utf-8')}")
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ RabbitMQ –∫–æ–º–∞–Ω–¥—ã: {e}", exc_info=True)
        except asyncio.CancelledError:
            self.logger.info("–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ RabbitMQ –∫–æ–º–∞–Ω–¥ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        except Exception as e:
            self.logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ RabbitMQ-—Å–ª—É—à–∞—Ç–µ–ª–µ –∫–æ–º–∞–Ω–¥ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {e}", exc_info=True)


    async def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏ –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
        """
        self.logger.info("‚úÖ Redis-–∫–ª–∏–µ–Ω—Ç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        await self.rabbitmq_client.connect()
        self.logger.info("‚úÖ RabbitMQClient –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω.")

        self._command_consumer_task = asyncio.create_task(self._listen_for_rabbitmq_commands())
        self.active_tasks.append(self._command_consumer_task)

        self.logger.info("‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.")
        await asyncio.gather(*self.active_tasks)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞...")

        for task in self.active_tasks:
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass

        if not self.redis._using_external_redis:
             await self.redis.close()
        self.logger.info("üëã Redis-–∫–ª–∏–µ–Ω—Ç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω.")
        
        await self.rabbitmq_client.close()
        self.logger.info("üëã RabbitMQClient –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω.")

        self.logger.info("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def handle_command(self, command: str, data: dict = None):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∫–æ–º–∞–Ω–¥—ã.
        –ù–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∞ "run_collector".
        """
        if self.processing_lock.locked():
            self.logger.warning(f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –ø–æ–ª—É—á–µ–Ω–∞, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –∏–¥–µ—Ç. –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
            return

        async with self.processing_lock:
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {command} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")

            if command == "run_collector":
                raw_tasks_by_category = await self.collector.run_collector()
                
                if raw_tasks_by_category:
                    self.logger.info("Coordinator: –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞—á–∏ –æ—Ç Collector, –ø–µ—Ä–µ–¥–∞—á–∞ –≤ TaskProcessor –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞...")
                    
                    created_batch_info_list = await self.task_processor.prepare_and_process_batches(raw_tasks_by_category)
                    
                    if created_batch_info_list:
                        self.logger.info(f"Coordinator: TaskProcessor —Å–æ–∑–¥–∞–ª {len(created_batch_info_list)} –±–∞—Ç—á–µ–π. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –±–∞—Ç—á–µ–π –≤ RabbitMQ —á–µ—Ä–µ–∑ TaskDispatcher...")
                        
                        for batch_info in created_batch_info_list:
                            batch_id = batch_info['batch_id']
                            category = batch_info['category']
                            
                            await self.task_dispatcher.dispatch_existing_batch_id(
                                batch_id=batch_id,
                                category=category,
                                celery_queue_name=RABBITMQ_QUEUE_TICK_WORKER,
                                celery_task_callable=process_tick_batch_task,
                                task_type_name="—Ç–∏–∫–æ–≤"
                            )

                    else:
                        self.logger.info("Coordinator: TaskProcessor –Ω–µ —Å–æ–∑–¥–∞–ª –±–∞—Ç—á–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                else:
                    self.logger.info("Coordinator: Collector –Ω–µ –≤–µ—Ä–Ω—É–ª –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            
            elif command == "shutdown":
                self.logger.info("–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                for task in self.active_tasks:
                    task.cancel()
            else:
                self.logger.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}. –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")

            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '{command}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞.")

# --- –¢–û–ß–ö–ê –í–•–û–î–ê –î–õ–Ø –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–û–ì–û –ü–†–û–¶–ï–°–°–ê ---
async def main():
    coordinator = Coordinator()
    try:
        await coordinator.start()
    except ConnectionError:
        logger.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –í—ã—Ö–æ–¥.")
    except asyncio.CancelledError:
        logger.info("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.")
    except Exception as e:
        logger.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {e}", exc_info=True)
    finally:
        await coordinator.stop()
        logger.info("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    asyncio.run(main())