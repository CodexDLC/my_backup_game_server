# coordinator_tick/coordinator/tick_coordinator_listener.py

from game_server.Logic.ApplicationLogic.coordinator_tick.tick_utils.tick_logger import logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
import asyncio
import os
from typing import Callable, Optional # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Callable –∏ Optional


# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
REDIS_CHANNELS = {
    "coordinator": os.getenv("REDIS_COORDINATOR_CHANNEL", "coordinator_channel")
}

class CoordinatorListener:
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: __init__ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç command_handler –∏ redis_client üî•
    def __init__(self, command_handler: Callable, redis_client: CentralRedisClient):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª—è, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞.
        :param command_handler: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
        :param redis_client: –≠–∫–∑–µ–º–ø–ª—è—Ä CentralRedisClient.
        """
        self.redis_client = redis_client # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π Redis-–∫–ª–∏–µ–Ω—Ç
        self.channel_name = REDIS_CHANNELS["coordinator"]
        self.pubsub_channel: Optional[asyncio.channels.PubSub] = None # –£—Ç–æ—á–Ω—è–µ–º —Ç–∏–ø
        self.command_handler = command_handler # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Redis –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞."""
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ redis_client –ø–æ–¥–∫–ª—é—á–µ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–æ —ç—Ç–æ–≥–æ
        # –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ Coordinator –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –µ–≥–æ –≤ —Å–≤–æ–µ–º start() –º–µ—Ç–æ–¥–µ.
        pubsub = self.redis_client.pubsub()
        await pubsub.subscribe(self.channel_name)
        self.pubsub_channel = pubsub
        logger.info(f"–ü–æ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª: {self.channel_name}")

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ run() –∑–∞–º–µ–Ω—è–µ—Ç listen(), –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç callback –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö,
    # —Ç–∞–∫ –∫–∞–∫ callback —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ self.command_handler üî•
    async def run(self):
        """–°–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫."""
        await self.connect() # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ run()
        logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ Redis: {self.channel_name}")
        try:
            while True:
                # get_message —Å ignore_subscribe_messages=True
                message = await self.pubsub_channel.get_message(ignore_subscribe_messages=True)
                if message and message["type"] == "message":
                    msg_data = message["data"]

                    if isinstance(msg_data, bytes):
                        msg_data = msg_data.decode("utf-8")

                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_data}")
                    # üî• –í—ã–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ üî•
                    await self.command_handler(msg_data)

                await asyncio.sleep(1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ –¶–ü–£
        except asyncio.CancelledError:
            logger.info(f"–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {self.channel_name} –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ Redis: {str(e)}", exc_info=True)
        finally:
            await self.shutdown() # –í—ã–∑—ã–≤–∞–µ–º shutdown –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏

    async def shutdown(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—á–∏—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."""
        if self.pubsub_channel:
            await self.pubsub_channel.unsubscribe(self.channel_name)
            logger.info(f"üî¥ –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–Ω–∞–ª–∞ {self.channel_name}")
            self.pubsub_channel = None  # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É
        # –ù–ï –ó–ê–ö–†–´–í–ê–ï–ú redis_client –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è Coordinator'–æ–º