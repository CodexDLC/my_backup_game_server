# coordinator_tick/coordinator/tick_task_processor.py

import uuid
from typing import Dict, List, Any

from game_server.Logic.ApplicationLogic.coordinator_tick.tick_utils.tick_logger import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ –¥–ª—è —Ç–∏–∫–æ–≤
from game_server.Logic.InfrastructureLogic.app_cache.services.tick_cache_manager import tick_cache_manager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
from game_server.Logic.ApplicationLogic.coordinator_tick.constant_tick import BATCH_SIZE


from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient


class TaskProcessor:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—ã—Ä–æ–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º,
    —Å–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫–∏-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –±–∞—Ç—á–∏—Ç –∏—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Redis.
    –ï–≥–æ —Ä–æ–ª—å - –¢–û–õ–¨–ö–û –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞—Ç—á–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ Redis –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∏—Ö ID.
    –ù–µ –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é.
    """

    def __init__(self, redis=None, tick_cache_manager_instance=tick_cache_manager):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TaskProcessor.
        :param redis: –°—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
        :param tick_cache_manager_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä TickCacheManager.
        """
        self.redis = redis or CentralRedisClient()
        self._using_external_redis = redis is not None
        self.tick_cache_manager = tick_cache_manager_instance
        self._raw_tasks_by_category = {}

    async def prepare_and_process_batches(self, raw_tasks_by_category: Dict[str, List[Dict[str, Any]]]) -> List[Dict[str, str]]: # –ò–∑–º–µ–Ω–µ–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ List[Dict[str, str]]
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—ã—Ä—ã—Ö –∑–∞–¥–∞—á.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Å—ã—Ä—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        –°–æ–∑–¥–∞–µ—Ç –±–∞—Ç—á–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ Redis.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç {'batch_id': str, 'category': str}.

        :param raw_tasks_by_category: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è (str),
                                       –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∑–∞–¥–∞—á–∞–º–∏.
                                       –ü—Ä–∏–º–µ—Ä: {'exploration': [{'character_id': 101, 'task_type': 'exploration', ...}]}
        :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {'batch_id': str, 'category': str} —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π.
        """
        self._raw_tasks_by_category = raw_tasks_by_category
        
        all_created_batch_info: List[Dict[str, str]] = [] # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π

        try:
            logger.info("üöÄ [START] TaskProcessor –∑–∞–ø—É—â–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—ã—Ä—ã—Ö –∑–∞–¥–∞—á...")

            total_raw_tasks = sum(len(v) for v in self._raw_tasks_by_category.values())
            if total_raw_tasks > 0:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {total_raw_tasks} —Å—ã—Ä—ã—Ö –∑–∞–¥–∞—á –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {list(self._raw_tasks_by_category.keys())}")
                all_created_batch_info = await self._collect_instructions_and_batch()
            else:
                logger.info("üí§ –ù–µ—Ç —Å—ã—Ä—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É TaskProcessor.")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ TaskProcessor: {str(e)}")
            all_created_batch_info = []
        finally:
            await self._cleanup_resources()
        
        return all_created_batch_info


    async def _collect_instructions_and_batch(self) -> List[Dict[str, str]]: # –ò–∑–º–µ–Ω–µ–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ character_id, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–∞—Ç—á–∏
        –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ Redis —á–µ—Ä–µ–∑ TickCacheManager.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {'batch_id': str, 'category': str} –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π.
        """
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞—Ç—á–µ–π...")

        all_instructions: Dict[str, List[Dict[str, Any]]] = {
            "exploration": [],
            "training": [],
            "crafting": []
        }
        created_batch_info: List[Dict[str, str]] = [] # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π

        # --- –ó–ê–ì–õ–£–®–ö–ê: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ---
        for task_type, raw_tasks in self._raw_tasks_by_category.items():
            for task_data in raw_tasks:
                character_id = task_data.get('character_id')
                if character_id is None:
                    logger.warning(f"–°—ã—Ä–∞—è –∑–∞–¥–∞—á–∞ –±–µ–∑ 'character_id' –ø—Ä–æ–ø—É—â–µ–Ω–∞: {task_data}")
                    continue
                
                instruction = {
                    "character_id": character_id,
                    "task_type": task_type,
                    "instruction_details": f"Process_tick_for_{task_type}_char_{character_id}",
                    **task_data 
                }
                
                if task_type in all_instructions:
                    all_instructions[task_type].append(instruction)
                else:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏ '{task_type}' –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞. –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
        # --- –ö–û–ù–ï–¶ –ó–ê–ì–õ–£–®–ö–ò ---

        # --- –ë–ê–¢–ß–ò–ù–ì –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –í REDIS ---
        batches_created = 0
        for category, instructions in all_instructions.items():
            if not instructions:
                continue

            for i in range(0, len(instructions), BATCH_SIZE):
                batch_content = instructions[i:i + BATCH_SIZE]
                batch_id = str(uuid.uuid4())
                
                await self.tick_cache_manager.add_batch_of_instructions_to_category(
                    category=category,
                    batch_id=batch_id,
                    instructions_batch=batch_content
                )
                created_batch_info.append({'batch_id': batch_id, 'category': category}) # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å
                batches_created += 1
                logger.info(f"–°–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –±–∞—Ç—á '{batch_id}' ({len(batch_content)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π) –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.")

        if batches_created > 0:
            logger.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {batches_created} –±–∞—Ç—á–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ Redis.")
        else:
            logger.info("‚ùå –ù–µ –±—ã–ª–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")
        
        return created_batch_info # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π

    async def _cleanup_resources(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤."""
        if not self._using_external_redis:
            await self.redis.close()