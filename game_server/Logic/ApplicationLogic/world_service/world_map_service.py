# game_server/Logic/ApplicationLogic/world_service/world_map_service.py

import logging
from typing import Dict, Any, List, Optional

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å)


# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
from game_server.Logic.ApplicationLogic.world_service.world_map_generation.world_map_generator import WorldMapGenerator
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.Logic.InfrastructureLogic.app_mongo.mongo_repository_manager import MongoRepositoryManager

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å)
# –ï—Å–ª–∏ MapQueryService –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–æ–º –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
# from game_server.Logic.ApplicationLogic.world_service.map_query_processor import MapQueryProcessor # –ï—Å–ª–∏ –±—É–¥–µ—Ç —Ç–∞–∫–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

class WorldMapService:
    """
    –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ–π –º–∏—Ä–∞.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∏—Ä–∞ (–¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
    –∏ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç—ã (–¥–ª—è —Ä–æ—É—Ç–æ–≤/–¥—Ä—É–≥–∏—Ö —Å–∏—Å—Ç–µ–º).
    –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å —É—á–µ—Ç–æ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    –∏ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ —à–∏–Ω—É –∫–æ–º–∞–Ω–¥.
    """
    def __init__(self, 
                 repository_manager: RepositoryManager,
                 redis_client: CentralRedisClient,
                 mongo_repository_manager: MongoRepositoryManager):
        
        self.repository_manager = repository_manager
        self.redis_client = redis_client
        self.mongo_repository_manager = mongo_repository_manager
        self.logger = logger
        
        # –í–ù–£–¢–†–ï–ù–ù–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –°–ï–†–í–ò–°–ê:
        # 1. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ (–¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
        self._world_map_generator = WorldMapGenerator(
            repository_manager=self.repository_manager,
            redis_client=self.redis_client,
            mongo_repository_manager=self.mongo_repository_manager
        )
        
        # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∫–∞—Ä—Ç–µ –º–∏—Ä–∞
        # (–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –º–µ—Ç–æ–¥—ã —Å–∞–º–æ–≥–æ WorldMapService)
        # –ï—Å–ª–∏ MapQueryService –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–æ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –∑–¥–µ—Å—å:
        # self._map_query_processor = MapQueryProcessor(mongo_repository_manager=self.mongo_repository_manager)

        self.logger.info("‚úÖ WorldMapService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –∫–∞—Ä—Ç–æ–π –º–∏—Ä–∞.")

    # --- –ú–ï–¢–û–î 1: –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ú–ò–†–ê (–ü–†–ï–î–°–¢–ê–†–¢–û–í–´–ô –†–ï–ñ–ò–ú) ---
    async def initialize_world_map_for_startup(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—Ä—Ç—É –º–∏—Ä–∞ –≤ MongoDB.
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞.
        –í–æ–∑–º–æ–∂–Ω–æ–µ –±—É–¥—É—â–µ–µ: –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –≤–æ—Ä–∫–µ—Ä–æ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–∑ —à–∏–Ω—ã.
        """
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        success = await self._world_map_generator.generate_and_store_world_map() # –í—ã–∑–æ–≤ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        
        if success:
            self.logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
            return True
        else:
            self.logger.critical("‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.")
            return False

    # --- –ú–ï–¢–û–î 2: –î–õ–Ø –í–´–°–û–ö–û–£–†–û–í–ù–ï–í–û–ô –†–ê–ë–û–¢–´ –° –ö–ê–†–¢–û–ô (–î–õ–Ø –†–û–£–¢–û–í/–î–†–£–ì–ò–• –°–ò–°–¢–ï–ú) ---
    # –≠—Ç–∏ –º–µ—Ç–æ–¥—ã –±—É–¥—É—Ç –ø—É–±–ª–∏—á–Ω—ã–º–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω–µ—à–Ω–∏–º–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è–º–∏.
    # –û–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –ø—Ä—è–º–æ –∑–¥–µ—Å—å –∏–ª–∏ –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω—ã –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É "–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É" (_map_query_processor).

    async def get_location_details(self, access_key: str) -> Optional[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –µ—ë access_key –∏–∑ MongoDB.
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω —á–µ—Ä–µ–∑ REST API (—Ä–æ—É—Ç–æ–º) –∏–ª–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–∑ —à–∏–Ω—ã.
        """
        self.logger.debug(f"–ó–∞–ø—Ä–æ—Å –ø—É–±–ª–∏—á–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è access_key: {access_key}")
        # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å MongoRepositoryManager.
        # –ï—Å–ª–∏ –±—ã –±—ã–ª –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π _map_query_processor, —Ç–æ self._map_query_processor.get_location_details(access_key)
        location_data = await self.mongo_repository_manager.world_state.get_location_by_id(access_key)
        if location_data:
            self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –ø—É–±–ª–∏—á–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {access_key}")
            return location_data
        else:
            self.logger.warning(f"–ü—É–±–ª–∏—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è —Å access_key '{access_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return None

    async def get_all_main_regions(self) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –º–∏—Ä–∞.
        """
        self.logger.debug("–ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –º–∏—Ä–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API.")
        all_locations = await self.mongo_repository_manager.world_state.get_all_locations()
        main_regions = [
            loc for loc in all_locations 
            if loc.get('parent_access_key') is None and loc.get('location_type') in ['REGION', 'CITY']
        ]
        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(main_regions)} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.")
        return main_regions
    
    # async def handle_command_from_bus(self, command_type: str, payload: Dict[str, Any]):
    #     """
    #     –ü—Ä–∏–º–µ—Ä –º–µ—Ç–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–≥ –±—ã –±—ã—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥ –∏–∑ —à–∏–Ω—ã (RabbitMQ).
    #     –ï—Å–ª–∏ —ç—Ç–æ—Ç WorldMapService –±—É–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–º.
    #     """
    #     self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{command_type}' –∏–∑ —à–∏–Ω—ã —Å payload: {payload}")
    #     if command_type == "GET_LOCATION_DETAILS_COMMAND":
    #         location_id = payload.get("location_id")
    #         if location_id:
    #             details = await self.get_location_details(location_id)
    #             # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —à–∏–Ω—É –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å
    #             self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ GET_LOCATION_DETAILS –¥–ª—è {location_id}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {details is not None}")
    #         else:
    #             self.logger.warning("–ö–æ–º–∞–Ω–¥–∞ GET_LOCATION_DETAILS_COMMAND –±–µ–∑ location_id.")
    #     else:
    #         self.logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —à–∏–Ω—ã: {command_type}")