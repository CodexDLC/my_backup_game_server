# game_server/Logic/ApplicationLogic/world_map_generation/world_map_generator.py

import logging
from typing import Dict, Any, List, Optional

# –ò–º–ø–æ—Ä—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤/–∫–ª–∏–µ–Ω—Ç–æ–≤
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MongoRepositoryManager, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ MongoDB
from game_server.Logic.InfrastructureLogic.app_mongo.mongo_repository_manager import MongoRepositoryManager

# –ò–º–ø–æ—Ä—Ç DTOs, –µ—Å–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–≤—è–∑–µ–π
# from game_server.common_contracts.start_orcestrator.dtos import LocationConnectionData

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

class WorldMapGenerator:
    """
    –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MongoDB, —Ñ–æ—Ä–º–∏—Ä—É—é—â–∏–π –∫—Ä–∞—Å–∏–≤—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    –ª–æ–∫–∞—Ü–∏–π –∏ –∏—Ö —Å–≤—è–∑–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PostgreSQL –∏ Redis.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MongoRepositoryManager –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å MongoDB.
    """
    def __init__(self, 
                 repository_manager: RepositoryManager, # –î–ª—è PostgreSQL
                 redis_client: CentralRedisClient,       # –î–ª—è Redis
                 mongo_repository_manager: MongoRepositoryManager # –î–ª—è MongoDB
                ):
        self.repository_manager = repository_manager
        self.redis_client = redis_client
        self.mongo_repository_manager = mongo_repository_manager
        self.logger = logger
        self.logger.info("‚úÖ WorldMapGenerator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def generate_and_store_world_map(self) -> bool:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ –≤ MongoDB.
        """
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ –≤ MongoDB...")

            # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ PostgreSQL
            game_locations_repo = self.repository_manager.game_locations
            all_locations_orm = await game_locations_repo.get_all()
            
            locations_data: Dict[str, Dict[str, Any]] = {
                loc.access_key: loc.to_dict() for loc in all_locations_orm
            }
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(locations_data)} –ª–æ–∫–∞—Ü–∏–π –∏–∑ PostgreSQL.")

            # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏ –ª–æ–∫–∞—Ü–∏–π –∏–∑ Redis
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É REDIS_KEY_WORLD_CONNECTIONS, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞
            # –ª–∏–±–æ —á–µ—Ä–µ–∑ self.redis_client, –ª–∏–±–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é.
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ game_server.config.constants.redis
            from game_server.config.constants.redis import REDIS_KEY_WORLD_CONNECTIONS
            
            connections_list: Optional[List[Dict[str, Any]]] = await self.redis_client.get_msgpack(
                REDIS_KEY_WORLD_CONNECTIONS 
            ) 

            if connections_list is None:
                connections_list = []
                self.logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤—è–∑—è—Ö –ª–æ–∫–∞—Ü–∏–π –≤ Redis. –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –±–µ–∑ —Å–≤—è–∑–µ–π.")
            else:
                self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(connections_list)} —Å–≤—è–∑–µ–π –ª–æ–∫–∞—Ü–∏–π –∏–∑ Redis.")
            
            # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è MongoDB
            mongo_documents = []
            for access_key, loc_data in locations_data.items():
                doc = {
                    "_id": access_key, # –ò—Å–ø–æ–ª—å–∑—É–µ–º access_key –∫–∞–∫ _id MongoDB
                    **loc_data # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
                }
                
                doc['connections'] = []
                for conn in connections_list:
                    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'from_location' –∏ 'to_location' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ conn
                    if conn.get('from_location') == access_key:
                        doc['connections'].append({
                            "to_location": conn.get('to_location'),
                            "description": conn.get('description'),
                        })
                mongo_documents.append(doc)

            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ MongoDB —á–µ—Ä–µ–∑ MongoRepositoryManager
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É MongoRepositoryManager –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ 'world_state'
            # –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ 'upsert_locations_with_connections' –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π
            # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π 'locations'.
            
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å)
            world_state_mongo_repo = self.mongo_repository_manager.world_state # <-- –î–û–°–¢–£–ü –ö –†–ï–ü–û–ó–ò–¢–û–†–ò–Æ
            await world_state_mongo_repo.delete_all_locations() # <-- –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏

            if mongo_documents:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ world_state_mongo_repo –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ upsert'–∞
                await world_state_mongo_repo.upsert_locations_with_connections(mongo_documents) # <-- –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –º–µ—Ç–æ–¥ upsert
                self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(mongo_documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ª–æ–∫–∞—Ü–∏–π –≤ MongoDB.")
            else:
                self.logger.warning("–ù–µ –±—ã–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ MongoDB.")
            
            return True

        except Exception as e:
            self.logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ –≤ MongoDB: {e}", exc_info=True)
            return False