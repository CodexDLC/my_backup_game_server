import secrets
from sqlalchemy import update

from game_server.Logic.InfrastructureLogic.DataAccessLogic.db_instance import AsyncSessionLocal
from game_server.Logic.InfrastructureLogic.DataAccessLogic.manager.system.ORM_accaunt import AccountInfoManager
from game_server.settings import REGISTRATION_URL

class CreateAccountManager:
    def __init__(self):
        """–°–æ–∑–¥–∞—ë—Ç `db_session`, —á—Ç–æ–±—ã –≤—Å–µ –º–µ—Ç–æ–¥—ã –º–æ–≥–ª–∏ –µ—ë –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"""
        self.db_session = AsyncSessionLocal()  # üî• –¢–µ–ø–µ—Ä—å —Å–µ—Å—Å–∏—è –æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.manager = AccountInfoManager(self.db_session)

    async def create_account(self, identifier_type: str, identifier_value: str, username: str, avatar: str = None, locale: str = None, region: str = None):
        """
        –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –µ—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
        """
        existing_account = await self.manager.get_account_by_identifier(identifier_type, identifier_value)

        if existing_account:
            linked_platforms = existing_account.linked_platforms or {}
            linked_platforms[identifier_type] = identifier_value

            if not existing_account.auth_token:
                existing_account.auth_token = secrets.token_hex(32)
                await self.manager.update_account(existing_account.account_id, {"auth_token": existing_account.auth_token})

            await self.manager.update_account(existing_account.account_id, {"linked_platforms": linked_platforms})
            await self.db_session.commit()  # üî• –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            return {"status": "updated", "account_id": existing_account.account_id, "auth_token": existing_account.auth_token}

        auth_token = secrets.token_hex(32)
        account_data = {
            "username": username,
            "avatar": avatar,
            "locale": locale,
            "region": region,
            "status": "active",
            "role": "user",
            "twofa_enabled": False,
            "auth_token": auth_token,
            "linked_platforms": {identifier_type: identifier_value},
        }

        new_account = await self.manager.create_account(account_data)
        await self.db_session.commit()  # üî• –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        return {"status": "created", "account_id": new_account["account_id"], "auth_token": auth_token}

    async def close_session(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ `db_session`"""
        await self.db_session.close()  # üî• –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞

    async def update_account(self, identifier_type: str, identifier_value: str, update_data: dict):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ `identifier_type`.
        """
        existing_account = await self.manager.get_account_by_identifier(identifier_type, identifier_value)

        if not existing_account:
            return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        return await self.manager.update_account(existing_account.account_id, update_data)

    async def delete_account(self, identifier_type: str, identifier_value: str):
        """
        –£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ `identifier_type`.
        """
        existing_account = await self.manager.get_account_by_identifier(identifier_type, identifier_value)

        if not existing_account:
            return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        return await self.manager.delete_account(existing_account.account_id)

    async def generate_registration_link(self, identifier_type: str, identifier_value: str):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è `auth_token` –∞–∫–∫–∞—É–Ω—Ç–∞.
        """
        existing_account = await self.manager.get_account_by_identifier(identifier_type, identifier_value)

        if not existing_account:
            return {"status": "error", "message": "–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        auth_token = existing_account.auth_token

        # üî• –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ `.env`
        registration_link = f"{REGISTRATION_URL}{auth_token}"

        return {"status": "success", "registration_link": registration_link}