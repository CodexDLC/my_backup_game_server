# game_server/Logic/ApplicationLogic/shared_logic/LocationStateManagement/location_state_orchestrator.py

import inject
import logging
from typing import Dict, Any, Optional

from game_server.config.constants.arq import ARQ_TASK_AGGREGATE_LOCATION_STATE
from game_server.contracts.dtos.game_commands.data_models import LocationDynamicSummaryDTO
from .Handlers.add_player_to_state_handler import AddPlayerToStateHandler
from .Handlers.remove_player_from_state_handler import RemovePlayerFromStateHandler
from .Handlers.get_location_summary_handler import GetLocationSummaryHandler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é arq
from game_server.Logic.InfrastructureLogic.arq_worker.arq_manager import ArqQueueService


class LocationStateOrchestrator:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ª–æ–∫–∞—Ü–∏–π (–Ω–∞ –±—ç–∫–µ–Ω–¥–µ).
    """
    @inject.autoparams()
    def __init__(
        self,
        logger: logging.Logger,
        add_player_handler: AddPlayerToStateHandler,
        remove_player_handler: RemovePlayerFromStateHandler,
        get_summary_handler: GetLocationSummaryHandler,
        arq_service: ArqQueueService,  # <-- –ù–û–í–ê–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–¨
    ):
        self.logger = logger
        self._add_player_handler = add_player_handler
        self._remove_player_handler = remove_player_handler
        self._get_summary_handler = get_summary_handler
        self._arq_service = arq_service  # <-- –°–û–•–†–ê–ù–Ø–ï–ú –°–ï–†–í–ò–°
        self.logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def _enqueue_location_update_task(self, location_id: str):
            """
            –°—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å arq –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ Redis –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤.
            """
            if not location_id:
                return
                
            # ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–û–ù–°–¢–ê–ù–¢–£ –í–ú–ï–°–¢–û –°–¢–†–û–ö–ò
            task_name = ARQ_TASK_AGGREGATE_LOCATION_STATE 
            
            self.logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ '{task_name}' –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {location_id}.")
            try:
                await self._arq_service.enqueue_job(
                    task_name,
                    location_id  # –ü–µ—Ä–µ–¥–∞–µ–º ID –ª–æ–∫–∞—Ü–∏–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –≤ —Ç–∞—Å–∫
                )
                self.logger.info(f"–ó–∞–¥–∞—á–∞ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {location_id} —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å.")
            except Exception as e:
                self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {location_id}: {e}", exc_info=True)

    async def update_player_location_state_and_get_summary(
        self,
        old_location_id: Optional[str],
        new_location_id: str,
        character_id: int
    ) -> LocationDynamicSummaryDTO:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –ª–æ–∫–∞—Ü–∏—è—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –æ –Ω–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
        –∏ —Å—Ç–∞–≤–∏—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫—É.
        """
        self.logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞ {character_id}: –∏–∑ {old_location_id} –≤ {new_location_id}.")

        # 1. –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π –ª–æ–∫–∞—Ü–∏–∏
        if old_location_id:
            await self._remove_player_handler.process(location_id=old_location_id, character_id=character_id)
            self.logger.debug(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {character_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å—Ç–∞—Ä–æ–π –ª–æ–∫–∞—Ü–∏–∏ {old_location_id}.")
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
        summary = await self._add_player_handler.process(location_id=new_location_id, character_id=character_id)
        self.logger.debug(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {character_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é {new_location_id}. Summary: {summary}.")

        # 3. üî• –°—Ç–∞–≤–∏–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å –ü–û–°–õ–ï –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        await self._enqueue_location_update_task(old_location_id)
        await self._enqueue_location_update_task(new_location_id)

        return summary

    async def get_location_summary(self, location_id: str) -> LocationDynamicSummaryDTO:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏.
        """
        self.logger.debug(f"–ó–∞–ø—Ä–æ—Å —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {location_id} —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.")
        summary = await self._get_summary_handler.process(location_id=location_id)
        return summary