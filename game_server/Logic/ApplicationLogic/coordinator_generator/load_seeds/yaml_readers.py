# game_server/utils/load_seeds/yaml_readers.py

import yaml
from pathlib import Path
from typing import Dict, Any, List, Optional
from game_server.services.logging.logging_setup import logger

class YamlReader:
    @staticmethod
    async def read_and_parse_yaml(file_path: Path) -> Optional[Dict[str, Any]]:
        """
        –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML-—Ñ–∞–π–ª–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞.
        """
        try:
            logger.debug(f"üìÇ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å YAML: {file_path}")
            with open(str(file_path), 'r', encoding='utf-8') as f:
                loaded_data = yaml.safe_load(f)
                logger.debug(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ YAML '{file_path}': —Ç–∏–ø: {type(loaded_data)}, –∫–ª—é—á–∏: {loaded_data.keys() if isinstance(loaded_data, dict) else 'N/A'}")
                return loaded_data
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}. –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏.")
            return None
        except yaml.YAMLError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML –≤ —Ñ–∞–π–ª–µ {file_path}: {str(e)}", exc_info=True)
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {file_path}: {str(e)}", exc_info=True)
            return None

    @staticmethod
    async def get_items_from_yaml(file_path: Path, pk_column_name: str) -> List[Dict[str, Any]]:
        """
        –ß–∏—Ç–∞–µ—Ç YAML-—Ñ–∞–π–ª –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –∫–ª—é—á–∞ 'data':
        1. data: [ {item1}, {item2} ] (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π)
        2. data: { key1: {item1_data}, key2: {item2_data} } (—Å–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤–∞—Ä–µ–π, –≥–¥–µ –∫–ª—é—á–∏ - —ç—Ç–æ ID)

        :param file_path: –ü—É—Ç—å –∫ YAML-—Ñ–∞–π–ª—É.
        :param pk_column_name: –ò–º—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –º–æ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ "—Å–ª–æ–≤–∞—Ä—å —Å–ª–æ–≤–∞—Ä–µ–π".
        :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
        """
        loaded_data = await YamlReader.read_and_parse_yaml(file_path)
        items_to_process: List[Dict[str, Any]] = []

        if not loaded_data or 'data' not in loaded_data:
            logger.debug(f"‚ö†Ô∏è –§–∞–π–ª '{file_path}' –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π –∫–ª—é—á 'data'.")
            return items_to_process # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

        data_content = loaded_data['data']

        if isinstance(data_content, list):
            items_to_process = data_content
            logger.debug(f"‚úÖ –§–æ—Ä–º–∞—Ç 'data' –≤ '{file_path}': —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤. –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {len(items_to_process)}")
        elif isinstance(data_content, dict):
            logger.debug(f"‚úÖ –§–æ—Ä–º–∞—Ç 'data' –≤ '{file_path}': —Å–ª–æ–≤–∞—Ä—å –æ–±—ä–µ–∫—Ç–æ–≤. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á–∏ –∫–∞–∫ '{pk_column_name}'.")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pk_column_name –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º
            if not pk_column_name:
                logger.error(f"‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ (pk_column_name) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä—è –≤ '{file_path}'. –ü—Ä–æ–ø—É—Å–∫.")
                return []

            for key, item_dict in data_content.items():
                if not isinstance(item_dict, dict):
                    logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç '{key}' –≤ 'data' —Å–ª–æ–≤–∞—Ä–µ '{file_path}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è –∫–∞–∫ –ø–æ–ª–µ ID –≤ —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö
                item_dict[pk_column_name] = key
                items_to_process.append(item_dict)
            logger.debug(f"üìä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ '{file_path}': {len(items_to_process)}")
        else:
            logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ '{file_path}': –æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∫–ª—é—á–µ 'data', –ø–æ–ª—É—á–µ–Ω {type(data_content)}.")
            return []
        
        return items_to_process