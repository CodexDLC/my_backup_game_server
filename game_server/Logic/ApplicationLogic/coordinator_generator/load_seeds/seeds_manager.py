import logging
from pathlib import Path
from typing import Callable
from sqlalchemy.ext.asyncio import AsyncSession

from game_server.Logic.ApplicationLogic.coordinator_generator.load_seeds.seed_constants import FILE_LOAD_ORDER
from game_server.database.models.models import Base
# –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è Base.registry.mappers

# –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º SeedLoader (–∫–∞–∫ –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏)
from .seed_loader import SeedLoader
from .seeds_config import SeedsConfig # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ SeedsConfig –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
from game_server.services.logging.logging_setup import logger # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä

# –£–¥–∞–ª–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è logging.basicConfig

class SeedsManager:
    

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–µ—Å—Å–∏—é, –∫–∞–∫ –≤ –≤–∞—à–µ–π "—Ä–∞–±–æ—á–µ–π" –≤–µ—Ä—Å–∏–∏
    def __init__(self, session: AsyncSession):
        logger.info("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SeedsManager...") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        self.session = session # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: SeedLoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        self.loader = SeedLoader(self.session)

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è all_models_map –¥–ª—è SQLAlchemy 2.0
        self.all_models_map = {cls.__name__: cls for cls in Base.registry.mappers if hasattr(cls, '__tablename__')}
        logger.info(f"SeedsManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(self.all_models_map)}")
        # –î–æ–±–∞–≤–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        self.inserted_total = 0
        self.updated_total = 0


    @classmethod
    def convert_filename_to_model(cls, filename: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        name = filename.replace('.yml', '')
        if '_' in name and name.split('_')[0].isdigit():
            name = '_'.join(name.split('_')[1:])
        model_name = ''.join(word.capitalize() for word in name.split('_'))
        logger.debug(f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–∞ '{filename}' ‚Üí –º–æ–¥–µ–ª—å '{model_name}'") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        return model_name

    async def import_seeds(self, models_module):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ seed-–¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ seed-—Ñ–∞–π–ª–æ–≤...") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        seed_files = self._collect_seed_files()

        if not seed_files:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏! –ü—Ä–æ–≤–µ—Ä—å SEEDS_DIR.") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
            return

        for file_path in seed_files:
            model_name = self.convert_filename_to_model(file_path.name)
            model = getattr(models_module, model_name, None)

            if not model:
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å '{model_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –§–∞–π–ª '{file_path}' –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
                continue

            logger.debug(f"üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª '{file_path}' –¥–ª—è –º–æ–¥–µ–ª–∏ '{model_name}'")
            inserted, updated = await self.loader.process_seed_file(file_path, model)
            # –°—É–º–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç SeedLoader –≤ –æ–±—â–∏—Ö —Å—á–µ—Ç—á–∏–∫–∞—Ö SeedsManager
            self.inserted_total += inserted
            self.updated_total += updated

        logger.info(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ–≥–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ: {self.inserted_total}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {self.updated_total}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä

    def _collect_seed_files(self) -> list[Path]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ .yml —Ñ–∞–π–ª—ã, –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏,
           —Å–ø–µ—Ä–≤–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É, –∑–∞—Ç–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ."""
        logger.info(f"üìå –ò—â–µ–º seed-—Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ {SeedsConfig.SEEDS_DIR}...")

        all_yml_files = list(SeedsConfig.SEEDS_DIR.rglob('*.yml'))
        
        # 1. –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ FILE_LOAD_ORDER (—Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è)
        ordered_files = []
        ordered_file_names = set(FILE_LOAD_ORDER) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π FILE_LOAD_ORDER
        
        file_paths_by_name = {f.name: f for f in all_yml_files}

        for name in FILE_LOAD_ORDER: # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π FILE_LOAD_ORDER
            if name in file_paths_by_name:
                ordered_files.append(file_paths_by_name[name])
            else:
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª '{name}' –∏–∑ FILE_LOAD_ORDER –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ SEEDS_DIR.")

        # 2. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–Ω–µ –ø–æ–ø–∞–≤—à–∏–µ –≤ FILE_LOAD_ORDER)
        remaining_files = []
        for f in all_yml_files:
            if f.name not in ordered_file_names:
                remaining_files.append(f)
        
        remaining_files.sort(key=lambda x: x.name)

        final_file_list = ordered_files + remaining_files

        if not final_file_list:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç .yml —Ñ–∞–π–ª–æ–≤ –≤ SEEDS_DIR, –≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∞–ø–∫–∏!")

        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(final_file_list)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏–∑ FILE_LOAD_ORDER).")
        logger.debug(f"–ü–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏: {[f.name for f in final_file_list]}")

        return final_file_list