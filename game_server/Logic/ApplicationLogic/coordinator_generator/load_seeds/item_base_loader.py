# game_server/Logic/ApplicationLogic/coordinator_generator/load_seeds/item_base_loader.py

import json
from pathlib import Path
from typing import Dict, Any # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞


from game_server.Logic.ApplicationLogic.coordinator_generator.load_seeds.yaml_readers import YamlReader
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_constants import ITEM_BASE_YAML_PATH # DEFAULT_TTL_STATIC_REF_DATA –∏ REDIS_KEY_ITEM_DATA_BASE –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –∑–¥–µ—Å—å
from game_server.services.logging.logging_setup import logger

# üî• –£–î–ê–õ–ï–ù–ò–ï –ò–ú–ü–û–†–¢–ê: reference_data_cache_manager –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å üî•
# from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data_cache_manager import reference_data_cache_manager


class ItemBaseLoader:
    def __init__(self):
        self.yaml_reader = YamlReader()

    async def _read_and_combine_yamls(self, directory: Path) -> Dict[str, Any]:
        combined_data: Dict[str, Any] = {}
        if not directory.is_dir():
            logger.error(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å item_base –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {directory}")
            return combined_data
        yaml_files = list(directory.glob('*.yml'))
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(yaml_files)} YAML-—Ñ–∞–π–ª–æ–≤ item_base –≤ '{directory}'.")
        for file_path in yaml_files:
            items_list = await self.yaml_reader.get_items_from_yaml(file_path, pk_column_name='sub_category_code')
            for item_dict in items_list:
                key = item_dict.get('sub_category_code')
                if key:
                    if key in combined_data:
                        logger.warning(f"–ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –∫–ª—é—á item_base '{key}' –≤ —Ñ–∞–π–ª–µ '{file_path}'. –û–Ω –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                    if 'names' in item_dict and isinstance(item_dict['names'], dict):
                        logger.debug(f"–ò–º–µ–Ω–∞ 'names' –¥–ª—è '{key}' –∑–∞–≥—Ä—É–∂–µ–Ω—ã –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏. –ö–ª—é—á–∏: {list(item_dict['names'].keys())[:2]}")
                    combined_data[key] = item_dict
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(combined_data)} –∑–∞–ø–∏—Å–µ–π item_base –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤.")
        return combined_data

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö üî•
    async def load_and_cache(self) -> Dict[str, Any]: # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ Dict[str, Any]
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ item_base –∏–∑ YAML-—Ñ–∞–π–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö.
        –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤—ã–∑—ã–≤–∞—é—â–∏–º –∫–æ–¥–æ–º (ReferenceDataCacheManager).
        """
        base_path = Path(ITEM_BASE_YAML_PATH)

        logger.info(f"–ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ item_base YAML-—Ñ–∞–π–ª–æ–≤ –∏–∑ '{base_path}'...")
        try:
            all_item_bases = await self._read_and_combine_yamls(base_path)
            if not all_item_bases:
                logger.warning("–î–∞–Ω–Ω—ã–µ item_base –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
                return {} # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_item_bases)} –∑–∞–ø–∏—Å–µ–π item_base –∏–∑ YAML-—Ñ–∞–π–ª–æ–≤.")
            # üî• –ù–û–í–û–ï: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ id_field üî•
            for i, (key, item_data) in enumerate(list(all_item_bases.items())[:5]): # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                logger.debug(f"ItemBase #{i+1} (key: {key}): sub_category_code={item_data.get('sub_category_code')}, content_sample={str(item_data)[:100]}...")
                if item_data.get('sub_category_code') is None:
                    logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –í ItemBase '{key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'sub_category_code'!")
            return all_item_bases
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ item_base: {e}")
            return {}