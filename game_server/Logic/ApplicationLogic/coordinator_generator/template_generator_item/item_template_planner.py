# game_server/Logic/ApplicationLogic/coordinator_generator/template_generator_item/item_template_planner.py

import json
import re 
from typing import Any, Dict, List, Callable, Set, Optional, Tuple
from sqlalchemy.ext.asyncio import AsyncSession

from game_server.Logic.ApplicationLogic.coordinator_generator.generator_settings import ITEM_GENERATION_LIMIT
from game_server.services.logging.logging_setup import logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º –ö–õ–ê–°–° ItemTemplatePlannerLogic
from .item_template_planner_logic import ItemTemplatePlannerLogic 
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –≤—Ä—É—á–Ω—É—é
# from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient


class ItemTemplatePlanner:
    """
    –ö–ª–∞—Å—Å-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä). –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ "–ß–¢–û" –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
    –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∞, –≤—ã–∑—ã–≤–∞—è –¥–µ—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É.
    """
    def __init__(
        self,
        async_session_factory: Callable[[], AsyncSession],
        item_generation_limit: Optional[int] = ITEM_GENERATION_LIMIT
    ):
        self.async_session_factory = async_session_factory
        self.item_generation_limit = item_generation_limit
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ItemTemplatePlannerLogic –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
        # –¢–µ–ø–µ—Ä—å –æ–Ω —Å–∞–º –∑–Ω–∞–µ—Ç, –∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —á–µ—Ä–µ–∑ –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã.
        self._planner_logic = ItemTemplatePlannerLogic(
            async_session_factory=self.async_session_factory,
            item_generation_limit=self.item_generation_limit
        )

    async def check_and_prepare_generation_tasks(self) -> List[Dict]:
        logger.info("ItemTemplatePlanner: –ó–∞–ø—É—Å–∫ check_and_prepare_generation_tasks (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)...")
        
        # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã —á–µ—Ä–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä self._planner_logic
        item_base, materials, suffixes, modifiers = await self._planner_logic.load_reference_data_from_redis()
        
        existing_codes = await self._planner_logic.get_existing_item_codes_from_db()
        
        etalon_specs = self._planner_logic.build_etalon_item_codes(item_base, materials, suffixes)
        
        missing_specs = self._planner_logic.find_missing_specs(etalon_specs, existing_codes)
        
        tasks = self._planner_logic.prepare_tasks_for_missing_items(missing_specs, self.item_generation_limit)
        
        logger.info("ItemTemplatePlanner: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        
        return tasks
