# Logic/ApplicationLogic/coordinator_generator/coordinator_generator.py

import asyncio
import logging
from typing import Callable, Optional, List, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession

# --- –ò–º–ø–æ—Ä—Ç—ã ---
from game_server.Logic.ApplicationLogic.coordinator_generator.generator_settings import *
from game_server.Logic.ApplicationLogic.coordinator_generator.template_generator_character.character_template_planner import CharacterTemplatePlanner
from game_server.Logic.ApplicationLogic.coordinator_generator.data_processing.creature_type_data_orchestrator import CreatureTypeDataOrchestrator
from game_server.Logic.ApplicationLogic.coordinator_generator.template_generator_item.item_template_planner import ItemTemplatePlanner
from game_server.Logic.ApplicationLogic.coordinator_generator.constant.constant_generator import *
from game_server.Logic.InfrastructureLogic.DataAccessLogic.db_instance import AsyncSessionLocal
from game_server.Logic.ApplicationLogic.coordinator_generator.load_seeds.seeds_manager import SeedsManager
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_constants import ITEM_GENERATION_REDIS_TASK_KEY_TEMPLATE, ITEM_GENERATION_WORKER_QUEUE_NAME, REDIS_TASK_INITIAL_TTL_SECONDS

from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data_cache_manager import ReferenceDataCacheManager
from game_server.Logic.InfrastructureLogic.celery.task.tasks_item_generation import process_item_generation_batch_task
from game_server.database.models import models
from game_server.services.logging.logging_setup import logger
from game_server.Logic.InfrastructureLogic.celery.task.tasks_character_generation import process_character_generation_batch_task
from game_server.Logic.InfrastructureLogic.messaging.rabbit_utils import TaskDispatcher




class GeneratorCoordinator:
    """
    –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —á–µ—Ä–µ–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É app_cache.
    """

    def __init__(self):
        """–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Redis."""
        
        self.async_session_factory: Callable[[], AsyncSession] = AsyncSessionLocal
        self.creature_type_orchestrator: Optional[CreatureTypeDataOrchestrator] = None

        self.reference_data_cache_manager = ReferenceDataCacheManager(
            async_session_factory=self.async_session_factory
        )
        self.item_template_planner = ItemTemplatePlanner(
            async_session_factory=self.async_session_factory
        )
        self.character_template_planner = CharacterTemplatePlanner(
            async_session_factory=self.async_session_factory
        )
        self.task_dispatcher = TaskDispatcher()

        self.is_prestart_completed = False
        self.runtime_mode_active = False
        logger.info("‚ú® –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (_run_seeds_script, _cache_reference_data, –∏ —Ç.–¥.)
    # –æ—Å—Ç–∞—é—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô. –û–Ω–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞—é—Ç –º–µ—Ç–æ–¥—ã —Ç–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤,
    # –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ç–∞–∫ —á–∏—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –≤—ã—à–µ.
    async def _run_seeds_script(self) -> bool:
        logger.info("‚öôÔ∏è –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (Seeds)...")
        try:
            async with self.async_session_factory() as session:
                seeds_manager = SeedsManager(session)
                await seeds_manager.import_seeds(models)
            logger.info("‚úÖ –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
            return True
        except Exception as e:
            logger.critical(f"üö® –®–∞–≥ 1: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
            return False

    async def _cache_reference_data(self) -> bool:
        logger.info("‚öôÔ∏è –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ Redis-–∫—ç—à...")
        try:
            await self.reference_data_cache_manager.cache_all_reference_data()
            logger.info("‚úÖ –®–∞–≥ 2: –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –≤ Redis.")
            return True
        except Exception as e:
            logger.critical(f"üö® –®–∞–≥ 2: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
            return False
            
    async def initialize_data_loaders(self) -> bool:
        logger.info("‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤...")
        try:
            async with self.async_session_factory() as session:
                self.creature_type_orchestrator = CreatureTypeDataOrchestrator(session)
                await self.creature_type_orchestrator.load_raw_data()
                await self.creature_type_orchestrator.process_data_for_generators()
            logger.info("‚úÖ –ó–∞–≥—Ä—É–∑—á–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            return True
        except Exception as e:
            logger.critical(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}", exc_info=True)
            return False

    async def _run_level_1_generators(self) -> bool:
        logger.info("‚öôÔ∏è –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤ 1 —É—Ä–æ–≤–Ω—è...")
        try:
            logger.info("‚û°Ô∏è –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –ü–†–ï–î–ú–ï–¢–û–í...")
            item_tasks = await self.item_template_planner.check_and_prepare_generation_tasks()
            if item_tasks:
                await self.task_dispatcher.process_and_dispatch_tasks(
                    task_list=item_tasks,
                    batch_size=TEMPLATE_GENERATION_BATCH_SIZE,
                    redis_task_key_template=ITEM_GENERATION_REDIS_TASK_KEY_TEMPLATE,
                    redis_ttl_seconds=REDIS_TASK_INITIAL_TTL_SECONDS, # <--- üî• –î–û–ë–ê–í–õ–ï–ù–û üî•
                    celery_queue_name=ITEM_GENERATION_WORKER_QUEUE_NAME,
                    celery_task_callable=process_item_generation_batch_task,
                    task_type_name="–ø—Ä–µ–¥–º–µ—Ç–æ–≤"
                )
            else:
                logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –Ω–∞—à–µ–ª –∑–∞–¥–∞—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

            logger.info("‚û°Ô∏è –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –ü–ï–†–°–û–ù–ê–ñ–ï–ô...")
            if not self.creature_type_orchestrator:
                logger.error("üö® –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                return False
            
            playable_races_list = self.creature_type_orchestrator.get_playable_race_list()
            if not playable_races_list:
                logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö —Ä–∞—Å –ø—É—Å—Ç. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")
            else:
                character_tasks = await self.character_template_planner.pre_process(
                    playable_races_data=playable_races_list,
                    desired_gender_ratio=DEFAULT_CHARACTER_GENDER_RATIO
                )
                if character_tasks:
                    await self.task_dispatcher.process_and_dispatch_tasks(
                        task_list=character_tasks,
                        batch_size=CHARACTER_GENERATION_MAX_BATCH_SIZE,
                        redis_task_key_template=CHARACTER_GENERATION_REDIS_TASK_KEY_TEMPLATE,
                        redis_ttl_seconds=REDIS_TASK_INITIAL_TTL_SECONDS, # <--- üî• –î–û–ë–ê–í–õ–ï–ù–û üî•
                        celery_queue_name=CHARACTER_GENERATION_WORKER_QUEUE_NAME,
                        celery_task_callable=process_character_generation_batch_task,
                        task_type_name="–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
                    )
                else:
                    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ –Ω–∞—à–µ–ª –∑–∞–¥–∞—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            
            logger.info("‚úÖ –®–∞–≥ 3: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ 1 —É—Ä–æ–≤–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.")
            return True
        except Exception as e:
            logger.critical(f"üö® –®–∞–≥ 3: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ 1 —É—Ä–æ–≤–Ω—è: {e}", exc_info=True)
            return False

    async def pre_start_mode(self):
        """
        –ü–µ—Ä–≤—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤: –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤.
        –í–∫–ª—é—á–∞–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —à–∞–≥–æ–≤.
        """
        logger.info("üöÄ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤—Ö–æ–¥–∏—Ç –≤ –ü–†–ï–î–°–¢–ê–†–¢–û–í–´–ô –†–ï–ñ–ò–ú (Pre-Start Mode)...")

        # 1. –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω—É–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è (–∑–∞–≥—Ä—É–∑–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑ YAML) —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        attempt = 0
        while attempt < MAX_TASK_RETRY_ATTEMPTS:
            logger.info(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_TASK_RETRY_ATTEMPTS} –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ Seeds...")
            if await self._run_seeds_script():
                break
            else:
                attempt += 1
                if attempt < MAX_TASK_RETRY_ATTEMPTS:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ –®–∞–≥–µ 1. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(5)
                else:
                    logger.critical(f"üö® –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ë–î –ø–æ—Å–ª–µ {MAX_TASK_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.")
                    return False

        # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ Redis-–∫—ç—à —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        attempt = 0
        while attempt < MAX_TASK_RETRY_ATTEMPTS:
            logger.info(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_TASK_RETRY_ATTEMPTS} –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            if await self._cache_reference_data():
                break
            else:
                attempt += 1
                if attempt < MAX_TASK_RETRY_ATTEMPTS:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ –®–∞–≥–µ 2. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(5)
                else:
                    logger.critical(f"üö® –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ {MAX_TASK_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.")
                    return False
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        attempt = 0
        while attempt < MAX_TASK_RETRY_ATTEMPTS:
            logger.info(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_TASK_RETRY_ATTEMPTS} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
            if await self.initialize_data_loaders():
                break
            else:
                attempt += 1
                if attempt < MAX_TASK_RETRY_ATTEMPTS:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(5)
                else:
                    logger.critical(f"üö® –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ {MAX_TASK_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.")
                    return False

        # 4. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤ 1 —É—Ä–æ–≤–Ω—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        attempt = 0
        while attempt < MAX_TASK_RETRY_ATTEMPTS:
            logger.info(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_TASK_RETRY_ATTEMPTS} –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤ 1 —É—Ä–æ–≤–Ω—è...")
            if await self._run_level_1_generators():
                break
            else:
                attempt += 1
                if attempt < MAX_TASK_RETRY_ATTEMPTS:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ –®–∞–≥–µ 3. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(5)
                else:
                    logger.critical(f"üö® –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ 1 —É—Ä–æ–≤–Ω—è –ø–æ—Å–ª–µ {MAX_TASK_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.")
                    return False

        self.is_prestart_completed = True
        logger.info("‚úÖ –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à—ë–Ω. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –≤ –†–ê–ë–û–ß–ò–ô –†–ï–ñ–ò–ú.")
        logger.info("‚åõ –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å—Ç–∞—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞...")
        return True


    async def start_runtime_mode(self):
        if not self.is_prestart_completed:
            logger.warning("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–±–æ—á–∏–π —Ä–µ–∂–∏–º: –ø—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        logger.info("üü¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –†–ê–ë–û–ß–ò–ô –†–ï–ñ–ò–ú (Runtime Mode).")
        self.runtime_mode_active = True
        
        while self.runtime_mode_active:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ pub/sub
            await asyncio.sleep(5)
        logger.info("üî¥ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤—ã—à–µ–ª –∏–∑ –†–ê–ë–û–ß–ï–ì–û –†–ï–ñ–ò–ú–ê.")

    async def _process_runtime_command(self, command: str):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ: {command}")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–∑–æ–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ "–Ω–∞ –ª–µ—Ç—É"


async def main_generator_coordinator():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ì–ª–∞–≤–Ω–æ–≥–æ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤...")
    # redis_client = CentralRedisClient() # –≠—Ç—É —Å—Ç—Ä–æ–∫—É –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ global central_redis_client —É–∂–µ –µ—Å—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    coordinator = GeneratorCoordinator() # <--- –ò–ó–ú–ï–ù–ï–ù–û: –ê—Ä–≥—É–º–µ–Ω—Ç redis_client —É–¥–∞–ª–µ–Ω

    success_prestart = await coordinator.pre_start_mode()
    if success_prestart:
        await coordinator.start_runtime_mode()
    else:
        logger.error("‚ùå –ì–ª–∞–≤–Ω—ã–π –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")


if __name__ == "__main__":
    asyncio.run(main_generator_coordinator())