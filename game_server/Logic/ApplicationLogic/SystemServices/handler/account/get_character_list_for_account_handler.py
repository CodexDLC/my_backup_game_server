# game_server\Logic\ApplicationLogic\SystemServices\handler\account\get_character_list_for_account_handler.py

import logging
from typing import Dict, Any, List, Union, Callable
import inject
from datetime import datetime, timezone
from sqlalchemy.ext.asyncio import AsyncSession

# –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä transactional
from game_server.Logic.InfrastructureLogic.db_instance import AsyncSessionLocal
from game_server.Logic.InfrastructureLogic.app_post.utils.transactional_decorator import transactional

from game_server.Logic.ApplicationLogic.SystemServices.handler.i_system_handler import ISystemServiceHandler
from game_server.contracts.api_models.character.responses import CharacterListResponseData, GetCharacterListForAccountResultDTO
from game_server.contracts.dtos.character.data_models import CharacterDTO
from game_server.contracts.dtos.system.commands import GetCharacterListForAccountCommandDTO

from game_server.contracts.dtos.system.results import HubRoutingResultDTO
from game_server.contracts.shared_models.base_responses import ErrorDetail


# –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.accounts.interfaces_accounts import IAccountGameDataRepository
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.character.interfaces_character import ICharacterRepository
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_0lvl.interfaces_meta_data_0lvl import ICreatureTypeRepository
from game_server.database.models.models import Character


class GetCharacterListForAccountHandler(ISystemServiceHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ª–æ–≥–∏–Ω–∞.
    """
    @inject.autoparams()
    def __init__(
        self,
        logger: logging.Logger,
        account_game_data_repo_factory: Callable[[AsyncSession], IAccountGameDataRepository],
        character_repo_factory: Callable[[AsyncSession], ICharacterRepository],
        creature_repo_factory: Callable[[AsyncSession], ICreatureTypeRepository],
    ):
        self._logger = logger
        self._account_game_data_repo_factory = account_game_data_repo_factory
        self._character_repo_factory = character_repo_factory
        self._creature_repo_factory = creature_repo_factory
        self._logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    @property
    def logger(self) -> logging.Logger:
        return self._logger

    @transactional(AsyncSessionLocal)
    # üî• –ò–ó–ú–ï–ù–ï–ù–û: command_dto –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–º
    async def process(self, session: AsyncSession, command_dto: GetCharacterListForAccountCommandDTO) -> Union[GetCharacterListForAccountResultDTO, HubRoutingResultDTO]:
        self._logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è account_id: {command_dto.account_id} (Correlation ID: {command_dto.correlation_id})")

        try:
            account_game_data_repo = self._account_game_data_repo_factory(session)
            character_repo = self._character_repo_factory(session)
            creature_repo = self._creature_repo_factory(session)

            updated_game_data = await account_game_data_repo.update_last_login_game(
                account_id=command_dto.account_id
            )
            
            if not updated_game_data:
                msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å last_login_game –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {command_dto.account_id}. –í–æ–∑–º–æ–∂–Ω–æ, AccountGameData –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                self._logger.warning(msg)
                return HubRoutingResultDTO(
                    correlation_id=command_dto.correlation_id,
                    trace_id=command_dto.trace_id,
                    span_id=command_dto.span_id,
                    success=False,
                    message=msg,
                    error=ErrorDetail(code="ACCOUNT_GAME_DATA_NOT_FOUND", message=msg).model_dump()
                )
            self._logger.info(f"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {command_dto.account_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

            raw_characters: List[Character] = await character_repo.get_characters_by_account_id(
                account_id=command_dto.account_id
            )
            
            characters_dto: List[CharacterDTO] = []
            for char in raw_characters:
                characters_dto.append(CharacterDTO(
                    character_id=char.character_id,
                    name=char.name,
                    surname=char.surname,
                    creature_type_id=char.creature_type_id,
                    status=char.status,
                    clan_id=char.clan_id
                ))
            
            self._logger.info(f"–î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {command_dto.account_id} –Ω–∞–π–¥–µ–Ω–æ {len(characters_dto)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")

            self._logger.info(f"–û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {command_dto.account_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∫–æ–º–º–∏—Ç –±—É–¥–µ—Ç –∏–∑–≤–Ω–µ).")

            return GetCharacterListForAccountResultDTO(
                correlation_id=command_dto.correlation_id,
                trace_id=command_dto.trace_id,
                span_id=command_dto.span_id,
                success=True,
                message="–î–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
                data=CharacterListResponseData(characters=characters_dto),
                client_id=command_dto.client_id # <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
            )

        except Exception as e:
            self._logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è account_id {command_dto.account_id} (Correlation ID: {command_dto.correlation_id})")         
        
            return HubRoutingResultDTO(
                correlation_id=command_dto.correlation_id,
                trace_id=command_dto.trace_id,
                span_id=command_dto.span_id,
                success=False,
                message=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}",
                error=ErrorDetail(code="INTERNAL_SERVER_ERROR", message=str(e)).model_dump(),
                client_id=command_dto.client_id # <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
            )