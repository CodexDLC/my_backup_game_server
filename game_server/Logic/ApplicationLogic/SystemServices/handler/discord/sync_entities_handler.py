# game_server/Logic/ApplicationLogic/SystemServices/handler/discord/sync_entities_handler.py

import logging
from typing import Dict, Any, List, Callable
import inject
from pydantic import ValidationError
from sqlalchemy.ext.asyncio import AsyncSession

# üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π –∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
from game_server.Logic.InfrastructureLogic.db_instance import AsyncSessionLocal
from game_server.Logic.InfrastructureLogic.app_post.utils.transactional_decorator import transactional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.discord.interfaces_discord import IDiscordEntityRepository

from game_server.Logic.ApplicationLogic.SystemServices.handler.i_system_handler import ISystemServiceHandler

from game_server.contracts.api_models.discord.entity_management_requests import UnifiedEntitySyncRequest
from game_server.contracts.dtos.discord.data_models import DiscordEntityDTO
from game_server.contracts.shared_models.base_commands_results import BaseResultDTO


class SyncDiscordEntitiesHandler(ISystemServiceHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (—Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è) —Å—É—â–Ω–æ—Å—Ç–µ–π Discord –≤ –ë–î.
    –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    """
    # üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–Ω–µ–¥—Ä—è–µ–º –ª–æ–≥–≥–µ—Ä –∏ —Ñ–∞–±—Ä–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    @inject.autoparams('logger', 'discord_repo_factory')
    def __init__(self,
                 logger: logging.Logger,
                 discord_repo_factory: Callable[[AsyncSession], IDiscordEntityRepository]
                 ):
        self._logger = logger
        self._discord_repo_factory = discord_repo_factory # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–±—Ä–∏–∫—É
        self._logger.info("SyncDiscordEntitiesHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    @property
    def logger(self) -> logging.Logger:
        return self._logger

    # üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–µ–ª–∞–µ–º –º–µ—Ç–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–º
    @transactional(AsyncSessionLocal)
    async def process(self, session: AsyncSession, command_dto: UnifiedEntitySyncRequest) -> BaseResultDTO[Dict[str, Any]]:
        created_count = 0
        updated_count = 0
        errors = []
        processed_entities_responses = []

        guild_id = command_dto.guild_id
        entities_data = command_dto.entities_data

        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{command_dto.command}' –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}.")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        discord_entity_repo = self._discord_repo_factory(session)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–µ–º –î–í–ê —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            existing_db_entities = await discord_entity_repo.get_discord_entities_by_guild_id(guild_id)
            existing_by_discord_id = {entity.discord_id: entity for entity in existing_db_entities if entity.discord_id}
            # ‚ñº‚ñº‚ñº –ù–û–í–´–ô –°–õ–û–í–ê–†–¨ –î–õ–Ø –ü–û–ò–°–ö–ê –ü–û –£–ù–ò–ö–ê–õ–¨–ù–û–ú–£ –ö–û–î–£ ‚ñº‚ñº‚ñº
            existing_by_access_code = {entity.access_code: entity for entity in existing_db_entities if entity.access_code}

            for item_command in entities_data:
                discord_id = item_command.discord_id
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ access_code —Ç–∞–∫–∂–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –¥–∞–Ω–Ω—ã—Ö
                access_code = item_command.access_code
                item_data_dict = item_command.model_dump(exclude_unset=True)

                # ‚ñº‚ñº‚ñº –ù–û–í–ê–Ø, –ë–û–õ–ï–ï –ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–û–í–ï–†–ö–ò ‚ñº‚ñº‚ñº
                entity_to_update = None
                # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–º—É access_code
                if access_code and access_code in existing_by_access_code:
                    entity_to_update = existing_by_access_code[access_code]
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –ø–æ discord_id
                elif discord_id and discord_id in existing_by_discord_id:
                    entity_to_update = existing_by_discord_id[discord_id]


                if entity_to_update:
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—É—â–Ω–æ—Å—Ç—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ ID
                    try:
                        updated_entity = await discord_entity_repo.update_discord_entity_by_id(
                            entity_id=entity_to_update.id, # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ ID –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏
                            updates=item_data_dict
                        )
                        if updated_entity:
                            updated_count += 1
                            processed_entities_responses.append(DiscordEntityDTO.model_validate(updated_entity.__dict__).model_dump())
                    except Exception as e:
                        errors.append({"discord_id": discord_id, "error": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"})
                else:
                    try:
                        new_entity = await discord_entity_repo.create_discord_entity(item_data_dict)
                        created_count += 1
                        processed_entities_responses.append(DiscordEntityDTO.model_validate(new_entity.__dict__).model_dump())
                    except Exception as e:
                        errors.append({"name": item_command.name, "error": f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {e}"})

            self.logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ: {created_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}.")

            return BaseResultDTO[Dict[str, Any]](
                correlation_id=command_dto.correlation_id,
                success=True,
                message=f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
                data={"created_count": created_count, "updated_count": updated_count, "errors": errors, "processed_entities": processed_entities_responses},
                client_id=command_dto.client_id
            )

        except Exception as e:
            self.logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}: {e}")
            return BaseResultDTO[Dict[str, Any]](
                correlation_id=command_dto.correlation_id,
                success=False,
                message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {e}",
                data={"created_count": 0, "updated_count": 0, "errors": [{"error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {e}"}], "processed_entities": []},
                client_id=command_dto.client_id
            )