# game_server/Logic/ApplicationLogic/SystemServices/handler/discord/sync_config_from_bot_handler.py
from typing import Dict, Any

from game_server.Logic.ApplicationLogic.SystemServices.handler.i_system_handler import ISystemServiceHandler
# üî• –ü–†–ï–î–ü–û–õ–ê–ì–ê–ï–ú, —á—Ç–æ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –±—É–¥–µ—Ç —Å–≤–æ–π GuildConfigManager, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ —Ç–æ—Ç, —á—Ç–æ —É –±–æ—Ç–∞

from game_server.Logic.InfrastructureLogic.app_cache.services.discord.backend_guild_config_manager import BackendGuildConfigManager
from game_server.common_contracts.api_models.discord_api import GuildConfigSyncRequest
from game_server.common_contracts.dtos.base_dtos import BaseResultDTO

class SyncConfigFromBotHandler(ISystemServiceHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞—Ä–¥–∞, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç Discord-–±–æ—Ç–∞,
    –≤ –∫—ç—à Redis –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –±—ç–∫–µ–Ω–¥–∞.
    """
    def __init__(self, dependencies: Dict[str, Any]):
        super().__init__(dependencies)
        try:
            # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
            self.cache_manager: BackendGuildConfigManager = self.dependencies['guild_config_manager']
        except KeyError:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –í {self.__class__.__name__} –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å 'guild_config_manager'.")
            raise

    async def process(self, command_dto: GuildConfigSyncRequest) -> BaseResultDTO[Dict[str, Any]]:
        guild_id = command_dto.guild_id
        config_data = command_dto.config_data
        
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{command_dto.command}' –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∫—ç—à –±—ç–∫–µ–Ω–¥–∞...")

        try:
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º, –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –æ—Ç –±–æ—Ç–∞, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ –∫—ç—à –±—ç–∫–µ–Ω–¥–∞
            for field_name, data in config_data.items():
                await self.cache_manager.set_field(
                    guild_id=guild_id,
                    field_name=field_name,
                    data=data
                )
            
            self.logger.success(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à –±—ç–∫–µ–Ω–¥–∞.")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return BaseResultDTO[Dict[str, Any]](
                correlation_id=command_dto.correlation_id,
                trace_id=command_dto.trace_id,
                span_id=command_dto.span_id,
                success=True,
                message=f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
                data={"fields_processed": len(config_data)},
                client_id=command_dto.client_id
            )
        except Exception as e:
            self.logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ –∫—ç—à –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}: {e}")
            return BaseResultDTO[Dict[str, Any]](
                correlation_id=command_dto.correlation_id,
                success=False,
                message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}",
                client_id=command_dto.client_id
            )