# game_server/Logic/ApplicationLogic/SystemServices/handler/shard/admin_save_shard_handler.py

import logging
from typing import Dict, Any
from sqlalchemy.exc import SQLAlchemyError

from game_server.common_contracts.dtos.shard_dtos import SaveShardCommandDTO, ShardOperationResultDTO
from game_server.Logic.ApplicationLogic.SystemServices.handler.i_system_handler import ISystemServiceHandler
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager
from game_server.config.logging.logging_setup import app_logger as logger


class AdminSaveShardHandler(ISystemServiceHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è) –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–≤–æ–≥–æ —à–∞—Ä–¥–∞.
    –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É 'system:save_shard'.
    """
    def __init__(self, dependencies: Dict[str, Any]):
        super().__init__(dependencies)
        try:
            self.repo_manager: RepositoryManager = self.dependencies['repository_manager']
            self.shard_repo = self.repo_manager.game_shards
        except KeyError as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –í {self.__class__.__name__} –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {e}.")
            raise

    async def process(self, command_dto: SaveShardCommandDTO) -> ShardOperationResultDTO:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É Upsert –¥–ª—è —à–∞—Ä–¥–∞.
        """
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω –ª–æ–≥, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∂–∞—Ç—å –Ω–æ–≤–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{command_dto.command}' (system:save_shard) –¥–ª—è —à–∞—Ä–¥–∞ '{command_dto.shard_name}' (Guild ID: {command_dto.discord_guild_id}, CorrID: {command_dto.correlation_id})")
        self.logger.info(f"AdminSaveShardHandler: Client ID –∏–∑ command_dto: {command_dto.client_id}")

        try:
            shard_data_to_save = command_dto.model_dump(exclude={
                "command", "correlation_id", "version", "timestamp", "trace_id", "span_id", "client_id", "payload"
            }, by_alias=False)
            
            saved_shard = await self.shard_repo.upsert_shard(shard_data_to_save)

            return ShardOperationResultDTO(
                correlation_id=command_dto.correlation_id,
                success=True,
                message=f"–®–∞—Ä–¥ '{saved_shard.shard_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
                shard_data=saved_shard.to_dict() if hasattr(saved_shard, 'to_dict') else saved_shard,
                client_id=command_dto.client_id,
                trace_id=command_dto.trace_id,
                span_id=command_dto.span_id
            )

        except SQLAlchemyError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞—Ä–¥–∞ {command_dto.discord_guild_id}: {e}", exc_info=True)
            return ShardOperationResultDTO(
                correlation_id=command_dto.correlation_id,
                success=False,
                message=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}",
                shard_data=None,
                client_id=command_dto.client_id,
                trace_id=command_dto.trace_id,
                span_id=command_dto.span_id
            )
        except Exception as e:
            self.logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞—Ä–¥–∞: {e}")
            return ShardOperationResultDTO(
                correlation_id=command_dto.correlation_id,
                success=False,
                message=f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}",
                shard_data=None,
                client_id=command_dto.client_id,
                trace_id=command_dto.trace_id,
                span_id=command_dto.span_id
            )
