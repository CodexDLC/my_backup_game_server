# game_server/Logic/ApplicationLogic/SystemServices/handler/shard/admin_save_shard_handler.py

import logging
from typing import Dict, Any, Callable
import inject
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy.ext.asyncio import AsyncSession

# üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∏ —Ñ–∞–±—Ä–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é
from game_server.Logic.InfrastructureLogic.db_instance import AsyncSessionLocal
from game_server.Logic.InfrastructureLogic.app_post.utils.transactional_decorator import transactional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.game_shards.interfaces_game_shards import IGameShardRepository


from game_server.Logic.ApplicationLogic.SystemServices.handler.i_system_handler import ISystemServiceHandler
from game_server.contracts.dtos.shard.commands import SaveShardCommandDTO
from game_server.contracts.dtos.shard.results import ShardOperationResultDTO


class AdminSaveShardHandler(ISystemServiceHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è) –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–≤–æ–≥–æ —à–∞—Ä–¥–∞.
    –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @transactional.
    """
    # üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º session_factory –∏–∑ __init__
    @inject.autoparams('logger', 'game_shards_repo_factory')
    def __init__(self,
                 logger: logging.Logger,
                 game_shards_repo_factory: Callable[[AsyncSession], IGameShardRepository]
                 ):
        self._logger = logger
        self._game_shards_repo_factory = game_shards_repo_factory
        self._logger.info("AdminSaveShardHandler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    @property
    def logger(self) -> logging.Logger:
        return self._logger

    # üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∏ —É–±–∏—Ä–∞–µ–º —Ä—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
    @transactional(AsyncSessionLocal)
    async def process(self, session: AsyncSession, command_dto: SaveShardCommandDTO) -> ShardOperationResultDTO:
        self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ '{command_dto.command}' –¥–ª—è —à–∞—Ä–¥–∞ '{command_dto.shard_name}'.")

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
        game_shards_repo = self._game_shards_repo_factory(session)
        
        try:
            shard_data_to_save = command_dto.model_dump(exclude={
                "command", "correlation_id", "version", "timestamp", "trace_id", "span_id", "client_id", "payload"
            })
            
            saved_shard = await game_shards_repo.upsert_shard(shard_data_to_save)

            self.logger.info(f"–®–∞—Ä–¥ '{saved_shard.shard_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–∫–æ–º–º–∏—á–µ–Ω–∞.")

            return ShardOperationResultDTO(
                correlation_id=command_dto.correlation_id,
                success=True,
                message=f"–®–∞—Ä–¥ '{saved_shard.shard_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.",
                shard_data=saved_shard.to_dict(),
                client_id=command_dto.client_id,
                trace_id=command_dto.trace_id,
                span_id=command_dto.span_id
            )
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É. –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–µ.
            self.logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞—Ä–¥–∞: {e}")
            # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –µ–≥–æ –ø–æ–π–º–∞–ª –∏ —Å–¥–µ–ª–∞–ª rollback
            raise