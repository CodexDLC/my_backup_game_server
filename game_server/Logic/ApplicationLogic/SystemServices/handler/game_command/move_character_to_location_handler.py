# game_server/Logic/ApplicationLogic/SystemServices/handler/game_command/move_character_to_location_handler.py

import logging
import inject
from typing import Any, Dict #, Optional # Optional —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
from pydantic import ValidationError
from sqlalchemy.ext.asyncio import AsyncSession # –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω, –µ—Å–ª–∏ AsyncSession –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from game_server.Logic.ApplicationLogic.SystemServices.handler.i_system_handler import ISystemServiceHandler

# –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (MongoDB)
from game_server.Logic.InfrastructureLogic.app_mongo.repository_groups.character_cache.interfaces_character_cache_mongo import IMongoCharacterCacheRepository

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è MongoDB —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π/–æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
from game_server.Logic.InfrastructureLogic.app_mongo.utils.mongo_transactional_decorator import mongo_transactional

# DTOs
from game_server.contracts.dtos.game_commands.navigation_commands import MoveToLocationCommandDTO, MoveToLocationPayloadDTO, MoveToLocationResultDTO
from game_server.contracts.shared_models.base_commands_results import BaseResultDTO
from game_server.contracts.shared_models.base_responses import ErrorDetail # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

# üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –ö–õ–ê–°–°–ê LocationStateOrchestrator
from game_server.Logic.ApplicationLogic.shared_logic.LocationStateManagement.location_state_orchestrator import LocationStateOrchestrator


class MoveCharacterToLocationHandler(ISystemServiceHandler):
    """
    –°–µ—Ä–≤–µ—Ä–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é.
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ MongoDB.
    """
    @inject.autoparams()
    def __init__(
        self,
        logger: logging.Logger,
        mongo_character_cache_repo: IMongoCharacterCacheRepository,
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∂–µ–∫—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ LocationStateOrchestrator
        location_state_orchestrator: LocationStateOrchestrator
    ):
        self._logger = logger
        self._mongo_character_cache_repo = mongo_character_cache_repo
        self._location_state_orchestrator = location_state_orchestrator # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        self._logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    @property
    def logger(self) -> logging.Logger:
        return self._logger

    @mongo_transactional()
    async def process(self, command_dto: MoveToLocationCommandDTO) -> BaseResultDTO:
        self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ move_character_to_location: {command_dto.model_dump_json()}")

        character_id = None
        try:
            payload: MoveToLocationPayloadDTO = command_dto.payload
            character_id = payload.character_id
            target_location_id = payload.target_location_id

            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ MongoDB
            character_document = await self._mongo_character_cache_repo.get_character_by_id(character_id)
            if not character_document:
                self.logger.warning(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ ID {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ MongoDB –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è.")
                return MoveToLocationResultDTO(
                    correlation_id=command_dto.correlation_id,
                    trace_id=command_dto.trace_id,
                    span_id=command_dto.span_id,
                    success=False,
                    message=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å ID {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    error=ErrorDetail(code="CHARACTER_NOT_FOUND", message="Character not found."),
                    client_id=command_dto.client_id
                )

            old_location_data = character_document.get("location", {"current": {"location_id": None}, "previous": {"location_id": None}})
            old_current_location_id = old_location_data["current"].get("location_id")
            old_current_region_id = old_location_data["current"].get("region_id")

            if old_current_location_id == target_location_id:
                self.logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {character_id} —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–æ–∫–∞—Ü–∏–∏ {target_location_id}. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                current_summary = await self._location_state_orchestrator.get_location_summary(target_location_id)
                return MoveToLocationResultDTO(
                    correlation_id=command_dto.correlation_id,
                    trace_id=command_dto.trace_id,
                    span_id=command_dto.span_id,
                    success=True,
                    message=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–æ–∫–∞—Ü–∏–∏ {target_location_id}.",
                    data={
                        "ambient_footer_data": {
                            "players_in_location": current_summary.players_in_location,
                            "npcs_in_location": current_summary.npcs_in_location,
                            "last_update": current_summary.last_update
                        }
                    },
                    client_id=command_dto.client_id
                )

            location_summary = await self._location_state_orchestrator.update_player_location_state_and_get_summary(
                old_location_id=old_current_location_id,
                new_location_id=target_location_id,
                character_id=character_id
            )

            # 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è 'location' –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            new_location_data = {
                "current": {"location_id": target_location_id, "region_id": old_current_region_id},
                "previous": {"location_id": old_current_location_id, "region_id": old_current_region_id}
            }
            character_document["location"] = new_location_data

            # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ MongoDB
            await self._mongo_character_cache_repo.upsert_character(character_document)

            self.logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ ID {character_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ª–æ–∫–∞—Ü–∏—é {target_location_id} –≤ MongoDB.")

            # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            return MoveToLocationResultDTO(
                correlation_id=command_dto.correlation_id,
                trace_id=command_dto.trace_id,
                span_id=command_dto.span_id,
                success=True,
                message=f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –ª–æ–∫–∞—Ü–∏—é {target_location_id}.",
                data={
                    "ambient_footer_data": {
                        "players_in_location": location_summary.players_in_location,
                        "npcs_in_location": location_summary.npcs_in_location,
                        "last_update": location_summary.last_update
                    }
                },
                client_id=command_dto.client_id
            )

        except ValidationError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ DTO –≤ MoveCharacterToLocationHandler: {e.errors()}", exc_info=True)
            return MoveToLocationResultDTO(
                correlation_id=command_dto.correlation_id,
                trace_id=command_dto.trace_id,
                span_id=command_dto.span_id,
                success=False,
                message="–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
                error=ErrorDetail(code="VALIDATION_ERROR", message=str(e)),
                client_id=command_dto.client_id
            )
        except Exception as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ MoveCharacterToLocationHandler –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}: {e}", exc_info=True)
            return MoveToLocationResultDTO(
                correlation_id=command_dto.correlation_id,
                trace_id=command_dto.trace_id,
                span_id=command_dto.span_id,
                success=False,
                message=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}",
                error=ErrorDetail(code="SERVER_ERROR", message=str(e)),
                client_id=command_dto.client_id
            )