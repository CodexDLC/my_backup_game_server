# game_server/Logic/ApplicationLogic/SystemServices/system_services_orchestrator.py
# Version: 0.007 # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è —É—á–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö

import logging
from typing import Dict, Any, Optional, Type, Callable # –î–æ–±–∞–≤–ª–µ–Ω Callable
from pydantic import BaseModel

from game_server.contracts.shared_models.base_commands_results import BaseCommandDTO, BaseResultDTO
from game_server.config.settings.rabbitmq.rabbitmq_names import Exchanges, RoutingKeys
from game_server.Logic.InfrastructureLogic.messaging.i_message_bus import IMessageBus
from game_server.contracts.shared_models.base_responses import ErrorDetail, ResponseStatus
from game_server.contracts.shared_models.websocket_base_models import WebSocketMessage, WebSocketResponsePayload
from game_server.game_services.command_center.system_services_command import system_services_config
from game_server.Logic.ApplicationLogic.SystemServices.handler.i_system_handler import ISystemServiceHandler



import inject

class SystemServicesOrchestrator:
    """
    –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ SystemServices.
    –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç—Å—è —Å–∞–º–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º (—á–µ—Ä–µ–∑ @transactional).
    """
    @inject.autoparams()
    def __init__(
        self,
        logger: logging.Logger,
        message_bus: IMessageBus,
        # üî• –£–î–ê–õ–ï–ù–û: session_factory –Ω–µ –Ω—É–∂–µ–Ω –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ
    ):
        self.logger = logger
        self.message_bus = message_bus
        # self._session_factory = session_factory # üî• –£–î–ê–õ–ï–ù–û

        self.handlers: Dict[str, ISystemServiceHandler] = {
            command_name: inject.instance(info["handler"])
            for command_name, info in system_services_config.COMMAND_HANDLER_MAPPING.items()
        }
        self.logger.info(f"SystemServicesOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏.")

    async def process_command(self, validated_dto: BaseCommandDTO):
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥-–¥–∏—Å–ø–µ—Ç—á–µ—Ä. –ü–æ–ª—É—á–∞–µ—Ç DTO, –Ω–∞—Ö–æ–¥–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ.
        –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–∞–º–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º (—á–µ—Ä–µ–∑ @transactional).
        """
        command_type = validated_dto.command
        handler = self.handlers.get(command_type)
        if not handler:
            self.logger.error(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            error_result = BaseResultDTO(
                correlation_id=validated_dto.correlation_id,
                trace_id=validated_dto.trace_id,
                span_id=validated_dto.span_id,
                success=False,
                message=f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                error=ErrorDetail(code="HANDLER_NOT_FOUND", message="Command handler not found."),
                client_id=validated_dto.client_id
            )
            await self._publish_response(error_result)
            return

        self.logger.info(f"–î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã '{command_type}' –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É (CorrID: {validated_dto.correlation_id}).")
        
        result_dto: Optional[BaseResultDTO] = None 
        
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º process –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @transactional –Ω–∞ –º–µ—Ç–æ–¥–µ process –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Å–µ—Å—Å–∏–∏ –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        try:
            result_dto = await handler.process(command_dto=validated_dto) # <--- –í—ã–∑—ã–≤–∞–µ–º –±–µ–∑ —è–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
            self.logger.info(f"–ö–æ–º–∞–Ω–¥–∞ '{command_type}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–£—Å–ø–µ—Ö' if result_dto.success else '–û—à–∏–±–∫–∞'}.")
            
        except Exception as e:
            self.logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã '{command_type}' (CorrID: {validated_dto.correlation_id}).")
            
            error_result = BaseResultDTO(
                correlation_id=validated_dto.correlation_id,
                trace_id=validated_dto.trace_id,
                span_id=validated_dto.span_id,
                success=False,
                message=f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã '{command_type}': {e}",
                error=ErrorDetail(code="SERVER_ERROR", message=str(e)),
                client_id=validated_dto.client_id
            )
            result_dto = error_result

        finally:
            if result_dto:
                await self._publish_response(result_dto)

    async def _publish_response(self, result_dto: BaseResultDTO):
        """
        –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –ú–ï–¢–û–î –û–¢–ü–†–ê–í–ö–ò –û–¢–í–ï–¢–ê.
        –§–æ—Ä–º–∏—Ä—É–µ—Ç WebSocketMessage –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ–≥–æ –≤ Events.
        """
        client_id_for_delivery = getattr(result_dto, 'client_id', None)
        self.logger.info(f"SystemServicesOrchestrator: client_id_for_delivery –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π: {client_id_for_delivery}")

        if not client_id_for_delivery:
            self.logger.warning(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è CorrID {result_dto.correlation_id} –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç client_id.")
            return
        
        response_data_for_ws: Optional[Dict[str, Any]] = None
        if result_dto.data is not None:
            if isinstance(result_dto.data, list):
                response_data_for_ws = {"entities": [item.model_dump() for item in result_dto.data if isinstance(item, BaseModel)]}
            elif isinstance(result_dto.data, BaseModel):
                response_data_for_ws = result_dto.data.model_dump()
            elif isinstance(result_dto.data, dict):
                response_data_for_ws = result_dto.data
            else:
                self.logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø result_dto.data –¥–ª—è WebSocketResponsePayload: {type(result_dto.data)}. –ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.")
                response_data_for_ws = {}

        response_payload = WebSocketResponsePayload(
            request_id=result_dto.correlation_id,
            status=ResponseStatus.SUCCESS if result_dto.success else ResponseStatus.FAILURE,
            message=result_dto.message,
            data=response_data_for_ws,
            error=result_dto.error
        )
        self.logger.debug(f"DEBUG: SystemServicesOrchestrator: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω response_payload: {response_payload.model_dump_json()}")

        websocket_message = WebSocketMessage(
            type="RESPONSE",
            correlation_id=result_dto.correlation_id,
            trace_id=result_dto.trace_id,
            span_id=result_dto.span_id,
            client_id=client_id_for_delivery,
            payload=response_payload,
        )
        self.logger.debug(f"DEBUG: SystemServicesOrchestrator: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω websocket_message: {websocket_message.model_dump_json()}")

        full_message_to_publish = websocket_message.model_dump(mode='json')
        self.logger.debug(f"DEBUG: SystemServicesOrchestrator: –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (JSON): {full_message_to_publish}")


        domain = getattr(result_dto, 'domain', 'system')
        action = getattr(result_dto, 'action', 'default')
        status_str = "success" if result_dto.success else "failure"
        routing_key = f"{RoutingKeys.RESPONSE_PREFIX}.{domain}.{action}.{status_str}"

        self.logger.debug(f"DEBUG: SystemServicesOrchestrator: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ exchange '{Exchanges.EVENTS}' —Å routing_key '{routing_key}'.")
        await self.message_bus.publish(
            exchange_name=Exchanges.EVENTS,
            routing_key=routing_key,
            message=full_message_to_publish
        )
        self.logger.info(f"–û—Ç–≤–µ—Ç –¥–ª—è CorrID {result_dto.correlation_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {Exchanges.EVENTS} —Å –∫–ª—é—á–æ–º '{routing_key}'.")