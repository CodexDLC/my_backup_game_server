# game_server\Logic\ApplicationLogic\auth_service\ShardManagement\Handlers\assign_shard_handler.py

import logging
import datetime
import uuid # –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è UUID
from typing import Dict, Any, Optional

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ DTO –∏ WebSocket-–º–æ–¥–µ–ª–∏
from game_server.common_contracts.dtos.shard_dtos import NotifyAdminsCommandDTO
from game_server.common_contracts.dtos.base_dtos import BaseResultDTO, BaseCommandDTO
from game_server.common_contracts.shared_models.api_contracts import ErrorDetail, WebSocketMessage, WebSocketSystemCommandToClientPayload


from .i_shard_management_handler import IShardManagementHandler
from .. import shard_helpers
from .cleanup_inactive_players_handler import CleanupInactivePlayersHandler

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from game_server.Logic.InfrastructureLogic.messaging.rabbitmq_message_bus import RabbitMQMessageBus
from game_server.config.settings.rabbitmq.rabbitmq_names import Exchanges


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocketMessage
async def _send_system_notification_to_gateway(
    message_bus: RabbitMQMessageBus,
    notification_command_dto: NotifyAdminsCommandDTO, # –¢–µ–ø–µ—Ä—å —ç—Ç–æ NotifyAdminsCommandDTO
    logger: logging.Logger,
    original_correlation_id: uuid.UUID, # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π correlation_id –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–≥—Ä–æ–∫–∞/–∫–ª–∏–µ–Ω—Ç–∞
    original_trace_id: uuid.UUID,      # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π trace_id
    original_span_id: Optional[uuid.UUID] # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π span_id
):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç WebSocketMessage —Å WebSocketSystemCommandToClientPayload
    –≤ Gateway –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∏—Ä—É–µ–º WebSocketSystemCommandToClientPayload
    system_command_payload = WebSocketSystemCommandToClientPayload(
        command_id=notification_command_dto.correlation_id, # command_id –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        command_name=notification_command_dto.command,       # –ò–º—è –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "system:notify_admins")
        command_data={
            "reason": notification_command_dto.reason,
            "message": notification_command_dto.message,
            "timestamp": notification_command_dto.timestamp.isoformat()
        }
    )

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º WebSocketMessage –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    websocket_message = WebSocketMessage(
        type="SYSTEM_COMMAND", # –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        correlation_id=original_correlation_id, # –°–≤—è–∑—ã–≤–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º, –µ—Å–ª–∏ –µ—Å—Ç—å
        trace_id=original_trace_id,
        span_id=original_span_id,
        payload=system_command_payload,
        target_audience="ADMIN_PANEL", # –ò–ª–∏ "DISCORD_BOT", –∏–ª–∏ "ALL" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–æ–º—É –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        player_id=None # –≠—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É player_id
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Exchanges.EVENTS, —á—Ç–æ–±—ã Gateway –ø–æ–¥—Ö–≤–∞—Ç–∏–ª
        routing_key = "system.notification.admins" # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π routing key –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        await message_bus.publish(
            exchange_name=Exchanges.EVENTS,
            routing_key=routing_key,
            message=websocket_message.model_dump(mode='json') # –ü—É–±–ª–∏–∫—É–µ–º –∫–∞–∫ Python dict (–±—É–¥–µ—Ç —É–ø–∞–∫–æ–≤–∞–Ω –≤ MsgPack)
        )
        logger.info(f"–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{notification_command_dto.command}' (CmdID: {notification_command_dto.correlation_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. (Orig. Corr ID: {original_correlation_id})")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{notification_command_dto.command}' (CmdID: {notification_command_dto.correlation_id}): {e}", exc_info=True)


class AssignShardHandler(IShardManagementHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –ª–æ–≥–∏–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ —à–∞—Ä–¥.
    –í–∫–ª—é—á–∞–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –º–µ—Å—Ç.
    """
    def __init__(self, dependencies: Dict[str, Any]):
        super().__init__(dependencies)
        try:
            self.repo_manager = self.dependencies['repository_manager']
            self.shard_count_manager = self.dependencies['shard_count_manager']
            self.message_bus: RabbitMQMessageBus = self.dependencies['message_bus']
            self.cleanup_handler = CleanupInactivePlayersHandler(dependencies)
        except KeyError as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –í {self.__class__.__name__} –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {e}.")
            raise

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ process —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç correlation_id, trace_id, span_id
    async def process(
        self,
        account_id: int,
        correlation_id: uuid.UUID, # –ò–∑ BaseRequest/BaseCommandDTO
        trace_id: uuid.UUID,       # –ò–∑ BaseRequest/BaseCommandDTO
        span_id: Optional[uuid.UUID] = None, # –ò–∑ BaseRequest/BaseCommandDTO
        preferred_shard_id: str | None = None
    ) -> BaseResultDTO[Dict[str, Any]]: # üî• –í–æ–∑–≤—Ä–∞—â–∞–µ–º BaseResultDTO
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—â–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —à–∞—Ä–¥–∞.
        """
        self.logger.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —à–∞—Ä–¥–∞ –¥–ª—è account_id: {account_id}. Preferred: {preferred_shard_id}. (Correlation ID: {correlation_id})")

        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é "–ø—Ä–æ–ø–∏—Å–∫—É"
        game_data = await self.repo_manager.account_game_data.get_by_account_id(account_id)
        if game_data and game_data.shard_id:
            self.logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —à–∞—Ä–¥—É {game_data.shard_id}. (Correlation ID: {correlation_id})")
            return BaseResultDTO[Dict[str, Any]](
                correlation_id=correlation_id,
                trace_id=trace_id,
                span_id=span_id,
                success=True,
                message=f"–ò–≥—Ä–æ–∫ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —à–∞—Ä–¥—É {game_data.shard_id}.",
                data={"shard_id": game_data.shard_id, "account_id": account_id, "is_new_assignment": False}
            )

        # –®–∞–≥ 2: –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1 - –ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ —à–∞—Ä–¥–∞
        best_shard_id = await shard_helpers.find_best_shard(
            self.repo_manager, self.shard_count_manager, preferred_shard_id
        )
        
        # –®–∞–≥ 3: –ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —à–∞—Ä–¥–æ–≤ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        if not best_shard_id:
            self.logger.warning(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö —à–∞—Ä–¥–æ–≤ –Ω–µ—Ç. –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤... (Correlation ID: {correlation_id})")
            cleanup_report = await self.cleanup_handler.process(
                correlation_id=correlation_id,
                trace_id=trace_id,
                span_id=uuid.uuid4(), # –ù–æ–≤—ã–π span –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏
                reason="NO_AVAILABLE_SHARDS" # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É
            )
            
            # –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—á–∏—Å—Ç–∫–∏
            if cleanup_report and cleanup_report.data and cleanup_report.data.get('total_cleaned_count', 0) > 0:
                self.logger.info(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç: {cleanup_report.data.get('total_cleaned_count')}. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —à–∞—Ä–¥–∞... (Correlation ID: {correlation_id})")
                best_shard_id = await shard_helpers.find_best_shard(
                    self.repo_manager, self.shard_count_manager, preferred_shard_id=None
                )
            else:
                self.logger.error(f"–û—á–∏—Å—Ç–∫–∞ –Ω–µ –æ—Å–≤–æ–±–æ–¥–∏–ª–∞ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞. –í—Å–µ —à–∞—Ä–¥—ã –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏! (Correlation ID: {correlation_id})")
                
                # –°–æ–∑–¥–∞–µ–º DTO –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤
                notification_dto = NotifyAdminsCommandDTO(
                    command="system:notify_admins_shards_full",
                    correlation_id=uuid.uuid4(), # –°–≤–æ–π correlation_id –¥–ª—è —ç—Ç–æ–π —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
                    trace_id=trace_id,          # –°–≤—è–∑—ã–≤–∞–µ–º —Å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π
                    span_id=uuid.uuid4(),       # –ù–æ–≤—ã–π span –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    reason="SHARDS_FULL",
                    message="–í—Å–µ —à–∞—Ä–¥—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π."
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                await _send_system_notification_to_gateway(
                    self.message_bus, notification_dto, self.logger,
                    original_correlation_id=correlation_id,
                    original_trace_id=trace_id,
                    original_span_id=span_id
                )
        
        # –®–∞–≥ 5: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –æ—à–∏–±–∫–∏
        if best_shard_id:
            await shard_helpers.finalize_assignment(
                self.repo_manager, self.shard_count_manager, account_id, best_shard_id
            )
            self.logger.info(f"–ò–≥—Ä–æ–∫ {account_id} —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —à–∞—Ä–¥ {best_shard_id}. (Correlation ID: {correlation_id})")
            return BaseResultDTO[Dict[str, Any]](
                correlation_id=correlation_id,
                trace_id=trace_id,
                span_id=span_id,
                success=True,
                message=f"–ò–≥—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —à–∞—Ä–¥ {best_shard_id}.",
                data={"shard_id": best_shard_id, "account_id": account_id, "is_new_assignment": True}
            )
        
        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —à–∞—Ä–¥ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {account_id} –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—á–∏—Å—Ç–∫–∏. (Correlation ID: {correlation_id})")
        return BaseResultDTO[Dict[str, Any]](
            correlation_id=correlation_id,
            trace_id=trace_id,
            span_id=span_id,
            success=False,
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —à–∞—Ä–¥.",
            error=ErrorDetail(code="SHARD_ASSIGNMENT_FAILED_NO_SPACE", message="–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —à–∞—Ä–¥–æ–≤ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.") # –î–æ–±–∞–≤–ª—è–µ–º ErrorDetail
        )