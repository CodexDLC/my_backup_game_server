# game_server/Logic/ApplicationLogic/auth_service/Handlers/discord_shard_login_handler.py

from typing import Dict, Any

from game_server.common_contracts.shared_models.api_contracts import ErrorDetail

from .i_auth_handler import IAuthHandler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.config.logging.logging_setup import app_logger as logger

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ DTO
from game_server.common_contracts.dtos.auth_dtos import DiscordShardLoginCommandDTO, SessionResultData, SessionResultDTO, HubRoutingResultDTO # –¢–µ–ø–µ—Ä—å ShardLoginResult —ç—Ç–æ HubRoutingResultDTO



class DiscordShardLoginHandler(IAuthHandler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –†–æ—É—Ç–∞ ‚Ññ2: —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—Ö–æ–¥—è—â–µ–≥–æ—Å—è –Ω–∞ —à–∞—Ä–¥–µ.
    """
    def __init__(self, dependencies: Dict[str, Any]):
        super().__init__(dependencies)
        self.logger = logger
        try:
            self.repo_manager = dependencies['repository_manager']
            self.session_manager = dependencies['session_manager'] # –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Redis
            self.identifiers_service = dependencies['identifiers_service']
        except KeyError as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –í {self.__class__.__name__} –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å {e}.")
            raise RuntimeError(f"Missing mandatory dependency in {self.__class__.__name__}: {e}")

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: dto —Ç–µ–ø–µ—Ä—å DiscordShardLoginCommandDTO, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HubRoutingResultDTO
    async def process(self, dto: DiscordShardLoginCommandDTO) -> HubRoutingResultDTO:
        self.logger.info(f"–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è discord_id: {dto.discord_user_id} (Correlation ID: {dto.correlation_id})")

        try:
            # –®–∞–≥ –ê: –ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            account_id = await self.identifiers_service.get_account_id_by_linked_platform(
                platform_name='discord',
                platform_id=dto.discord_user_id
            )
            if not account_id:
                msg = f"–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å —à–∞—Ä–¥–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: {dto.discord_user_id}"
                self.logger.warning(msg)
                # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º HubRoutingResultDTO —Å success=False –∏ ErrorDetail
                return HubRoutingResultDTO(
                    correlation_id=dto.correlation_id,
                    trace_id=dto.trace_id,
                    span_id=dto.span_id,
                    success=False,
                    message=msg,
                    error=ErrorDetail(code="ACCOUNT_NOT_FOUND", message=msg)
                )

            # –®–∞–≥ –ë: –ü—Ä–æ–≤–µ—Ä–∫–∞ "–ø—Ä–æ–ø–∏—Å–∫–∏" (–≤–∞–ª–∏–¥–∞—Ü–∏—è —à–∞—Ä–¥–∞)
            game_data = await self.repo_manager.account_game_data.get_by_account_id(account_id)

            # –®–∞–≥ –í: –£—Å–ª–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è "–±–µ–∑–¥–æ–º–Ω–æ–≥–æ" –∏–≥—Ä–æ–∫–∞
            if not game_data or not game_data.shard_id:
                msg = f"–ò–≥—Ä–æ–∫ {account_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —à–∞—Ä–¥—É. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –•–∞–±."
                self.logger.warning(msg)
                self.logger.info(f"–ö–û–ú–ê–ù–î–ê –ë–û–¢–£: 'notify_re_login_via_hub' –¥–ª—è discord_id {dto.discord_user_id} (Correlation ID: {dto.correlation_id})")
                # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º HubRoutingResultDTO —Å success=False –∏ ErrorDetail
                return HubRoutingResultDTO(
                    correlation_id=dto.correlation_id,
                    trace_id=dto.trace_id,
                    span_id=dto.span_id,
                    success=False,
                    message=msg,
                    error=ErrorDetail(code="RE_HUB_LOGIN_REQUIRED", message=msg)
                )

            # –®–∞–≥ –ì: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ —Ç–æ–∫–µ–Ω–∞
            self.logger.info(f"–ò–≥—Ä–æ–∫ {account_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É —à–∞—Ä–¥–∞. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏... (Correlation ID: {dto.correlation_id})")
            auth_token = await self.session_manager.create_player_session(player_id=str(account_id))

            # –®–∞–≥ –î: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º SessionResultDTO, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å —Å–∞–º BaseResultDTO
            return SessionResultDTO(
                correlation_id=dto.correlation_id,
                trace_id=dto.trace_id,
                span_id=dto.span_id,
                success=True,
                message="–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.",
                data=SessionResultData(auth_token=auth_token) # –í–∫–ª–∞–¥—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–µ 'data'
            )

        except Exception as e:
            self.logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è discord_id {dto.discord_user_id} (Correlation ID: {dto.correlation_id})")
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º HubRoutingResultDTO —Å success=False –∏ ErrorDetail
            return HubRoutingResultDTO(
                correlation_id=dto.correlation_id,
                trace_id=dto.trace_id,
                span_id=dto.span_id,
                success=False,
                message=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}",
                error=ErrorDetail(code="INTERNAL_SERVER_ERROR", message=str(e))
            )