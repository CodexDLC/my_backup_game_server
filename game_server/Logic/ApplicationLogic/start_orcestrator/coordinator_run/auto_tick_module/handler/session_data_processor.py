# -*- coding: utf-8 -*-
from typing import List, Dict, Any # –î–æ–±–∞–≤–ª–µ–Ω–∞ Any
from datetime import datetime, timezone


# from sqlalchemy.ext.asyncio import AsyncSession # –£–î–ê–õ–ï–ù–û
# from sqlalchemy import select, update, exists # –£–î–ê–õ–ï–ù–û

# üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–ª–∞–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from game_server.config.provider import config
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger
from game_server.database.models.models import AutoSession # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç RepositoryManager
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager
# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è app_cache_managers (–¥–ª—è –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
from game_server.Logic.InfrastructureLogic.app_cache.app_cache_initializer import get_initialized_app_cache_managers
# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ AutoSessionRepository
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.auto_session.interfaces_auto_session import IAutoSessionRepository


class SessionDataProcessor:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Å—Å–∏–π, —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö ID –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ RepositoryManager –∏ –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä—ã.
    """
    def __init__(self, repository_manager: RepositoryManager, app_cache_managers: Dict[str, Any]): # –ò–ó–ú–ï–ù–ï–ù–û: –ø—Ä–∏–Ω–∏–º–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.repository_manager = repository_manager
        self.app_cache_managers = app_cache_managers
        self.logger = logger
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π AutoSession —á–µ—Ä–µ–∑ RepositoryManager
        self.auto_session_repo: IAutoSessionRepository = self.repository_manager.auto_sessions # –î–û–ë–ê–í–õ–ï–ù–û

        self.logger.info("‚úÖ SessionDataProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def has_ready_sessions(self) -> bool: # –ò–ó–ú–ï–ù–ï–ù–û: —É–¥–∞–ª–µ–Ω db_session
        """
        –õ–µ–≥–∫–æ–≤–µ—Å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≥–æ—Ç–æ–≤–∞—è –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Å—Å–∏—è.
        """
        self.logger.info("SessionDataProcessor: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≥–æ—Ç–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π...")
        now_utc = datetime.now(timezone.utc)
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ auto_session_repo –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ get_ready_sessions() –∏–ª–∏ check_for_ready_sessions()
        # –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool
        
        # –ï—Å–ª–∏ get_ready_sessions() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –º–æ–∂–Ω–æ —Ç–∞–∫:
        ready_sessions = await self.auto_session_repo.get_ready_sessions()
        result = len(ready_sessions) > 0 # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏

        if result:
            self.logger.info("SessionDataProcessor: –ù–∞–π–¥–µ–Ω—ã –≥–æ—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏.")
        else:
            self.logger.info("SessionDataProcessor: –ì–æ—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return result

    async def collect_and_categorize_sessions(self) -> Dict[str, List[int]]: # –ò–ó–ú–ï–ù–ï–ù–û: —É–¥–∞–ª–µ–Ω db_session
        """
        –°–æ–±–∏—Ä–∞–µ—Ç ID –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—Å–µ—Ö –≥–æ—Ç–æ–≤—ã—Ö –∫ —Ç–∏–∫—É —Å–µ—Å—Å–∏–π, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        """
        self.logger.info("SessionDataProcessor: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π...")
        
        categorized_tasks: Dict[str, List[int]] = {
            config.constants.redis.REDIS_TASK_QUEUE_EXPLORATION: [],
            config.constants.redis.REDIS_TASK_QUEUE_TRAINING: [],
            # config.constants.redis.REDIS_TASK_QUEUE_CRAFTING: [], # –ï—Å–ª–∏ –µ—Å—Ç—å
        }

        character_ids_to_update: List[int] = []

        try:
            now_utc = datetime.now(timezone.utc)
            target_categories = [
                config.constants.redis.REDIS_TASK_QUEUE_EXPLORATION, 
                config.constants.redis.REDIS_TASK_QUEUE_TRAINING
                # config.constants.redis.REDIS_TASK_QUEUE_CRAFTING, # –ï—Å–ª–∏ –µ—Å—Ç—å
            ]
            
            # –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Å–±–æ—Ä–∞ —Å–µ—Å—Å–∏–π
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ get_ready_sessions() –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å now_utc –∏ target_categories
            # –ò–ª–∏ –∂–µ, —á—Ç–æ –æ–Ω –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ, –∏ –º—ã —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ category
            sessions_to_process = await self.auto_session_repo.get_ready_sessions()
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            sessions_to_process = [
                (s.character_id, s.active_category) for s in sessions_to_process
                if s.next_tick_at <= now_utc and s.active_category in target_categories
            ]


            if not sessions_to_process:
                self.logger.info("SessionDataProcessor: –ù–µ—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.")
                return {}

            self.logger.info(f"SessionDataProcessor: –°–æ–±—Ä–∞–Ω–æ {len(sessions_to_process)} —Å–µ—Å—Å–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            
            for char_id, category in sessions_to_process:
                if category in categorized_tasks:
                    categorized_tasks[category].append(char_id)
                    character_ids_to_update.append(char_id)
                else:
                    self.logger.warning(f"SessionDataProcessor: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Å—Å–∏—è —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '{category}' –¥–ª—è char_id '{char_id}'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

            if not character_ids_to_update:
                self.logger.info("SessionDataProcessor: –ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                return {}

            # –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–∏–∫–∞
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ update_character_tick_time –ø—Ä–∏–Ω–∏–º–∞–µ—Ç character_id –∏ interval
            # –ò–ª–∏ –º–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (batch_update_tick_time)
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ character_id, –æ–±–Ω–æ–≤–ª—è–µ–º tick_time
            # update_character_tick_time –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ explicit commit
            tick_interval_minutes = config.settings.runtime.TICK_INTERVAL_MINUTES
            
            # –ù–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
            # –ù–∞–ø—Ä–∏–º–µ—Ä: await self.auto_session_repo.batch_update_tick_time(character_ids_to_update, tick_interval_minutes)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç batch-–º–µ—Ç–æ–¥–∞, —Ç–æ –ø–æ –æ–¥–Ω–æ–º—É:
            updated_count = 0
            for char_id in character_ids_to_update:
                try:
                    # update_character_tick_time –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –æ–∂–∏–¥–∞–µ—Ç char_id –∏ interval_minutes
                    updated_session = await self.auto_session_repo.update_character_tick_time(
                        character_id=char_id,
                        interval_minutes=tick_interval_minutes
                    )
                    if updated_session:
                        updated_count += 1
                except Exception as update_e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–∞ –¥–ª—è char_id {char_id}: {update_e}", exc_info=True)

            # –£–î–ê–õ–ï–ù–û: await db_session.execute(update_stmt)
            # –£–î–ê–õ–ï–ù–û: await db_session.commit()
            
            self.logger.info(f"SessionDataProcessor: –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Ç–∏–∫–∞ –¥–ª—è {updated_count} —Å–µ—Å—Å–∏–π.")
            
            return {
                category: ids for category, ids in categorized_tasks.items() if ids
            }

        except Exception as e:
            # –£–î–ê–õ–ï–ù–û: await db_session.rollback()
            self.logger.critical(f"SessionDataProcessor: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–µ—Å—Å–∏–π: {e}", exc_info=True)
            raise # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ –≤ Coordinator/ARQ Job