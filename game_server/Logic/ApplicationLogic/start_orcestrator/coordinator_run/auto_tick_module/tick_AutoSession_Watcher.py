# game_server/Logic/InfrastructureLogic/arq_worker/arq_jobs.py

import asyncio
import logging # Re-import logger if it's directly used and not passed
from typing import Dict, List, Any

# üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–ª–∞–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from game_server.config.provider import config

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ARQ Job
from game_server.Logic.ApplicationLogic.start_orcestrator.coordinator_run.auto_tick_module.handler.session_data_processor import SessionDataProcessor

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º RabbitMQMessageBus –≤–º–µ—Å—Ç–æ RedisMessageBus
from game_server.Logic.InfrastructureLogic.messaging.rabbitmq_message_bus import RabbitMQMessageBus
from game_server.Logic.InfrastructureLogic.messaging.message_format import create_message

# –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –¥–ª—è logger, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
from game_server.config.logging.logging_setup import app_logger as logger

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç RepositoryManager (–¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ SessionDataProcessor)
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –¥–ª—è app_cache_managers (–¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ SessionDataProcessor)
from typing import Dict, Any # Already imported, but good to ensure

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from game_server.config.constants.coordinator import (    
    COMMAND_PROCESS_AUTO_EXPLORING,
    COMMAND_PROCESS_AUTO_LEVELING
)
from game_server.config.constants.redis_key import ( # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∑–¥–µ—Å—å
    REDIS_TASK_QUEUE_EXPLORATION,
    REDIS_TASK_QUEUE_TRAINING
)
from game_server.config.settings.rabbitmq.rabbitmq_names import Exchanges


async def collect_and_dispatch_sessions(
    repository_manager: RepositoryManager,
    message_bus: RabbitMQMessageBus, # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–∏–ø–∏–∑–∞—Ü–∏—è –Ω–∞ RabbitMQMessageBus
    app_cache_managers: Dict[str, Any]
):
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–±–æ—Ä–∞ –≥–æ—Ç–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π.
    –≠—Ç–∞ ARQ-–∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥).
    """
    logger.info("ARQ Job 'collect_and_dispatch_sessions': –ó–∞–ø—É—Å–∫...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SessionDataProcessor —Å RepositoryManager –∏ app_cache_managers
    processor = SessionDataProcessor(
        repository_manager=repository_manager,
        app_cache_managers=app_cache_managers,
        # –ï—Å–ª–∏ SessionDataProcessor –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ message_bus, –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å
        # message_bus=message_bus
    )

    try:
        if await processor.has_ready_sessions():
            categorized_tasks = await processor.collect_and_categorize_sessions()

            if categorized_tasks:
                logger.info(f"ARQ Job: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {list(categorized_tasks.keys())}")
                
                # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ---
                exploration_ids = categorized_tasks.get(REDIS_TASK_QUEUE_EXPLORATION)
                if exploration_ids:
                    logger.info(f"ARQ Job: –û—Ç–ø—Ä–∞–≤–∫–∞ {len(exploration_ids)} –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.")
                    command_payload = {
                        "command": COMMAND_PROCESS_AUTO_EXPLORING, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∫–æ–º–∞–Ω–¥—ã
                        "character_ids": exploration_ids
                    }
                    message = create_message(command_payload)
                    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ RabbitMQ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º exchange –∏ routing_key
                    # Routing key –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∏–≤—è–∑–∫–µ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
                    await message_bus.publish(
                        Exchanges.COMMANDS, # –ò–º—è –æ–±–º–µ–Ω–Ω–∏–∫–∞: "commands.exchange"
                        f"system.command.coordinator.{COMMAND_PROCESS_AUTO_EXPLORING.lower()}", # –î–µ—Ç–∞–ª—å–Ω—ã–π routing_key
                        message
                    )
                else:
                    logger.debug("ARQ Job: –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")


                # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É/–ø—Ä–æ–∫–∞—á–∫—É ---
                training_ids = categorized_tasks.get(REDIS_TASK_QUEUE_TRAINING)
                if training_ids:
                    logger.info(f"ARQ Job: –û—Ç–ø—Ä–∞–≤–∫–∞ {len(training_ids)} –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É/–ø—Ä–æ–∫–∞—á–∫—É.")
                    command_payload = {
                        "command": COMMAND_PROCESS_AUTO_LEVELING, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∫–æ–º–∞–Ω–¥—ã
                        "character_ids": training_ids
                    }
                    message = create_message(command_payload)
                    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ RabbitMQ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º exchange –∏ routing_key
                    await message_bus.publish(
                        Exchanges.COMMANDS, # –ò–º—è –æ–±–º–µ–Ω–Ω–∏–∫–∞: "commands.exchange"
                        f"system.command.coordinator.{COMMAND_PROCESS_AUTO_LEVELING.lower()}", # –î–µ—Ç–∞–ª—å–Ω—ã–π routing_key
                        message
                    )
                else:
                    logger.debug("ARQ Job: –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É/–ø—Ä–æ–∫–∞—á–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

            else:
                logger.info("ARQ Job: –ì–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            logger.info("ARQ Job: –ì–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
    except Exception as e:
        logger.critical(f"ARQ Job 'collect_and_dispatch_sessions': –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    
    finally:
        logger.info("ARQ Job 'collect_and_dispatch_sessions': –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")
