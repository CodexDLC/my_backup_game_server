# -*- coding: utf-8 -*-
from typing import Dict, List, Any # –î–æ–±–∞–≤–ª–µ–Ω–∞ Any –¥–ª—è app_cache_managers
# from sqlalchemy.ext.asyncio import AsyncSession # –£–î–ê–õ–ï–ù–û

# üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–ª–∞–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from game_server.config.provider import config

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from game_server.Logic.ApplicationLogic.start_orcestrator.coordinator_run.auto_tick_module.handler.session_data_processor import SessionDataProcessor
from game_server.Logic.InfrastructureLogic.messaging.message_bus import RedisMessageBus
from game_server.Logic.InfrastructureLogic.messaging.message_format import create_message
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç RepositoryManager
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager
# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è app_cache_managers, –µ—Å–ª–∏ SessionDataProcessor –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
from game_server.Logic.InfrastructureLogic.app_cache.app_cache_initializer import get_initialized_app_cache_managers


async def collect_and_dispatch_sessions(
    repository_manager: RepositoryManager, # –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç RepositoryManager
    message_bus: RedisMessageBus,
    app_cache_managers: Dict[str, Any] # –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–∏–Ω–∏–º–∞–µ–º app_cache_managers
):
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–±–æ—Ä–∞ –≥–æ—Ç–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π.
    """
    logger.info("ARQ Job 'collect_and_dispatch_sessions': –ó–∞–ø—É—Å–∫...")
    
    # –ò–ó–ú–ï–ù–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SessionDataProcessor —Å RepositoryManager –∏ app_cache_managers
    processor = SessionDataProcessor(
        repository_manager=repository_manager,
        app_cache_managers=app_cache_managers
    )

    try:
        # –ò–ó–ú–ï–ù–ï–ù–û: –í—ã–∑–æ–≤—ã –º–µ—Ç–æ–¥–æ–≤ processor —Ç–µ–ø–µ—Ä—å –±–µ–∑ db_session
        if await processor.has_ready_sessions():
            
            categorized_tasks = await processor.collect_and_categorize_sessions()

            if categorized_tasks:
                logger.info(f"ARQ Job: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {list(categorized_tasks.keys())}")
                
                # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ---
                exploration_ids = categorized_tasks.get(config.constants.redis.REDIS_TASK_QUEUE_EXPLORATION)
                if exploration_ids:
                    logger.info(f"ARQ Job: –û—Ç–ø—Ä–∞–≤–∫–∞ {len(exploration_ids)} –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.")
                    command_payload = {
                        "command": config.constants.coordinator.COMMAND_PROCESS_AUTO_EXPLORING,
                        "character_ids": exploration_ids
                    }
                    message = create_message(command_payload)
                    await message_bus.publish(config.constants.coordinator.COORDINATOR_COMMAND_QUEUE, message)
                else:
                    logger.debug("ARQ Job: –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")


                # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É/–ø—Ä–æ–∫–∞—á–∫—É ---
                training_ids = categorized_tasks.get(config.constants.redis.REDIS_TASK_QUEUE_TRAINING)
                if training_ids:
                    logger.info(f"ARQ Job: –û—Ç–ø—Ä–∞–≤–∫–∞ {len(training_ids)} –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É/–ø—Ä–æ–∫–∞—á–∫—É.")
                    command_payload = {
                        "command": config.constants.coordinator.COMMAND_PROCESS_AUTO_LEVELING,
                        "character_ids": training_ids
                    }
                    message = create_message(command_payload)
                    await message_bus.publish(config.constants.coordinator.COORDINATOR_COMMAND_QUEUE, message)
                else:
                    logger.debug("ARQ Job: –ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ –∞–≤—Ç–æ-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É/–ø—Ä–æ–∫–∞—á–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")

            else:
                logger.info("ARQ Job: –ì–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            logger.info("ARQ Job: –ì–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Å—Å–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
    except Exception as e:
        logger.critical(f"ARQ Job 'collect_and_dispatch_sessions': –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    
    finally:
        logger.info("ARQ Job 'collect_and_dispatch_sessions': –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω.")