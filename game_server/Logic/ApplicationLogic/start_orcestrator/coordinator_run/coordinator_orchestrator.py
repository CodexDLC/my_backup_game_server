# game_server/Logic/ApplicationLogic/start_orcestrator/coordinator_run/coordinator_orchestrator.py

from typing import Dict, Any, Type
from game_server.Logic.ApplicationLogic.start_orcestrator.coordinator_run.coordinator_handler.auto_tick_handler import AutoLevelingHandler
from game_server.config.logging.logging_setup import app_logger
from game_server.Logic.InfrastructureLogic.messaging.i_message_bus import IMessageBus

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –∏ –≤—Å–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from .coordinator_handler.base_handler import ICommandHandler
from .coordinator_handler.auto_exploring_handler import AutoExploringHandler

# –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –∏–º–ø–æ—Ä—Ç—ã –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å

class CoordinatorOrchestrator:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–Ω—Ç–∞–π–º-–∫–æ–º–∞–Ω–¥. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –æ—Ç Message Bus
    –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º (—Ö–µ–Ω–¥–ª–µ—Ä–∞–º).
    """

    def __init__(self, dependencies: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –≤—Å–µ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
        
        Args:
            dependencies (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å —É–∂–µ –≥–æ—Ç–æ–≤—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏,
                                          —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –≤ service_builders.py.
        """
        self.logger = dependencies.get("logger", app_logger)
        self.logger.info("üîß CoordinatorOrchestrator: –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")

        # <<< –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô
        # –≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω.
        # –ú—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é. –°–ª–æ–≤–∞—Ä—å 'dependencies',
        # –∫–æ—Ç–æ—Ä—ã–π –º—ã –ø–æ–ª—É—á–∞–µ–º, —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ.
        # –ú—ã –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞–∂–¥–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
        
        self.handler_dependencies = dependencies

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∫–∞–∂–¥–æ–º—É –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
        # –ö–∞–∂–¥—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∞–º –≤–æ–∑—å–º–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Ç–æ, —á—Ç–æ –µ–º—É –Ω—É–∂–Ω–æ.
        self.handlers: Dict[str, ICommandHandler] = {
            "auto_exploring": AutoExploringHandler(self.handler_dependencies),
            "auto_leveling": AutoLevelingHandler(self.handler_dependencies),
            # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
        }
        # –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô >>>

        self.logger.info(f"‚úÖ CoordinatorOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(self.handlers)}.")

    async def handle_command(self, command_type: str, payload: Dict[str, Any]) -> None:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã.
        """
        handler = self.handlers.get(command_type)
        if not handler:
            self.logger.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞: '{command_type}'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return

        try:
            self.logger.debug(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã '{command_type}' —Å –¥–∞–Ω–Ω—ã–º–∏: {payload}")
            await handler.execute(payload)
        except Exception as e:
            self.logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command_type}': {e}",
                exc_info=True,
                extra={"payload": payload}
            )

