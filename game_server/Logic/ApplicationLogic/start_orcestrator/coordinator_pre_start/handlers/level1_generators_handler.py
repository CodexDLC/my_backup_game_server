from typing import Optional, List, Dict, Any

from game_server.Logic.ApplicationLogic.start_orcestrator.coordinator_pre_start.data_processing.creature_type_data_orchestrator import CreatureTypeDataOrchestrator
from game_server.Logic.ApplicationLogic.start_orcestrator.coordinator_pre_start.template_generator_character.character_template_planner import CharacterTemplatePlanner
from .base_step_handler import IPreStartStepHandler
# üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
from game_server.config.provider import config
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∞—Å—Å–æ–≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
from game_server.Logic.ApplicationLogic.start_orcestrator.coordinator_pre_start.template_generator_item.item_template_planner import ItemTemplatePlanner

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç–∏–ø–æ–≤ —Å—É—â–µ—Å—Ç–≤ –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
# from game_server.Logic.ApplicationLogic.start_orcestrator.coordinator_pre_start.data_processing.creature_type_data_orchestrator import CreatureTypeDataOrchestrator # –£–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤—ã—à–µ

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç ArqRedis –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
from arq import ArqRedis

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç PlayableRaceData DTO
from game_server.common_contracts.start_orcestrator.dtos import PlayableRaceData #


class RunLevel1GeneratorsHandler(IPreStartStepHandler):
    """ –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤ 1 —É—Ä–æ–≤–Ω—è (–ø—Ä–µ–¥–º–µ—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏). """
    async def execute(self) -> bool:
        self.logger.debug("‚öôÔ∏è –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤ 1 —É—Ä–æ–≤–Ω—è...")
        item_tasks_count = 0
        character_tasks_count = 0
        item_tasks_error_count = 0
        character_tasks_error_count = 0

        try:
            # --- –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—Å —Ç–æ—á–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π) ---
            item_planner: ItemTemplatePlanner = self.dependencies['item_template_planner']
            character_planner: CharacterTemplatePlanner = self.dependencies['character_template_planner']
            creature_orchestrator: Optional[CreatureTypeDataOrchestrator] = self.dependencies.get('creature_type_orchestrator')
            arq_redis_client: ArqRedis = self.dependencies['arq_redis_client']
            
            # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ü—Ä–µ–¥–º–µ—Ç–æ–≤ ---
            self.logger.info("‚û°Ô∏è –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –ü–†–ï–î–ú–ï–¢–û–í...")
            item_tasks = await item_planner.check_and_prepare_generation_tasks() # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç List[Dict[str, Any]]
            
            if item_tasks:
                self.logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª {len(item_tasks)} –±–∞—Ç—á–µ–π –∑–∞–¥–∞—á. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å ARQ...")
                for task_entry in item_tasks:
                    batch_id = task_entry.get("batch_id")
                    if batch_id:
                        try:
                            await arq_redis_client.enqueue_job(config.constants.arq.ARQ_TASK_PROCESS_ITEM_GENERATION_BATCH, batch_id=batch_id)
                            item_tasks_count += 1
                        except Exception as arq_e:
                            item_tasks_error_count += 1
                            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞ (batch_id='{batch_id}') –≤ –æ—á–µ—Ä–µ–¥—å ARQ: {arq_e}", exc_info=True)
                    else:
                        item_tasks_error_count += 1
                        self.logger.error(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–º–µ—Ç–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç batch_id –≤ –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á–∏ {task_entry}.")
                
                if item_tasks_count > 0:
                    self.logger.info(f"‚úÖ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {item_tasks_count} –∑–∞–¥–∞—á –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å ARQ. –û—à–∏–±–æ–∫: {item_tasks_error_count}.")
                elif item_tasks_error_count > 0:
                    self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –û—à–∏–±–æ–∫: {item_tasks_error_count}.")
                
            else:
                self.logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –Ω–∞—à–µ–ª –∑–∞–¥–∞—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

            # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π ---
            self.logger.info("‚û°Ô∏è –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –ü–ï–†–°–û–ù–ê–ñ–ï–ô...")
            if not creature_orchestrator:
                self.logger.critical("üö® –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
                raise RuntimeError("Creature orchestrator missing for character planning.")
            
            # –ò–ó–ú–ï–ù–ï–ù–û: creature_orchestrator.get_playable_race_list() —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç List[PlayableRaceData]
            playable_races_list: List[PlayableRaceData] = creature_orchestrator.get_playable_race_list() #
            
            if not playable_races_list:
                self.logger.warning("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö —Ä–∞—Å –ø—É—Å—Ç. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")
            else:
                character_tasks = await character_planner.pre_process(
                    playable_races_data=playable_races_list, #
                    desired_gender_ratio=config.settings.prestart.DEFAULT_CHARACTER_GENDER_RATIO
                )
                if character_tasks:
                    self.logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª {len(character_tasks)} –±–∞—Ç—á–µ–π –∑–∞–¥–∞—á. –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤ –æ—á–µ—Ä–µ–¥—å ARQ...")
                    for task_entry in character_tasks:
                        batch_id = task_entry.get("batch_id")
                        if batch_id:
                            try:
                                await arq_redis_client.enqueue_job(config.constants.arq.ARQ_TASK_GENERATE_CHARACTER_BATCH, batch_id=batch_id)
                                character_tasks_count += 1
                            except Exception as arq_e:
                                character_tasks_error_count += 1
                                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (batch_id='{batch_id}') –≤ –æ—á–µ—Ä–µ–¥—å ARQ: {arq_e}", exc_info=True)
                        else:
                            character_tasks_error_count += 1
                            self.logger.error(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç batch_id –≤ –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á–∏ {task_entry}.")
                    
                    if character_tasks_count > 0:
                        self.logger.info(f"‚úÖ –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {character_tasks_count} –∑–∞–¥–∞—á –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –æ—á–µ—Ä–µ–¥—å ARQ. –û—à–∏–±–æ–∫: {character_tasks_error_count}.")
                    elif character_tasks_error_count > 0:
                        self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –û—à–∏–±–æ–∫: {character_tasks_error_count}.")
                else:
                    self.logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–µ –Ω–∞—à–µ–ª –∑–∞–¥–∞—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            
            self.logger.info("‚úÖ –®–∞–≥ 4: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ 1 —É—Ä–æ–≤–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.")
            return True
        except RuntimeError as e:
            self.logger.critical(f"üö® –®–∞–≥ 4: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞—Ö 1 —É—Ä–æ–≤–Ω—è: {e}", exc_info=True)
            return False
        except Exception as e:
            self.logger.critical(f"üö® –®–∞–≥ 4: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ 1 —É—Ä–æ–≤–Ω—è: {e}", exc_info=True)
            return False