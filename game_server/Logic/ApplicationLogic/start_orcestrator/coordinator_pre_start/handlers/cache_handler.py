import logging
from .base_step_handler import IPreStartStepHandler
# üî• –£–î–ê–õ–Ø–ï–ú —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–æ–ª—É—á–µ–Ω–∏—é None
# from game_server.Logic.InfrastructureLogic.app_cache.app_cache_initializer import reference_data_cache_manager # –£–î–ê–õ–ï–ù–û

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ReferenceDataCacheManager –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_reference_data_cache import IReferenceDataCacheManager


logger = logging.getLogger(__name__)

class CacheReferenceDataHandler(IPreStartStepHandler):
    def __init__(self, dependencies: dict):
        super().__init__(dependencies) # –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ IPreStartStepHandler
        # self.logger = dependencies.get("logger", logger) # –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ logger —É–∂–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –±–∞–∑–æ–≤–æ–º –∫–ª–∞—Å—Å–µ
        # üî• –ü–û–õ–£–ß–ê–ï–ú reference_data_cache_manager –ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
        self.reference_data_cache_manager: IReferenceDataCacheManager = self.dependencies.get("reference_data_cache_manager") # –ò–ó–ú–ï–ù–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏—è

        # –û–ü–¶–ò–û–ù–ê–õ–¨–ù–û: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏
        if self.reference_data_cache_manager is None:
            self.logger.critical("üö® CRITICAL: CacheReferenceDataHandler –Ω–µ –ø–æ–ª—É—á–∏–ª reference_data_cache_manager —á–µ—Ä–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
            raise ValueError("reference_data_cache_manager –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ CacheReferenceDataHandler.")


    async def execute(self) -> bool:
        self.logger.info("‚ö° –®–∞–≥ 2: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        try:
            # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–û–•–†–ê–ù–ï–ù–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–†
            await self.reference_data_cache_manager.cache_all_reference_data()
            self.logger.info("‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã.")
            return True
        except Exception as e:
            self.logger.critical(f"üö® –®–∞–≥ 2: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
            return False