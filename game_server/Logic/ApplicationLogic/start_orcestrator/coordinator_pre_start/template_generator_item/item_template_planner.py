# game_server/Logic/ApplicationLogic/start_orcestrator/template_generator_item/item_template_planner.py

import json
import re
from typing import Any, Dict, List, Callable, Set, Optional, Tuple
# from sqlalchemy.ext.asyncio import AsyncSession # –£–î–ê–õ–ï–ù–û: –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é

from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

from game_server.config.provider import config

from .item_template_planner_logic import ItemTemplatePlannerLogic

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç RepositoryManager
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager
# –î–û–ë–ê–í–õ–ï–ù–û/–ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data.reference_data_reader import IReferenceDataReader # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.task_queue_cache_manager import ITaskQueueCacheManager # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
from arq.connections import ArqRedis # –î–ª—è arq_redis_pool

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç ItemGenerationSpec DTO
from game_server.common_contracts.start_orcestrator.dtos import ItemGenerationSpec #

class ItemTemplatePlanner:
    def __init__(
        self,
        repository_manager: RepositoryManager, # –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º RepositoryManager
        central_redis_client: CentralRedisClient, # –ò–ó–ú–ï–ù–ï–ù–û: —Ç–æ—á–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
        reference_data_reader: IReferenceDataReader, # –ò–ó–ú–ï–ù–ï–ù–û: —Ç–æ—á–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
        # üî• –ù–û–í–û–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º —ç—Ç–∏ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        task_queue_cache_manager: ITaskQueueCacheManager, # –ò–ó–ú–ï–ù–ï–ù–û: —Ç–æ—á–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
        arq_redis_pool: ArqRedis, # –ò–ó–ú–ï–ù–ï–ù–û: —Ç–æ—á–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è
        item_generation_limit: Optional[int] = None
    ):
        # –£–î–ê–õ–ï–ù–û: self.async_session_factory = async_session_factory
        self.repository_manager = repository_manager # –î–û–ë–ê–í–õ–ï–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º RepositoryManager
        self.item_generation_limit = item_generation_limit

        self.planner_logic = ItemTemplatePlannerLogic(
            repository_manager=self.repository_manager, # –ò–ó–ú–ï–ù–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º RepositoryManager
            central_redis_client=central_redis_client,
            reference_data_reader=reference_data_reader,
            # üî• –ù–û–í–û–ï: –ò –ø–µ—Ä–µ–¥–∞–µ–º –∏—Ö –≤ ItemTemplatePlannerLogic
            task_queue_cache_manager=task_queue_cache_manager,
            arq_redis_pool=arq_redis_pool,
            item_generation_limit=item_generation_limit
        )
        logger.debug("‚ú® ItemTemplatePlanner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def check_and_prepare_generation_tasks(self) -> List[Dict[str, Any]]:
        logger.debug("ItemTemplatePlanner: –ó–∞–ø—É—Å–∫ check_and_prepare_generation_tasks (–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)...")

        # –í–ù–£–¢–†–ò planner_logic, –º–µ—Ç–æ–¥—ã get_or_build_etalon_specs –∏ get_existing_item_codes_from_db
        # –¥–æ–ª–∂–Ω—ã —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å repository_manager, –∫–æ—Ç–æ—Ä—ã–π –∏–º –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω.
        # –ò–ó–ú–ï–ù–ï–ù–û: –¢–∏–ø–∏–∑–∞—Ü–∏—è etalon_specs –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å Dict[str, ItemGenerationSpec]
        etalon_specs: Dict[str, ItemGenerationSpec] = await self.planner_logic.get_or_build_etalon_specs() #
        existing_codes_in_db: Set[str] = await self.planner_logic.get_existing_item_codes_from_db()
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –¢–∏–ø–∏–∑–∞—Ü–∏—è missing_specs –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å List[ItemGenerationSpec]
        missing_specs: List[ItemGenerationSpec] = self.planner_logic.find_missing_specs(etalon_specs, existing_codes_in_db) #

        if missing_specs:
            logger.info(f"ItemTemplatePlanner: –ù–∞–π–¥–µ–Ω–æ {len(missing_specs)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö item_code. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            # prepare_tasks_for_missing_items —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç List[ItemGenerationSpec]
            tasks = await self.planner_logic.prepare_tasks_for_missing_items(
                missing_specs, self.item_generation_limit
            )
            logger.debug(f"ItemTemplatePlanner: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return tasks
        else:
            logger.debug("ItemTemplatePlanner: –ù–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö item_code –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.")
            return []