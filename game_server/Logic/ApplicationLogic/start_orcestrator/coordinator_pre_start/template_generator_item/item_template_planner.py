# game_server/Logic/ApplicationLogic/start_orcestrator/coordinator_pre_start/template_generator_item/item_template_planner.py

from typing import Any, Dict, List, Optional, Set

from game_server.config.logging.logging_setup import app_logger as logger
from .item_template_planner_logic import ItemTemplatePlannerLogic
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_reference_data_reader import IReferenceDataReader
from game_server.common_contracts.dtos.orchestrator_dtos import ItemGenerationSpec

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RedisBatchStore, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç–µ–ø–µ—Ä—å –Ω–∞—à–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.redis_batch_store import RedisBatchStore


class ItemTemplatePlanner:
    """
    –ö–ª–∞—Å—Å-—Ñ–∞—Å–∞–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ItemTemplatePlannerLogic –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
    """
    def __init__(
        self,
        repository_manager: RepositoryManager,
        central_redis_client: CentralRedisClient,
        reference_data_reader: IReferenceDataReader,
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞ –Ω–æ–≤—É—é, –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
        redis_batch_store: RedisBatchStore,
        item_generation_limit: Optional[int] = None
    ):
        self.repository_manager = repository_manager
        self.item_generation_limit = item_generation_limit

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º ItemTemplatePlannerLogic —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é
        self.planner_logic = ItemTemplatePlannerLogic(
            repository_manager=self.repository_manager,
            central_redis_client=central_redis_client,
            reference_data_reader=reference_data_reader,
            redis_batch_store=redis_batch_store, # <--- –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            item_generation_limit=item_generation_limit
        )
        logger.debug("‚ú® ItemTemplatePlanner (v2) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def check_and_prepare_generation_tasks(self) -> List[Dict[str, Any]]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–¥–∞—á.
        –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ planner_logic.
        """
        logger.debug("ItemTemplatePlanner: –ó–∞–ø—É—Å–∫ check_and_prepare_generation_tasks...")

        etalon_specs: Dict[str, ItemGenerationSpec] = await self.planner_logic.get_or_build_etalon_specs()
        existing_codes_in_db: Set[str] = await self.planner_logic.get_existing_item_codes_from_db()
        
        missing_specs: List[ItemGenerationSpec] = self.planner_logic.find_missing_specs(etalon_specs, existing_codes_in_db)

        if missing_specs:
            logger.info(f"ItemTemplatePlanner: –ù–∞–π–¥–µ–Ω–æ {len(missing_specs)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö item_code. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–¥–∞—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            tasks = await self.planner_logic.prepare_tasks_for_missing_items(
                missing_specs, self.item_generation_limit
            )
            logger.debug(f"ItemTemplatePlanner: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
            return tasks
        else:
            logger.debug("ItemTemplatePlanner: –ù–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö item_code –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.")
            return []
