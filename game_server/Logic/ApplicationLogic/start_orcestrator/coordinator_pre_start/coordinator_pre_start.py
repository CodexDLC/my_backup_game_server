# game_server/Logic/ApplicationLogic/start_orcestrator/coordinator_pre_start/coordinator_pre_start.py
import asyncio
from typing import List, Type, Dict, Any

from game_server.config.settings.process.prestart import MAX_TASK_RETRY_ATTEMPTS
from game_server.config.logging.logging_setup import app_logger as logger

from .handlers.base_step_handler import IPreStartStepHandler
from .handlers.seeds_handler import SeedsHandler
from .handlers.cache_handler import CacheReferenceDataHandler
from .handlers.data_loaders_handler import InitializeDataLoadersHandler
from .handlers.level1_generators_handler import RunLevel1GeneratorsHandler

from arq import ArqRedis
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
from .template_generator_item.item_template_planner import ItemTemplatePlanner
from .template_generator_character.character_template_planner import CharacterTemplatePlanner
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.redis_batch_store import RedisBatchStore
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_reference_data_reader import IReferenceDataReader


class GeneratorPreStart:
    def __init__(
        self,
        repository_manager: RepositoryManager,
        app_cache_managers: Dict[str, Any],
        arq_redis_pool: ArqRedis
    ):
        self.is_prestart_completed = False
        self.logger = logger
        self.repository_manager = repository_manager
        self.app_cache_managers = app_cache_managers
        self.arq_redis_pool = arq_redis_pool

        # --- üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ app_cache_managers ---
        redis_batch_store: RedisBatchStore = self.app_cache_managers.get("redis_batch_store")
        central_redis_client: Any = self.app_cache_managers.get("central_redis_client")
        reference_data_reader: IReferenceDataReader = self.app_cache_managers.get("reference_data_reader")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã
        if not all([redis_batch_store, central_redis_client, reference_data_reader]):
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (redis_batch_store, central_redis_client, reference_data_reader).")

        # --- üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ ---
        item_planner = ItemTemplatePlanner(
            repository_manager=self.repository_manager,
            central_redis_client=central_redis_client,
            reference_data_reader=reference_data_reader,
            redis_batch_store=redis_batch_store # –ü–µ—Ä–µ–¥–∞–µ–º redis_batch_store
        )
        character_planner = CharacterTemplatePlanner(
            repository_manager=self.repository_manager,
            redis_batch_store=redis_batch_store # –ü–µ—Ä–µ–¥–∞–µ–º redis_batch_store
        )

        # --- üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
        self.handler_dependencies: Dict[str, Any] = {
            "arq_redis_client": self.arq_redis_pool,
            "repository_manager": self.repository_manager,
            "logger": self.logger,
            "item_template_planner": item_planner,
            "character_template_planner": character_planner,
            "reference_data_cache_manager": self.app_cache_managers.get("reference_data_cache_manager"),
            "redis_client": central_redis_client,
            "reference_data_reader": reference_data_reader,
            "redis_batch_store": redis_batch_store, # –î–æ–±–∞–≤–ª—è–µ–º redis_batch_store
        }

        self.startup_pipeline: List[Type[IPreStartStepHandler]] = [
            SeedsHandler,
            CacheReferenceDataHandler,
            InitializeDataLoadersHandler,
            RunLevel1GeneratorsHandler
        ]
        self.logger.debug("‚ú® –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ (v2) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º –∑–∞–¥–∞—á.")

    async def execute_step_with_retries(self, handler_class: Type[IPreStartStepHandler]) -> bool:
        """ –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. """
        attempt = 0
        handler_instance = handler_class(self.handler_dependencies)

        while attempt < MAX_TASK_RETRY_ATTEMPTS:
            self.logger.debug(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_TASK_RETRY_ATTEMPTS} –∑–∞–ø—É—Å–∫–∞ —à–∞–≥–∞ '{handler_class.__name__}'...")
            if await handler_instance.execute():
                return True

            attempt += 1
            if attempt < MAX_TASK_RETRY_ATTEMPTS:
                self.logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ '{handler_class.__name__}'. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)

        self.logger.critical(f"üö® –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥ '{handler_class.__name__}' –ø–æ—Å–ª–µ {MAX_TASK_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.")
        return False

    async def pre_start_mode(self) -> bool:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —à–∞–≥–∏ –∏–∑ –∫–æ–Ω–≤–µ–π–µ—Ä–∞.
        """
        self.logger.debug("üöÄ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤—Ö–æ–¥–∏—Ç –≤ –ü–†–ï–î–°–¢–ê–†–¢–û–í–´–ô –†–ï–ñ–ò–ú...")

        for step_handler_class in self.startup_pipeline:
            if not await self.execute_step_with_retries(step_handler_class):
                return False

        self.is_prestart_completed = True
        self.logger.debug("‚úÖ –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return True
