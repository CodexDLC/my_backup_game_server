import asyncio
from typing import List, Type, Dict, Any
# from sqlalchemy.ext.asyncio import AsyncSession # –£–î–ê–õ–ï–ù–û

from game_server.config.settings.process.prestart import MAX_TASK_RETRY_ATTEMPTS
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

from .handlers.base_step_handler import IPreStartStepHandler
from .handlers.seeds_handler import SeedsHandler
from .handlers.cache_handler import CacheReferenceDataHandler
from .handlers.data_loaders_handler import InitializeDataLoadersHandler
from .handlers.level1_generators_handler import RunLevel1GeneratorsHandler

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–∞ ARQ (arq_pool_manager)
# –£–î–ê–õ–ï–ù–û: from game_server.Logic.InfrastructureLogic.arq_worker.arq_manager import arq_pool_manager # –ù–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ arq_redis_pool –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.task_queue_cache_manager import TaskQueueCacheManager
from arq import ArqRedis # –î–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ arq_redis_pool

# –ò–º–ø–æ—Ä—Ç RepositoryManager
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager # –î–û–ë–ê–í–õ–ï–ù–û

# –ö–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –±—É–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–∏
from .template_generator_item.item_template_planner import ItemTemplatePlanner
from .template_generator_character.character_template_planner import CharacterTemplatePlanner


class GeneratorPreStart:
    def __init__(
        self,
        repository_manager: RepositoryManager,
        app_cache_managers: Dict[str, Any],
        arq_redis_pool: ArqRedis # <--- –î–û–ë–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º arq_redis_pool
    ):
        self.is_prestart_completed = False
        self.logger = logger
        self.repository_manager = repository_manager
        self.app_cache_managers = app_cache_managers
        self.arq_redis_pool = arq_redis_pool # <--- –î–û–ë–ê–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º


        self.logger.critical(f"DEBUG: –í GeneratorPreStart.__init__, reference_data_cache_manager: {self.app_cache_managers.get('reference_data_cache_manager')}")
        self.logger.critical(f"DEBUG: –í GeneratorPreStart.__init__, central_redis_client_instance: {self.app_cache_managers.get('central_redis_client')}")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–∑ app_cache_managers
        task_queue_cache_manager: TaskQueueCacheManager = self.app_cache_managers.get("task_queue_cache_manager")
        central_redis_client: Any = self.app_cache_managers.get("central_redis_client")
        reference_data_reader: Any = self.app_cache_managers.get("reference_data_reader")
        # arq_redis_pool: ArqRedis = arq_pool_manager.arq_redis_pool # <--- –£–î–ê–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤


        item_planner = ItemTemplatePlanner(
            repository_manager=self.repository_manager,
            central_redis_client=central_redis_client,
            reference_data_reader=reference_data_reader,
            task_queue_cache_manager=task_queue_cache_manager,
            arq_redis_pool=self.arq_redis_pool # <--- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º self.arq_redis_pool
        )
        character_planner = CharacterTemplatePlanner(
            repository_manager=self.repository_manager,
            task_queue_cache_manager=task_queue_cache_manager,
            arq_redis_pool=self.arq_redis_pool # <--- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º self.arq_redis_pool
        )

        self.handler_dependencies: Dict[str, Any] = {
            "arq_redis_client": self.arq_redis_pool, # <--- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º self.arq_redis_pool
            "repository_manager": self.repository_manager,
            "logger": self.logger,
            "item_template_planner": item_planner,
            "character_template_planner": character_planner,
            "reference_data_cache_manager": self.app_cache_managers.get("reference_data_cache_manager"),
            "redis_client": central_redis_client,
            "reference_data_reader": reference_data_reader,
            "task_queue_cache_manager": task_queue_cache_manager,
        }

        self.startup_pipeline: List[Type[IPreStartStepHandler]] = [
            SeedsHandler,
            CacheReferenceDataHandler,
            InitializeDataLoadersHandler,
            RunLevel1GeneratorsHandler
        ]
        self.logger.debug("‚ú® –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∫–æ–Ω–≤–µ–π–µ—Ä–æ–º –∑–∞–¥–∞—á.")

    async def execute_step_with_retries(self, handler_class: Type[IPreStartStepHandler]) -> bool:
        """ –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ —Å –ª–æ–≥–∏–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. """
        attempt = 0
        handler_instance = handler_class(self.handler_dependencies)

        while attempt < MAX_TASK_RETRY_ATTEMPTS:
            self.logger.debug(f"üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_TASK_RETRY_ATTEMPTS} –∑–∞–ø—É—Å–∫–∞ —à–∞–≥–∞ '{handler_class.__name__}'...")
            if await handler_instance.execute():
                return True

            attempt += 1
            if attempt < MAX_TASK_RETRY_ATTEMPTS:
                self.logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ —à–∞–≥–µ '{handler_class.__name__}'. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(5)

        self.logger.critical(f"üö® –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥ '{handler_class.__name__}' –ø–æ—Å–ª–µ {MAX_TASK_RETRY_ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.")
        return False

    async def pre_start_mode(self) -> bool:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —à–∞–≥–∏ –∏–∑ –∫–æ–Ω–≤–µ–π–µ—Ä–∞.
        """
        self.logger.debug("üöÄ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤—Ö–æ–¥–∏—Ç –≤ –ü–†–ï–î–°–¢–ê–†–¢–û–í–´–ô –†–ï–ñ–ò–ú...")

        for step_handler_class in self.startup_pipeline:
            if not await self.execute_step_with_retries(step_handler_class):
                return False

        self.is_prestart_completed = True
        self.logger.debug("‚úÖ –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return True