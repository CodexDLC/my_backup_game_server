# game_server/Logic/ApplicationLogic/world_orchestrator/runtime/runtime_coordinator.py
import logging
from typing import Dict, Any, Callable # –î–æ–±–∞–≤–ª–µ–Ω Callable –¥–ª—è —Ñ–∞–±—Ä–∏–∫
import inject
from sqlalchemy.ext.asyncio import AsyncSession # –î–æ–±–∞–≤–ª–µ–Ω AsyncSession –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —Ñ–∞–±—Ä–∏–∫

# –ò–º–ø–æ—Ä—Ç—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
from .handlers.base_command_handler import ICommandHandler
from .handlers.auto_exploring_handler import AutoExploringHandler
from .handlers.auto_leveling_handler import AutoLevelingHandler

# –ò–º–ø–æ—Ä—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã RuntimeCoordinator (–æ–Ω —Å–∞–º –∏—Ö –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å)
# üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ò–ù–¢–ï–†–§–ï–ô–°–´ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.auto_session.interfaces_auto_session import IAutoSessionRepository, IXpTickDataRepository
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.character.interfaces_character import ICharacterRepository
from game_server.Logic.InfrastructureLogic.app_cache.services.item.item_cache_manager import ItemCacheManager
from game_server.Logic.InfrastructureLogic.messaging.i_message_bus import IMessageBus
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.redis_batch_store import RedisBatchStore
from game_server.Logic.InfrastructureLogic.arq_worker.arq_manager import ArqQueueService


class RuntimeCoordinator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–∞–Ω—Ç–∞–π–º-–∫–æ–º–∞–Ω–¥. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º."""
    # üî• –ò–ó–ú–ï–ù–ï–ù–û: –£–¥–∞–ª–µ–Ω–æ —è–≤–Ω–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. inject.autoparams() —Å–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤.
    @inject.autoparams()
    def __init__(
        self,
        logger: logging.Logger,
        # ÔøΩ –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –§–ê–ë–†–ò–ö–ò —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ PostgreSQL
        auto_session_repo_factory: Callable[[AsyncSession], IAutoSessionRepository],
        xp_tick_data_repo_factory: Callable[[AsyncSession], IXpTickDataRepository],
        character_repo_factory: Callable[[AsyncSession], ICharacterRepository],
        item_cache_manager: ItemCacheManager,
        message_bus: IMessageBus,
        central_redis_client: CentralRedisClient,
        redis_batch_store: RedisBatchStore,
        arq_service: ArqQueueService,
    ):
        self.logger = logger
        # üî• –°–û–•–†–ê–ù–Ø–ï–ú –§–ê–ë–†–ò–ö–ò
        self._auto_session_repo_factory = auto_session_repo_factory
        self._xp_tick_data_repo_factory = xp_tick_data_repo_factory
        self._character_repo_factory = character_repo_factory
        self.item_cache_manager = item_cache_manager
        self.message_bus = message_bus
        self.central_redis_client = central_redis_client
        self.redis_batch_store = redis_batch_store
        self.arq_service = arq_service

        self.logger.info("üîß RuntimeCoordinator: –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")

        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —á–µ—Ä–µ–∑ inject.instance()
        # DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–∞–º —Ä–∞–∑—Ä–µ—à–∏—Ç –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
        # –í–ê–ñ–ù–û: –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (AutoExploringHandler, AutoLevelingHandler)
        # —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å session_factory
        # –∏ —Ñ–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ —Å–≤–æ–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞—Ö.
        self.handlers: Dict[str, ICommandHandler] = {
            "auto_exploring": inject.instance(AutoExploringHandler),
            "auto_leveling": inject.instance(AutoLevelingHandler),
        }
        self.logger.info(f"‚úÖ RuntimeCoordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(self.handlers)}.")

    async def handle_command(self, command_type: str, payload: Dict[str, Any]) -> None:
        """–ù–∞—Ö–æ–¥–∏—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ–º–∞–Ω–¥—ã."""
        handler = self.handlers.get(command_type)
        if not handler:
            self.logger.warning(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞: '{command_type}'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return
        try:
            # üî• –í–ê–ñ–ù–û: –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —è–≤–ª—è—é—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏,
            # –æ–Ω–∏ —Å–∞–º–∏ –±—É–¥—É—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤.
            await handler.execute(payload)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '{command_type}': {e}", exc_info=True)
