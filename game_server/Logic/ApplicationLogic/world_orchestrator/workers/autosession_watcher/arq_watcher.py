import logging
import time
from typing import Dict, Any, Optional # –î–æ–±–∞–≤–∏–ª Optional

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω—É–∂–Ω—ã
# (–≠—Ç–æ –ü–†–ò–ú–ï–†, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –Ω—É–∂–Ω—ã collect_and_dispatch_sessions)
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.accounts.interfaces_accounts import IAccountGameDataRepository # –ü—Ä–∏–º–µ—Ä
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.auto_session.interfaces_auto_session import IAutoSessionRepository, IXpTickDataRepository # –ü—Ä–∏–º–µ—Ä

from game_server.Logic.ApplicationLogic.world_orchestrator.workers.autosession_watcher.tick_AutoSession_Watcher import collect_and_dispatch_sessions
from game_server.Logic.InfrastructureLogic.messaging.message_bus import RedisMessageBus # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –≤–∞—à message_bus

logger = logging.getLogger(__name__)

# ==============================================================================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
# ==============================================================================
async def execute_periodic_task(
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤–º–µ—Å—Ç–æ RepositoryManager
    # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –¢–û–ß–ù–´–ï —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã collect_and_dispatch_sessions.
    # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä:
    auto_session_repo: IAutoSessionRepository,
    xp_tick_data_repo: IXpTickDataRepository, 
    
    message_bus: RedisMessageBus,
    app_managers: Dict[str, Any], # Receives dictionary with all managers
):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏.
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
    """
    start_time = time.time()
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–æ–≤...")

    try:
        await collect_and_dispatch_sessions(
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤–º–µ—Å—Ç–æ repository_manager
            auto_session_repo=auto_session_repo, # Passed down
            xp_tick_data_repo=xp_tick_data_repo, # Passed down                       
            message_bus=message_bus, # Passed down
            app_cache_managers=app_managers, # Passed down
        )
        duration = time.time() - start_time
        logger.info(f"üèÅ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.2f} —Å–µ–∫.")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {e}", exc_info=True)
        return False