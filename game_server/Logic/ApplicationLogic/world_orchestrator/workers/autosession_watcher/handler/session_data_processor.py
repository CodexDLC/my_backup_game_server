# -*- coding: utf-8 -*-
import logging # –î–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ logger
from typing import List, Dict, Any
from datetime import datetime, timezone

# üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ì–ª–∞–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –≤—Å–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from game_server.config.provider import config
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–ï –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π logger –∑–¥–µ—Å—å, –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω
# from game_server.config.logging.logging_setup import app_logger as logger
from game_server.database.models.models import AutoSession # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ò–ù–¢–ï–†–§–ï–ô–°–´ –ö–û–ù–ö–†–ï–¢–ù–´–• –†–ï–ü–û–ó–ò–¢–û–†–ò–ï–í
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.auto_session.interfaces_auto_session import IAutoSessionRepository, IXpTickDataRepository
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.character.interfaces_character import ICharacterRepository # –î–æ–±–∞–≤–ª–µ–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.accounts.interfaces_accounts import IAccountGameDataRepository # –î–æ–±–∞–≤–ª–µ–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è app_cache_managers (–¥–ª—è –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã)
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –≥–µ—Ç—Ç–µ—Ä–∞, –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω
# from game_server.Logic.InfrastructureLogic.app_cache.app_cache_initializer import get_initialized_app_cache_managers

# üî• –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç RabbitMQMessageBus, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –≤ Processor
from game_server.Logic.InfrastructureLogic.messaging.rabbitmq_message_bus import RabbitMQMessageBus


class SessionDataProcessor:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ—Å—Å–∏–π, —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö ID –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –Ω–∞–ø—Ä—è–º—É—é –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏ –∫—ç—à-–º–µ–Ω–µ–¥–∂–µ—Ä—ã.
    """
    def __init__(
        self, 
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        auto_session_repo: IAutoSessionRepository,
        xp_tick_data_repo: IXpTickDataRepository, # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è XP
        character_repo: ICharacterRepository, # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        account_game_data_repo: IAccountGameDataRepository, # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
        
        app_cache_managers: Dict[str, Any], # –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å —ç—Ç–æ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å
        message_bus: RabbitMQMessageBus, # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
        logger: logging.Logger # üî• –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–≥–µ—Ä —Ç–µ–ø–µ—Ä—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    ):
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        self.auto_session_repo = auto_session_repo
        self.xp_tick_data_repo = xp_tick_data_repo
        self.character_repo = character_repo
        self.account_game_data_repo = account_game_data_repo

        self.app_cache_managers = app_cache_managers
        self.message_bus = message_bus
        self.logger = logger # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–≥–≥–µ—Ä —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π
        
        self.logger.info("‚úÖ SessionDataProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def has_ready_sessions(self) -> bool:
        self.logger.info("SessionDataProcessor: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≥–æ—Ç–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π...")
        now_utc = datetime.now(timezone.utc)
        
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º auto_session_repo –Ω–∞–ø—Ä—è–º—É—é
        ready_sessions = await self.auto_session_repo.get_ready_sessions()
        result = len(ready_sessions) > 0

        if result:
            self.logger.info("SessionDataProcessor: –ù–∞–π–¥–µ–Ω—ã –≥–æ—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏.")
        else:
            self.logger.info("SessionDataProcessor: –ì–æ—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return result

    async def collect_and_categorize_sessions(self) -> Dict[str, List[int]]:
        self.logger.info("SessionDataProcessor: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π...")
        
        categorized_tasks: Dict[str, List[int]] = {
            config.constants.redis.REDIS_TASK_QUEUE_EXPLORATION: [],
            config.constants.redis.REDIS_TASK_QUEUE_TRAINING: [],
        }

        character_ids_to_update: List[int] = []

        try:
            now_utc = datetime.now(timezone.utc)
            target_categories = [
                config.constants.redis.REDIS_TASK_QUEUE_EXPLORATION, 
                config.constants.redis.REDIS_TASK_QUEUE_TRAINING
            ]
            
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º auto_session_repo –Ω–∞–ø—Ä—è–º—É—é
            sessions_to_process = await self.auto_session_repo.get_ready_sessions()
            sessions_to_process = [
                (s.character_id, s.active_category) for s in sessions_to_process
                if s.next_tick_at <= now_utc and s.active_category in target_categories
            ]

            if not sessions_to_process:
                self.logger.info("SessionDataProcessor: –ù–µ—Ç —Å–µ—Å—Å–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ü–µ–ª–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö.")
                return {}

            self.logger.info(f"SessionDataProcessor: –°–æ–±—Ä–∞–Ω–æ {len(sessions_to_process)} —Å–µ—Å—Å–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            
            for char_id, category in sessions_to_process:
                if category in categorized_tasks:
                    categorized_tasks[category].append(char_id)
                    character_ids_to_update.append(char_id)
                else:
                    self.logger.warning(f"SessionDataProcessor: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Å—Å–∏—è —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '{category}' –¥–ª—è char_id '{char_id}'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")

            if not character_ids_to_update:
                self.logger.info("SessionDataProcessor: –ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                return {}

            tick_interval_minutes = config.settings.runtime.TICK_INTERVAL_MINUTES
            
            updated_count = 0
            for char_id in character_ids_to_update:
                try:
                    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º auto_session_repo –Ω–∞–ø—Ä—è–º—É—é
                    updated_session = await self.auto_session_repo.update_character_tick_time(
                        character_id=char_id,
                        interval_minutes=tick_interval_minutes
                    )
                    if updated_session:
                        updated_count += 1
                except Exception as update_e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–∞ –¥–ª—è char_id {char_id}: {update_e}", exc_info=True)

            self.logger.info(f"SessionDataProcessor: –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Ç–∏–∫–∞ –¥–ª—è {updated_count} —Å–µ—Å—Å–∏–π.")
            
            return {
                category: ids for category, ids in categorized_tasks.items() if ids
            }

        except Exception as e:
            self.logger.critical(f"SessionDataProcessor: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–µ—Å—Å–∏–π: {e}", exc_info=True)
            raise