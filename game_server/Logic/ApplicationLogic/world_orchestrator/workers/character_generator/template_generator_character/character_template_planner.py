# game_server/Logic/ApplicationLogic/world_orchestrator/workers/character_generator/template_generator_character/character_template_planner.py

import uuid
import logging
import inject
from typing import List, Dict, Any, Optional, Callable
from collections import Counter
from sqlalchemy.ext.asyncio import AsyncSession

from game_server.Logic.InfrastructureLogic.db_instance import AsyncSessionLocal
from game_server.contracts.dtos.orchestrator.data_models import CharacterGenerationSpec

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –∏ DTO
from .pre_process.character_batch_generator import generate_pre_batch_from_pool_needs
from game_server.Logic.InfrastructureLogic.arq_worker.utils.task_batch_dispatcher import split_into_batches


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –≤–Ω–µ–¥—Ä—è—Ç—å —á–µ—Ä–µ–∑ DI
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_1lvl.interfaces_meta_data_1lvl import ICharacterPoolRepository
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.redis_batch_store import RedisBatchStore
from game_server.Logic.InfrastructureLogic.app_post.utils.transactional_decorator import transactional

# üëá –®–ê–ì 1: –ü–†–Ø–ú–û–ô –ò–ú–ü–û–†–¢ –ö–û–ù–°–¢–ê–ù–¢
from game_server.config.constants.arq import KEY_CHARACTER_GENERATION_TASK
from game_server.config.settings.process.prestart import (
    CHARACTER_POOL_TARGET_SIZE,
    CHARACTER_GENERATION_MAX_BATCH_SIZE,
  
)
from game_server.config.settings.redis_setting import BATCH_TASK_TTL_SECONDS
from game_server.config.settings.character.generator_settings import (
    TARGET_POOL_QUALITY_DISTRIBUTION,
    CHARACTER_TEMPLATE_QUALITY_CONFIG
)


class CharacterTemplatePlanner:
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–∞–º–∫–∞—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    """
    # üëá –®–ê–ì 2: –í __init__ –û–°–¢–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –í–ù–ï–î–†–Ø–ï–ú–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò
    # –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –º—ã –≤–Ω–µ–¥—Ä—è–µ–º —Ñ–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ —Å–µ—Å—Å–∏–π
    @inject.autoparams(
        'logger',
        'char_pool_repo_factory',
        'redis_batch_store'
    )
    def __init__(
        self,
        logger: logging.Logger,
        char_pool_repo_factory: Callable[[AsyncSession], ICharacterPoolRepository],
        redis_batch_store: RedisBatchStore
    ):
        self.logger = logger
        # self._session_factory –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        self._char_pool_repo_factory = char_pool_repo_factory
        self.redis_batch_store = redis_batch_store

        # üëá –®–ê–ì 3: –ü–†–ò–°–í–ê–ò–í–ê–ï–ú –ö–û–ù–°–¢–ê–ù–¢–´, –ü–û–õ–£–ß–ï–ù–ù–´–ï –ß–ï–†–ï–ó –ò–ú–ü–û–†–¢
        self.pool_target_size = CHARACTER_POOL_TARGET_SIZE
        self.max_batch_size = CHARACTER_GENERATION_MAX_BATCH_SIZE
        self.batch_ttl = BATCH_TASK_TTL_SECONDS
        self.target_quality_distribution = TARGET_POOL_QUALITY_DISTRIBUTION
        self.character_template_quality_config = CHARACTER_TEMPLATE_QUALITY_CONFIG

        self.logger.debug(f"CharacterTemplatePlanner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞: {self.pool_target_size}")

    # üëá –®–ê–ì 4: –î–ï–õ–ê–ï–ú –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–´–ú
    @transactional(AsyncSessionLocal)
    async def pre_process(
        self,
        session: AsyncSession, # <-- –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–µ—Å—Å–∏—é
        playable_races_data: List[Dict[str, Any]],
        desired_gender_ratio: float,
        target_pool_total_size_override: Optional[int] = None
    ) -> List[Dict[str, Any]]:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É—é—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        """
        self.logger.debug("–ó–∞–ø—É—Å–∫ pre_process –¥–ª—è CharacterTemplatePlanner...")
        current_target_pool_size = target_pool_total_size_override if target_pool_total_size_override is not None else self.pool_target_size

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        char_pool_repo = self._char_pool_repo_factory(session)
        
        current_pool_count, current_gender_counts, current_quality_counts = await self._get_pool_analysis_data(char_pool_repo)

        num_to_generate_overall = max(0, current_target_pool_size - current_pool_count)

        if num_to_generate_overall <= 0:
            self.logger.debug(f"–ü—É–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ({current_pool_count}/{current_target_pool_size}) –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
            return []

        self.logger.info(f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å {num_to_generate_overall} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")

        specs_list = await generate_pre_batch_from_pool_needs(
            playable_races_data=playable_races_data,
            desired_gender_ratio=desired_gender_ratio,
            target_pool_total_size=current_target_pool_size,
            num_to_generate_for_batch=num_to_generate_overall,
            current_gender_counts_in_pool=current_gender_counts,
            current_quality_counts_in_pool=current_quality_counts,
            target_quality_distribution_config=self.target_quality_distribution,
            character_template_quality_config_param=self.character_template_quality_config
        )

        if not specs_list:
            return []

        return await self._save_specs_as_batches(specs_list)

    async def _get_pool_analysis_data(self, char_pool_repo: ICharacterPoolRepository) -> tuple[int, Counter, Counter]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ë–î."""
        all_chars = await char_pool_repo.get_all_characters()
        available_chars = [char for char in all_chars if getattr(char, 'status', 'available') == 'available']
        
        current_total = len(available_chars)
        gender_counts = Counter(getattr(char, 'gender', '').upper() for char in available_chars if getattr(char, 'gender'))
        quality_counts = Counter(getattr(char, 'quality_level') for char in available_chars if hasattr(char, 'quality_level'))

        self.logger.debug(f"–ê–Ω–∞–ª–∏–∑ –ø—É–ª–∞: {current_total} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö, –≥–µ–Ω–¥–µ—Ä—ã: {gender_counts}, –∫–∞—á–µ—Å—Ç–≤–∞: {quality_counts}")
        return current_total, gender_counts, quality_counts

    async def _save_specs_as_batches(self, specs_list: List[CharacterGenerationSpec]) -> List[Dict[str, Any]]:
        """
        –†–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –Ω–∞ –±–∞—Ç—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ Redis.
        """
        self.logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–ø–∏—Å–æ–∫ –∏–∑ {len(specs_list)} —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis...")
        
        character_chunks = list(split_into_batches(specs_list, self.max_batch_size))
        self.logger.info(f"–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ {len(character_chunks)} –±–∞—Ç—á–µ–π.")

        tasks_for_arq = []
        for chunk in character_chunks:
            if not chunk: continue
            batch_id = str(uuid.uuid4())
            batch_data = {
                "specs": [spec.model_dump(by_alias=True) for spec in chunk],
                "target_count": len(chunk), "status": "pending"
            }
            was_saved = await self.redis_batch_store.save_batch(
                key_template=KEY_CHARACTER_GENERATION_TASK,
                batch_id=batch_id, batch_data=batch_data, ttl_seconds=self.batch_ttl
            )
            if was_saved:
                tasks_for_arq.append({"batch_id": batch_id})
                self.logger.info(f"–ë–∞—Ç—á ID '{batch_id}' (–ø–µ—Ä—Å–æ–Ω–∞–∂–∏) —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis.")
            else:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞—Ç—á ID '{batch_id}' (–ø–µ—Ä—Å–æ–Ω–∞–∂–∏) –≤ Redis.")
        
        self.logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª {len(tasks_for_arq)} –±–∞—Ç—á–µ–π –∑–∞–¥–∞—á.")
        return tasks_for_arq