# game_server/Logic/ApplicationLogic/world_orchestrator/workers/character_generator/handler_utils/creature_type_data_orchestrator.py

import logging
import inject
from typing import Any, Dict, List, Callable
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ DTO
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_0lvl.interfaces_meta_data_0lvl import (
    ICreatureTypeRepository,
    ICreatureTypeInitialSkillRepository
)
from game_server.Logic.InfrastructureLogic.db_instance import AsyncSessionLocal

from game_server.Logic.InfrastructureLogic.app_post.utils.transactional_decorator import transactional
from game_server.contracts.dtos.orchestrator.data_models import CreatureTypeData, PlayableRaceData

class CreatureTypeDataOrchestrator:
    # üëá –®–ê–ì 3: –£–ë–ò–†–ê–ï–ú session_factory –ò–ó –í–ù–ï–î–†–ï–ù–ò–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
    @inject.autoparams(
        'logger',
        'creature_type_repo_factory',
        'creature_type_initial_skill_repo_factory'
    )
    def __init__(
        self,
        logger: logging.Logger,
        creature_type_repo_factory: Callable[[AsyncSession], ICreatureTypeRepository],
        creature_type_initial_skill_repo_factory: Callable[[AsyncSession], ICreatureTypeInitialSkillRepository]
    ):
        self.logger = logger
        # self._session_factory –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        self._creature_type_repo_factory = creature_type_repo_factory
        self._creature_type_initial_skill_repo_factory = creature_type_initial_skill_repo_factory

        self.playable_races_list: List[PlayableRaceData] = []
        self.logger.info("‚úÖ CreatureTypeDataOrchestrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    @transactional(AsyncSessionLocal)
    async def prepare_data(self, session: AsyncSession):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        """
        self.logger.debug("CreatureTypeDataOrchestrator: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        creature_type_repo = self._creature_type_repo_factory(session)
        initial_skill_repo = self._creature_type_initial_skill_repo_factory(session)

        # --- –ë—ã–≤—à–∞—è –ª–æ–≥–∏–∫–∞ load_raw_data ---
        all_creature_types_orm = await creature_type_repo.get_all()
        raw_creature_types_data: List[CreatureTypeData] = []
        for ct in all_creature_types_orm:
            try:
                raw_creature_types_data.append(CreatureTypeData.from_orm(ct))
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ ORM CreatureType –≤ DTO: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: {getattr(ct, 'creature_type_id', 'N/A')}")

        # --- –ë—ã–≤—à–∞—è –ª–æ–≥–∏–∫–∞ process_data_for_generators ---
        self.playable_races_list = []
        for creature_type_dto in raw_creature_types_data:
            if creature_type_dto.is_playable and creature_type_dto.category == "RACE":
                initial_skills_orm = await initial_skill_repo.get_initial_skills_for_creature_type(creature_type_dto.creature_type_id)
                initial_skills_data = [
                    {k: v for k, v in skill.__dict__.items() if not k.startswith('_sa_')}
                    for skill in initial_skills_orm
                ]
                try:
                    self.playable_races_list.append(
                        PlayableRaceData(**creature_type_dto.dict(), initial_skills=initial_skills_data)
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PlayableRaceData DTO –¥–ª—è {creature_type_dto.creature_type_id}: {e}")

        self.logger.info(f"CreatureTypeDataOrchestrator: –ù–∞–π–¥–µ–Ω–æ {len(self.playable_races_list)} –∏–≥—Ä–æ–≤—ã—Ö —Ä–∞—Å.")

    def get_playable_race_list(self) -> List[PlayableRaceData]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–≤—ã—Ö —Ä–∞—Å."""
        return self.playable_races_list