# game_server/Logic/DomainLogic/worker_generator_templates/worker_character_template/character_batch_processor.py

import logging
from typing import List, Dict, Any, Optional, Callable # –î–æ–±–∞–≤–ª–µ–Ω Callable
from collections import Counter
from sqlalchemy.ext.asyncio import AsyncSession # –î–æ–±–∞–≤–ª–µ–Ω AsyncSession

from game_server.Logic.ApplicationLogic.shared_logic.worker_generator.generator_name.name_orchestrator import NameOrchestrator
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.character_generator.handler_utils.character_cache_handlers import get_character_background_id_from_cache, get_character_personality_id_from_cache
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.character_generator.handler_utils.character_meta_handler import get_character_meta_attributes
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.character_generator.handler_utils.character_stats_generator import generate_generated_base_stats
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.character_generator.handler_utils.redis_task_status_handler import set_task_final_status

from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data.reference_data_reader import ReferenceDataReader
# üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –§–ê–ë–†–ò–ö–ò –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_1lvl.interfaces_meta_data_1lvl import ICharacterPoolRepository

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RedisBatchStore
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.redis_batch_store import RedisBatchStore
from game_server.contracts.dtos.orchestrator.data_models import CharacterGenerationSpec


class CharacterBatchProcessor:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
    –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–±—Ä–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–µ—Å—Å–∏–µ–π, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∏–∑–≤–Ω–µ.
    """
    def __init__(
        self,
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –§–ê–ë–†–ò–ö–£ ICharacterPoolRepository
        char_pool_repo_factory: Callable[[AsyncSession], ICharacterPoolRepository],
        redis_batch_store: RedisBatchStore,
        reference_data_reader: ReferenceDataReader,
        logger: logging.Logger,
    ):
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–±—Ä–∏–∫—É char_pool_repo
        self._char_pool_repo_factory = char_pool_repo_factory
        self.redis_batch_store = redis_batch_store
        self.reference_data_reader = reference_data_reader
        self.logger = logger
        
        self.logger.info("CharacterBatchProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def process_batch(
        self,
        session: AsyncSession, # <--- –î–û–ë–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        redis_worker_batch_id: str,
        task_key_template: str,
        batch_specs: List[CharacterGenerationSpec]
    ) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –∑–∞–¥–∞—á –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        log_prefix = f"CHAR_BATCH_PROC_ID({redis_worker_batch_id}):"
        self.logger.info(f"{log_prefix} –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ –≤ —Ä–∞–º–∫–∞—Ö –≤–Ω–µ—à–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∏–∑–≤–Ω–µ
        char_pool_repo = self._char_pool_repo_factory(session)

        if not batch_specs:
            self.logger.info(f"{log_prefix} –ë–∞—Ç—á –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–∞–∫ –ø—É—Å—Ç–æ–π.")
            await set_task_final_status(
                redis_worker_batch_id, task_key_template, status="completed",
                final_generated_count=0, target_count=0, was_empty=True,
                redis_batch_store=self.redis_batch_store,
            )
            # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—à–µ—Å—Ç–æ—è—â–∏–º ARQ-—Ç–∞—Å–∫–æ–º, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            return

        target_count = len(batch_specs)
        generated_character_data_for_db: List[Dict[str, Any]] = []
        error_count = 0

        for spec in batch_specs:
            try:
                core_attributes_dto = generate_generated_base_stats(spec.quality_level)
                meta_attributes_dto = await get_character_meta_attributes(spec.quality_level)
                first_name, last_name = NameOrchestrator.generate_character_name(gender=spec.gender)
                personality_id = await get_character_personality_id_from_cache(self.reference_data_reader)
                background_story_id = await get_character_background_id_from_cache(self.reference_data_reader)

                pool_entry_data = {
                    "creature_type_id": spec.creature_type_id,
                    "gender": spec.gender,
                    "quality_level": spec.quality_level,
                    "base_stats": core_attributes_dto.model_dump(),
                    "initial_role_name": "UNASSIGNED_ROLE",
                    "initial_skill_levels": {},
                    "name": first_name,
                    "surname": last_name,
                    "personality_id": personality_id,
                    "background_story_id": background_story_id,
                    "visual_appearance_data": {},
                    "is_unique": meta_attributes_dto.is_unique,
                    "rarity_score": meta_attributes_dto.rarity_score,
                    "status": "available",
                }
                generated_character_data_for_db.append(pool_entry_data)
            except Exception as e:
                self.logger.error(f"{log_prefix} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}", exc_info=True)
                error_count += 1
        
        generated_count = 0
        if generated_character_data_for_db:
            try:
                self.logger.info(f"{log_prefix} –ü–æ–ø—ã—Ç–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {len(generated_character_data_for_db)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ë–î.")
                # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–û–ó–î–ê–ù–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø
                generated_count = await char_pool_repo.upsert_many(generated_character_data_for_db)
                self.logger.info(f"{log_prefix} –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {generated_count} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ë–î.")
            except Exception as db_e:
                self.logger.critical(f"{log_prefix} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞–∫–µ—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: {db_e}", exc_info=True)
                error_count = target_count
                generated_count = 0
                # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤—ã—à–µ—Å—Ç–æ—è—â–∏–º ARQ-—Ç–∞—Å–∫–æ–º.
                raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ë–î: {db_e}") from db_e

        final_generated_count = generated_count
        final_status = "completed"
        error_message = None

        if error_count > 0 or final_generated_count < target_count:
            final_status = "completed_with_warnings"
            error_message = f"{error_count} –æ—à–∏–±–æ–∫. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {final_generated_count}/{target_count}."
        
        if final_generated_count == 0 and error_count > 0:
            final_status = "failed"
            error_message = "–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –≤ –±–∞—Ç—á–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫."

        await set_task_final_status(
            redis_worker_batch_id, task_key_template, status=final_status,
            final_generated_count=final_generated_count, target_count=target_count,
            error_message=error_message,
            redis_batch_store=self.redis_batch_store,
        )
        
        self.logger.info(f"{log_prefix} –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {final_generated_count}/{target_count}. –°—Ç–∞—Ç—É—Å: {final_status}.")
        # –ö–æ–º–º–∏—Ç/–æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—à–µ—Å—Ç–æ—è—â–∏–º ARQ-—Ç–∞—Å–∫–æ–º.