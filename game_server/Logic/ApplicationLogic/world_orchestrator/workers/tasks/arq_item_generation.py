# game_server\Logic\ApplicationLogic\world_orchestrator\workers\tasks\arq_item_generation.py

import logging
from typing import Dict, Any, Optional, List, Callable
# import inject # üî• –£–î–ê–õ–ï–ù–û: inject –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è autoparams –∑–¥–µ—Å—å
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à transactional –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
from game_server.Logic.InfrastructureLogic.app_post.utils.transactional_decorator import transactional

# –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∞—Å—Å–æ–≤/–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ ctx
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.item_generator.item_batch_processor import ItemBatchProcessor
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_1lvl.interfaces_meta_data_1lvl import IEquipmentTemplateRepository
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.redis_batch_store import RedisBatchStore
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_reference_data_reader import IReferenceDataReader


from game_server.Logic.InfrastructureLogic.db_instance import AsyncSessionLocal
from game_server.config.constants.arq import KEY_ITEM_GENERATION_TASK
from game_server.contracts.dtos.orchestrator.data_models import ItemGenerationSpec


# üî• –£–î–ê–õ–ï–ù–û: @inject.autoparams() –ø–æ–ª–Ω–æ—Å—Ç—å—é
@transactional(AsyncSessionLocal)
async def process_item_generation_batch_task(
    session: AsyncSession,  # <--- –°–µ—Å—Å–∏—è –æ—Ç @transactional
    ctx: Dict[str, Any],    # <--- –ö–æ–Ω—Ç–µ–∫—Å—Ç ARQ (—Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
    batch_id: str,          # <--- batch_id –æ—Ç ARQ
    # üî• –£–î–ê–õ–ï–ù–û: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –±–æ–ª—å—à–µ –Ω–µ –∏–Ω–∂–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –∞ –±–µ—Ä—É—Ç—Å—è –∏–∑ ctx
    # redis_batch_store: RedisBatchStore,
    # reference_data_reader: IReferenceDataReader,
    # equipment_template_repo_factory: Callable[[AsyncSession], IEquipmentTemplateRepository],
    # logger: logging.Logger,
    **kwargs,               # –î–ª—è –ª—é–±—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ARQ
) -> None:
    """
    ARQ-–∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
    –í—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ –µ–¥–∏–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ ctx
    logger: logging.Logger = ctx["logger"]
    redis_batch_store: RedisBatchStore = ctx["redis_batch_store"]
    reference_data_reader: IReferenceDataReader = ctx["redis_reader"] # –ò–º—è "redis_reader" –≤ ctx
    equipment_template_repo_factory: Callable[[AsyncSession], IEquipmentTemplateRepository] = ctx["equipment_template_repo_factory"]


    log_prefix = f"ITEM_TASK_ID({batch_id}):"
    logger.info(f"{log_prefix} –ó–∞–ø—É—Å–∫ ARQ-–∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ).")

    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞—Ç—á–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É —Ñ–∞–±—Ä–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        item_batch_processor = ItemBatchProcessor(
            equipment_template_repo_factory=equipment_template_repo_factory,
            redis_batch_store=redis_batch_store,
            reference_data_reader=reference_data_reader,
            logger=logger
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞ —á–µ—Ä–µ–∑ redis_batch_store.load_batch
        batch_data = await redis_batch_store.load_batch(
            batch_id=batch_id,
            key_template=KEY_ITEM_GENERATION_TASK
        )

        if not batch_data or 'specs' not in batch_data:
            logger.warning(f"{log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—á–∞ '{batch_id}' –∏–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç 'specs'.")
            return

        raw_batch_specs = batch_data['specs']

        # --- –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
        validated_item_specs: List[ItemGenerationSpec] = []
        for spec_dict in raw_batch_specs:
            try:
                validated_item_specs.append(ItemGenerationSpec(**spec_dict))
            except Exception as e:
                logger.error(f"{log_prefix} –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º: {spec_dict}", exc_info=True)
                raise

        if not validated_item_specs:
            logger.error(f"{log_prefix} –í—Å–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–∞—Ç—á–∞ '{batch_id}' –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏.")
            return

        # --- –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ ---
        # –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –≤ ItemBatchProcessor
        await item_batch_processor.process_batch(
            session=session,
            redis_worker_batch_id=batch_id,
            task_key_template=KEY_ITEM_GENERATION_TASK,
            batch_specs=validated_item_specs
        )
        logger.info(f"{log_prefix} –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

    except Exception as e:
        logger.critical(f"{log_prefix} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ ARQ-–∑–∞–¥–∞—á–µ: {e}", exc_info=True)
        raise