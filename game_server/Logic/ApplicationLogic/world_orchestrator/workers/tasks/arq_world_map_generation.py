# game_server\Logic\ApplicationLogic\world_orchestrator\workers\world_map_generator\arq_world_map_generation.py

import logging
from typing import Dict, Any, Callable
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à transactional –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
from game_server.Logic.InfrastructureLogic.app_post.utils.transactional_decorator import transactional

# –ò–º–ø–æ—Ä—Ç—ã –∫–ª–∞—Å—Å–æ–≤/–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ ctx
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.world_map_generator.world_map_generator import WorldMapGenerator
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.core_world.interfaces_core_world import IGameLocationRepository
from game_server.Logic.InfrastructureLogic.app_mongo.repository_groups.world_state.interfaces_world_state_mongo import ILocationStateRepository, IWorldStateRepository


from game_server.Logic.InfrastructureLogic.db_instance import AsyncSessionLocal


@transactional(AsyncSessionLocal)
async def generate_world_map_task(
    session: AsyncSession,      # <--- –°–µ—Å—Å–∏—è –æ—Ç @transactional
    ctx: Dict[str, Any],        # <--- –ö–æ–Ω—Ç–µ–∫—Å—Ç ARQ
    job_id: str,                # <--- job_id –æ—Ç ARQ
    **kwargs,                   # –î–ª—è –ª—é–±—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ARQ
) -> bool:
    """
    ARQ-–∑–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ "—Å–∫–µ–ª–µ—Ç–∞" –∫–∞—Ä—Ç—ã –º–∏—Ä–∞.
    """
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ ctx ---
    logger: logging.Logger = ctx["logger"]
    pg_location_repo_factory: Callable[[AsyncSession], IGameLocationRepository] = ctx["pg_location_repo_factory"]
    mongo_world_repo: IWorldStateRepository = ctx["mongo_world_repo"]
    location_state_repo: ILocationStateRepository = ctx["location_state_repo"]
    # --- –£–î–ê–õ–ï–ù–û ---: –ë–æ–ª—å—à–µ –Ω–µ –ø–æ–ª—É—á–∞–µ–º redis_reader –∏–∑ ctx
    # redis_reader: ReferenceDataReader = ctx["redis_reader"]

    log_prefix = f"WORLD_MAP_GEN_TASK (ID: {job_id}):"
    logger.info(f"{log_prefix} –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ).")

    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è PostgreSQL —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π
        pg_location_repo = pg_location_repo_factory(session)

        # 2. –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–∞—Ä—Ç—ã
        world_generator = WorldMapGenerator(
            pg_location_repo=pg_location_repo,
            mongo_world_repo=mongo_world_repo,
            location_state_repo=location_state_repo,
            logger=logger
        )

        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        success = await world_generator.generate_and_store_world_map()

        if success:
            logger.info(f"{log_prefix} ‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        else:
            logger.error(f"{log_prefix} ‚ùå –ó–∞–¥–∞—á–∞ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –º–∏—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.")

        return success

    except Exception as e:
        logger.critical(f"{log_prefix} üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: {e}", exc_info=True)
        raise