# game_server/Logic/ApplicationLogic/world_orchestrator/workers/world_map_generator/world_map_generator.py

import logging
from typing import List, Dict, Any, Optional
from datetime import datetime

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.core_world.interfaces_core_world import IGameLocationRepository
from game_server.Logic.InfrastructureLogic.app_mongo.repository_groups.world_state.interfaces_world_state_mongo import ILocationStateRepository, IWorldStateRepository
# --- –£–î–ê–õ–ï–ù–û ---: –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω Redis Reader –¥–ª—è –≤—ã—Ö–æ–¥–æ–≤
# from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data.reference_data_reader import ReferenceDataReader

from game_server.contracts.db_models.mongo.world_map.data_models import ActiveLocationDocument, LocationExit, StaticLocationData, WorldRegionDocument
from game_server.contracts.dtos.orchestrator.data_models import GameLocationData
from game_server.database.models.models import GameLocation 
from pydantic import BaseModel
from game_server.Logic.ApplicationLogic.shared_logic.world_map_service.world_map_builder_utils import WorldMapBuilderUtils

class WorldMapGenerator:
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –º–∏—Ä–∞.
    1. –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ PostgreSQL.
    2. –°–æ–±–∏—Ä–∞–µ—Ç –≤ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–≥–∏–æ–Ω–æ–≤ (–≤—ã—Ö–æ–¥—ã –±–µ—Ä—É—Ç—Å—è –∏–∑ —Ç–µ—Ö –∂–µ –¥–∞–Ω–Ω—ã—Ö).
    3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ MongoDB.
    4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–π.
    """
    def __init__(self,
                 pg_location_repo: IGameLocationRepository,
                 mongo_world_repo: IWorldStateRepository,
                 location_state_repo: ILocationStateRepository,
                 # --- –£–î–ê–õ–ï–ù–û ---: redis_reader –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
                 logger: logging.Logger):
        self.pg_location_repo = pg_location_repo
        self.mongo_world_repo = mongo_world_repo
        self.location_state_repo = location_state_repo
        # --- –£–î–ê–õ–ï–ù–û ---: self.redis_reader = redis_reader
        self.logger = logger

    async def generate_and_store_world_map(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å."""
        self.logger.info("üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –º–∏—Ä–∞...")
        try:
            # 1. EXTRACT: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ PostgreSQL
            all_orm_locations: List[GameLocation] = await self.pg_location_repo.get_all() 
            
            if not all_orm_locations:
                self.logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –≤ PostgreSQL. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
                return True

            all_pg_locations_dtos: List[GameLocationData] = [
                GameLocationData.model_validate(loc.to_dict()) for loc in all_orm_locations
            ]

            if not all_pg_locations_dtos:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ORM-–æ–±—ä–µ–∫—Ç—ã –≤ DTO. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
                return True

            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_pg_locations_dtos)} –ª–æ–∫–∞—Ü–∏–π –∏–∑ PostgreSQL. –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É —Ä–µ–≥–∏–æ–Ω–æ–≤...")

            # 2. TRANSFORM: –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
            world_regions = await self._build_regions(all_pg_locations_dtos)
            
            if not world_regions:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞.")
                return True

            # 3. LOAD: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã –≤ MongoDB
            self.logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(world_regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –≤ MongoDB...")
            
            regions_to_save: List[Dict[str, Any]] = []
            for region in world_regions:
                region_dict = region.model_dump()
                region_dict['_id'] = region_dict.pop('id')
                regions_to_save.append(region_dict)
            
            if regions_to_save:
                result = await self.mongo_world_repo.bulk_save_regions(regions_to_save)
                self.logger.info(
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ: {getattr(result, 'upserted_count', 0) + getattr(result, 'modified_count', 0)} —Ä–µ–≥–∏–æ–Ω–æ–≤."
                )
            
            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            self.logger.info("üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ª–æ–∫–∞—Ü–∏–π...")
            await self._initialize_and_store_dynamic_locations(all_pg_locations_dtos)
            
            return True

        except Exception as e:
            self.logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –º–∏—Ä–∞: {e}", exc_info=True)
            return False

    async def _build_regions(self, all_pg_locations: List[GameLocationData]) -> List[WorldRegionDocument]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–µ–≥–∏–æ–Ω–æ–≤."""
        locations_by_access_key = WorldMapBuilderUtils.get_location_by_access_key(all_pg_locations)
        children_by_parent_key = WorldMapBuilderUtils.build_parent_child_map(all_pg_locations)
        root_locations = WorldMapBuilderUtils.get_root_locations(all_pg_locations)
        
        # --- –£–î–ê–õ–ï–ù–û ---: –í–µ—Å—å –±–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤—è–∑–µ–π –∏–∑ Redis —É–¥–∞–ª–µ–Ω –æ—Ç—Å—é–¥–∞.

        final_regions = []
        for root_loc in root_locations: 
            region_locations: Dict[str, StaticLocationData] = {}
            
            await self._collect_location_tree(
                current_loc_access_key=root_loc.access_key, 
                locations_by_access_key=locations_by_access_key,
                children_by_parent_key=children_by_parent_key,
                output_dict=region_locations
            )
            
            if region_locations:
                region_doc = WorldRegionDocument(
                    id=root_loc.access_key,
                    name=root_loc.name,
                    locations=region_locations
                )
                final_regions.append(region_doc)
                
        return final_regions

    async def _collect_location_tree(self, current_loc_access_key: str, 
                                     locations_by_access_key: Dict[str, GameLocationData], 
                                     children_by_parent_key: Dict,
                                     output_dict: Dict):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –¥–µ—Ä–µ–≤–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."""
        if current_loc_access_key in output_dict:
            return

        pg_loc = locations_by_access_key.get(current_loc_access_key)
        if not pg_loc:
            return

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –†–∞–±–æ—Ç–∞–µ–º —Å exits –∫–∞–∫ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏, –∞ –Ω–µ —Å–ª–æ–≤–∞—Ä—è–º–∏ ---
        exits_for_current_loc = []
        if pg_loc.exits:
            for exit_obj in pg_loc.exits:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º .label –∏ .target_location_id
                    exits_for_current_loc.append(LocationExit(
                        label=exit_obj.label,
                        target_location_id=exit_obj.target_location_id
                    ))
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã—Ö–æ–¥ {exit_obj} –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ {pg_loc.access_key}: {e}")

        child_locs = children_by_parent_key.get(current_loc_access_key, [])
        
        try:
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –Ø–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º presentation –≤ —Å–ª–æ–≤–∞—Ä—å ---
            presentation_dict = None
            if isinstance(pg_loc.presentation, BaseModel):
                presentation_dict = pg_loc.presentation.model_dump()
            elif isinstance(pg_loc.presentation, dict):
                presentation_dict = pg_loc.presentation

            static_data = StaticLocationData(
                location_id=pg_loc.access_key, 
                parent_id=pg_loc.parent_id,
                name=pg_loc.name,
                description=pg_loc.description,
                type=pg_loc.specific_category,
                exits=exits_for_current_loc,
                unified_display_type=pg_loc.unified_display_type,
                specific_category=pg_loc.specific_category,
                presentation=presentation_dict, # <-- –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
                entry_point_location_id=pg_loc.entry_point_location_id,
                flavor_text_options=pg_loc.flavor_text_options,
                tags=pg_loc.tags,
            )
            output_dict[current_loc_access_key] = static_data
        except Exception as dto_e:
            self.logger.error(f"–û—à–∏–±–∫–∞ DTO –¥–ª—è '{current_loc_access_key}': {dto_e}", exc_info=True)
            return
        
        for child_loc in child_locs: 
            await self._collect_location_tree(
                child_loc.access_key, 
                locations_by_access_key,
                children_by_parent_key,
                output_dict
            )

    # all_pg_locations —Ç–µ–ø–µ—Ä—å List[GameLocationData]
    async def _initialize_and_store_dynamic_locations(self, all_pg_locations: List[GameLocationData]) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏.
        """
        self.logger.debug("Debug: _initialize_and_store_dynamic_locations started.")
        dynamic_locations_to_save: List[Dict[str, Any]] = []

        # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º World_instance_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏ (–í–ê–ñ–ù–û: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID)
        # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ–¥–∏–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –º–∏—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ.
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞:
        world_instance_id = "main_world_instance_001" 
        self.logger.debug(f"Debug: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è world_instance_id: {world_instance_id}")

        # pg_loc —Ç–µ–ø–µ—Ä—å GameLocationData DTO
        for pg_loc in all_pg_locations: 
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
                active_loc_doc = ActiveLocationDocument(
                    _id=pg_loc.access_key, 
                    world_instance_id=world_instance_id,
                    last_update=datetime.utcnow(),
                    players=[],
                    npcs=[],
                    items_on_ground=[],
                    resource_nodes=[],
                    location_effects=[]
                )
                dynamic_locations_to_save.append(active_loc_doc.model_dump(by_alias=True))
                self.logger.debug(f"Debug: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω ActiveLocationDocument –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {pg_loc.access_key}") 
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ActiveLocationDocument –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ '{pg_loc.access_key}': {e}", exc_info=True) 
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DTO
        
        if not dynamic_locations_to_save:
            self.logger.warning("–ù–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.")
            self.logger.debug("Debug: dynamic_locations_to_save is empty.")
            return True

        self.logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(dynamic_locations_to_save)} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ª–æ–∫–∞—Ü–∏–π. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ MongoDB...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è bulk_save_active_locations
            result = await self.location_state_repo.bulk_save_active_locations(dynamic_locations_to_save)
                        
            self.logger.debug(f"Debug: –†–µ–∑—É–ª—å—Ç–∞—Ç bulk_save_active_locations: upserted_count={getattr(result, 'upserted_count', 'N/A')}, modified_count={getattr(result, 'modified_count', 'N/A')}, matched_count={getattr(result, 'matched_count', 'N/A')}")
            
            self.logger.info(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ MongoDB: "
                f"{getattr(result, 'upserted_count', 0) + getattr(result, 'modified_count', 0)} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π."
            )
            self.logger.debug("Debug: _initialize_and_store_dynamic_locations finished successfully.")
            return True
        except Exception as e:
            self.logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π –≤ MongoDB: {e}", exc_info=True)
            self.logger.debug("Debug: _initialize_and_store_dynamic_locations finished with error.")
            return False
