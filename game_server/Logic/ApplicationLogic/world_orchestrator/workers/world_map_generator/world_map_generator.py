# game_server/Logic/ApplicationLogic/world_orchestrator/workers/world_map_generator/world_map_generator.py

import logging
from typing import List, Dict, Any, Optional
from collections import defaultdict
from datetime import datetime

# --- –ò–º–ø–æ—Ä—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∏ DTO ---
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.core_world.interfaces_core_world import IGameLocationRepository
from game_server.Logic.InfrastructureLogic.app_mongo.repository_groups.world_state.interfaces_world_state_mongo import ILocationStateRepository, IWorldStateRepository
from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data.reference_data_reader import ReferenceDataReader


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º GameLocationData –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–æ–≤—ã–º –ø–æ–ª—è–º –∏–∑ YAML

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ORM-–º–æ–¥–µ–ª—å GameLocation –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è

from game_server.contracts.db_models.mongo.world_map.data_models import ActiveLocationDocument, LocationExit, StaticLocationData, WorldRegionDocument
from game_server.contracts.dtos.orchestrator.data_models import GameLocationData
from game_server.database.models.models import GameLocation 

from pydantic import BaseModel # –î–ª—è isinstance –ø—Ä–æ–≤–µ—Ä–∫–∏

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
from game_server.Logic.ApplicationLogic.shared_logic.world_map_service.world_map_builder_utils import WorldMapBuilderUtils

class WorldMapGenerator:
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –º–∏—Ä–∞.
    1. –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ PostgreSQL.
    2. –û–±–æ–≥–∞—â–∞–µ—Ç –∏—Ö –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–≤—è–∑—è—Ö –∏–∑ Redis.
    3. –°–æ–±–∏—Ä–∞–µ—Ç –≤ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–≥–∏–æ–Ω–æ–≤.
    4. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ MongoDB.
    5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ª–æ–∫–∞—Ü–∏–π.
    """
    def __init__(self,
                 pg_location_repo: IGameLocationRepository,
                 mongo_world_repo: IWorldStateRepository,
                 location_state_repo: ILocationStateRepository,
                 redis_reader: ReferenceDataReader,
                 logger: logging.Logger):
        self.pg_location_repo = pg_location_repo
        self.mongo_world_repo = mongo_world_repo
        self.location_state_repo = location_state_repo
        self.redis_reader = redis_reader
        self.logger = logger

    async def generate_and_store_world_map(self) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å."""
        self.logger.info("üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –º–∏—Ä–∞...")
        self.logger.debug("--- Debug: generate_and_store_world_map started ---")
        
        try:
            # 1. EXTRACT: –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ PostgreSQL (ORM-–æ–±—ä–µ–∫—Ç—ã)
            self.logger.debug("Debug: –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π –∏–∑ PostgreSQL.")
            all_orm_locations: List[GameLocation] = await self.pg_location_repo.get_all() 
            
            if not all_orm_locations:
                self.logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –≤ PostgreSQL. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
                self.logger.debug("Debug: –®–∞–≥ 1 –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: all_orm_locations is empty.")
                return True # –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Å–ø–µ—à–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ—à–∏–±–∫–∏ –Ω–µ—Ç

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ORM-–æ–±—ä–µ–∫—Ç—ã –≤ Pydantic DTO
            all_pg_locations_dtos: List[GameLocationData] = []
            for loc in all_orm_locations:
                try:
                    all_pg_locations_dtos.append(GameLocationData.model_validate(loc.to_dict()))
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ ORM-–æ–±—ä–µ–∫—Ç–∞ GameLocation '{loc.access_key}' –≤ DTO: {e}", exc_info=True)
                    continue 

            if not all_pg_locations_dtos:
                self.logger.warning("–í—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ PostgreSQL –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ DTO. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
                return True

            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_pg_locations_dtos)} –ª–æ–∫–∞—Ü–∏–π –∏–∑ PostgreSQL. –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É —Ä–µ–≥–∏–æ–Ω–æ–≤...")
            self.logger.debug(f"Debug: –ü–µ—Ä–≤—ã–µ 5 –ª–æ–∫–∞—Ü–∏–π –∏–∑ PG: {[loc.access_key for loc in all_pg_locations_dtos[:5]]}") 

            # 2. TRANSFORM: –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
            self.logger.debug("Debug: –®–∞–≥ 2: –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É —Ä–µ–≥–∏–æ–Ω–æ–≤ (_build_regions).")
            world_regions = await self._build_regions(all_pg_locations_dtos) # –ü–µ—Ä–µ–¥–∞–µ–º DTO
            
            if not world_regions:
                self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É parent_id –∏–ª–∏ –Ω–∞–ª–∏—á–∏–µ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π.")
                self.logger.debug("Debug: –®–∞–≥ 2 –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: world_regions is empty.")
                return True

            # 3. LOAD: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã –≤ MongoDB (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞)
            self.logger.info(f"–°–æ–±—Ä–∞–Ω–æ {len(world_regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –≤ MongoDB...")
            self.logger.debug(f"Debug: –®–∞–≥ 3: –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –≤ MongoDB (bulk_save_regions).")
            
            self.logger.debug(f"Debug: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(world_regions)}")
            
            regions_to_save: List[Dict[str, Any]] = []
            for i, region in enumerate(world_regions):
                try:
                    # üî• –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –Ø–≤–Ω–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Å '_id'
                    region_dict = region.model_dump(by_alias=False) # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º 'id'
                    region_dict['_id'] = region_dict['id'] # –ö–æ–ø–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 'id' –≤ '_id'
                    del region_dict['id'] # –£–¥–∞–ª—è–µ–º 'id', –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ –≤ Mongo
                    regions_to_save.append(region_dict) 
                except Exception as dump_e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ model_dump –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {i} (ID: {getattr(region, 'id', 'N/A')}): {dump_e}", exc_info=True) # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'id'
                    continue
            
            if not regions_to_save:
                self.logger.warning("–í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏—Ö —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã –≤ MongoDB –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                self.logger.debug("Debug: –®–∞–≥ 3 –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º: regions_to_save is empty after dump.")
                return True

            result = await self.mongo_world_repo.bulk_save_regions(regions_to_save)
            
            self.logger.debug(f"Debug: –†–µ–∑—É–ª—å—Ç–∞—Ç bulk_save_regions: upserted_count={getattr(result, 'upserted_count', 'N/A')}, modified_count={getattr(result, 'modified_count', 'N/A')}, matched_count={getattr(result, 'matched_count', 'N/A')}")

            self.logger.info(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ MongoDB: "
                f"{getattr(result, 'upserted_count', 0) + getattr(result, 'modified_count', 0)} —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã."
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π
            self.logger.info("üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ª–æ–∫–∞—Ü–∏–π...")
            self.logger.debug("Debug: –®–∞–≥ 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π.")

            await self._initialize_and_store_dynamic_locations(all_pg_locations_dtos) # –ü–µ—Ä–µ–¥–∞–µ–º DTO
            
            self.logger.debug("--- Debug: generate_and_store_world_map finished successfully ---")
            return True

        except Exception as e:
            self.logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –º–∏—Ä–∞: {e}", exc_info=True)
            self.logger.debug("--- Debug: generate_and_store_world_map finished with critical error ---")
            return False

    # all_pg_locations —Ç–µ–ø–µ—Ä—å List[GameLocationData]
    async def _build_regions(self, all_pg_locations: List[GameLocationData]) -> List[WorldRegionDocument]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –≤ –∏–µ—Ä–∞—Ä—Ö–∏—é —Ä–µ–≥–∏–æ–Ω–æ–≤."""
        self.logger.debug("Debug: _build_regions started.")
        
        # --- –®–∞–≥ 2.1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
        self.logger.debug("Debug: –®–∞–≥ 2.1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö WorldMapBuilderUtils.")
        # –ü–µ—Ä–µ–¥–∞–µ–º GameLocationData DTO
        locations_by_access_key: Dict[str, GameLocationData] = WorldMapBuilderUtils.get_location_by_access_key(all_pg_locations)
        children_by_parent_key = WorldMapBuilderUtils.build_parent_child_map(all_pg_locations)
        root_locations = WorldMapBuilderUtils.get_root_locations(all_pg_locations)
        
        self.logger.debug(f"Debug: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∫–∞—Ü–∏–π –ø–æ access_key: {len(locations_by_access_key)}")
        self.logger.debug(f"Debug: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö —Å–≤—è–∑–µ–π: {len(children_by_parent_key)}")
        self.logger.debug(f"Debug: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏–π: {len(root_locations)}")

        # --- –®–∞–≥ 2.2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–µ–π –∏–∑ Redis –∑–∞—Ä–∞–Ω–µ–µ ---
        self.logger.debug("Debug: –®–∞–≥ 2.2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤—è–∑–µ–π –∏–∑ Redis (get_world_connections_data).")
        all_connections_data = await self.redis_reader.get_world_connections_data()
        
        if not all_connections_data:
            self.logger.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–≤—è–∑—è—Ö –ª–æ–∫–∞—Ü–∏–π –≤ Redis. –†–µ–≥–∏–æ–Ω—ã –±—É–¥—É—Ç –±–µ–∑ –≤—ã—Ö–æ–¥–æ–≤.")
            self.logger.debug("Debug: all_connections_data is empty.")

        connections_by_from_key = defaultdict(list)
        for conn in all_connections_data:
            try:
                if isinstance(conn, Dict) and 'from' in conn and 'description' in conn and 'to' in conn:
                    connections_by_from_key[conn['from']].append(LocationExit(label=conn['description'], target_location_id=conn['to']))
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–∏ –≤ Redis: {conn}. –û–∂–∏–¥–∞–ª—Å—è —Å–ª–æ–≤–∞—Ä—å —Å 'from', 'description', 'to'. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            except Exception as conn_e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤—è–∑–∏ {conn}: {conn_e}", exc_info=True)
                continue
        self.logger.debug(f"Debug: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π –ø–æ from_key: {len(connections_by_from_key)}")


        # --- –®–∞–≥ 2.3: –°–±–æ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ ---
        self.logger.debug("Debug: –®–∞–≥ 2.3: –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤.")
        final_regions = []
        # root_loc —Ç–µ–ø–µ—Ä—å GameLocationData DTO
        for i, root_loc in enumerate(root_locations): 
            self.logger.debug(f"Debug: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ {i+1}/{len(root_locations)}: {root_loc.access_key}") 
            region_locations: Dict[str, StaticLocationData] = {}
            
            await self._collect_location_tree(
                current_loc_access_key=root_loc.access_key, 
                locations_by_access_key=locations_by_access_key,
                children_by_parent_key=children_by_parent_key,
                all_connections_by_from_key=connections_by_from_key,
                output_dict=region_locations
            )
            
            if not region_locations:
                self.logger.warning(f"–†–µ–≥–∏–æ–Ω, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å '{root_loc.access_key}', –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–∫–∞—Ü–∏–π –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ –¥–µ—Ä–µ–≤–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω.") 
                continue

            try:
                region_doc = WorldRegionDocument(
                    id=root_loc.access_key, # ÔøΩ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'id' –≤–º–µ—Å—Ç–æ '_id' –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DTO
                    name=root_loc.name,
                    locations=region_locations
                )
                final_regions.append(region_doc)
                self.logger.debug(f"Debug: –†–µ–≥–∏–æ–Ω '{root_loc.access_key}' —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.") 
            except Exception as region_e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ WorldRegionDocument –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏ '{root_loc.access_key}': {region_e}", exc_info=True) 
                continue
                
        self.logger.debug(f"Debug: _build_regions finished. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(final_regions)} WorldRegionDocument.")
        return final_regions

    # locations_by_access_key —Ç–µ–ø–µ—Ä—å Dict[str, GameLocationData]
    async def _collect_location_tree(self, current_loc_access_key: str, locations_by_access_key: Dict[str, GameLocationData], 
                                      children_by_parent_key: Dict, all_connections_by_from_key: Dict,
                                      output_dict: Dict):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –¥–µ—Ä–µ–≤–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."""
        self.logger.debug(f"Debug: _collect_location_tree: –û–±—Ä–∞–±–æ—Ç–∫–∞ {current_loc_access_key}")
        
        if current_loc_access_key in output_dict:
            self.logger.debug(f"Debug: _collect_location_tree: –õ–æ–∫–∞—Ü–∏—è {current_loc_access_key} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫.")
            return

        # pg_loc —Ç–µ–ø–µ—Ä—å GameLocationData DTO
        pg_loc: GameLocationData = locations_by_access_key.get(current_loc_access_key)
        if not pg_loc:
            self.logger.warning(f"–õ–æ–∫–∞—Ü–∏—è —Å access_key '{current_loc_access_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö PostgreSQL. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return

        # --- –®–∞–≥ 2.4: –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Redis (—Å–≤—è–∑–∏/–≤—ã—Ö–æ–¥—ã) ---
        self.logger.debug(f"Debug: –®–∞–≥ 2.4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –¥–ª—è {current_loc_access_key}.")
        exits_for_current_loc = all_connections_by_from_key.get(current_loc_access_key, [])
        self.logger.debug(f"Debug: –ù–∞–π–¥–µ–Ω–æ {len(exits_for_current_loc)} –≤—ã—Ö–æ–¥–æ–≤ –¥–ª—è {current_loc_access_key}.")

        # --- –®–∞–≥ 2.5: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ DTO –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è MongoDB (StaticLocationData) ---
        self.logger.debug(f"Debug: –®–∞–≥ 2.5: –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ StaticLocationData –¥–ª—è {current_loc_access_key}.")
        # child_locs —Ç–µ–ø–µ—Ä—å List[GameLocationData]
        child_locs: List[GameLocationData] = children_by_parent_key.get(current_loc_access_key, [])
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º access_key –¥–ª—è child_access_keys
        child_access_keys = [child.access_key for child in child_locs] 

        try:
            static_data = StaticLocationData(
                location_id=pg_loc.access_key, 
                parent_id=pg_loc.parent_id,
                type=pg_loc.specific_category, 
                name=pg_loc.name,
                description=pg_loc.description,
                exits=exits_for_current_loc,
                unified_display_type=pg_loc.unified_display_type,
                specific_category=pg_loc.specific_category,
                presentation=pg_loc.presentation.model_dump() if isinstance(pg_loc.presentation, BaseModel) else pg_loc.presentation, 
                entry_point_location_id=pg_loc.entry_point_location_id,
                flavor_text_options=pg_loc.flavor_text_options,
                tags=pg_loc.tags,
            )
            self.logger.debug(f"Debug: StaticLocationData –¥–ª—è {current_loc_access_key} —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")
        except Exception as dto_e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ DTO –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ StaticLocationData –¥–ª—è '{current_loc_access_key}': {dto_e}", exc_info=True)
            return

        output_dict[current_loc_access_key] = static_data
        
        # child_loc —Ç–µ–ø–µ—Ä—å GameLocationData DTO
        for child_loc in child_locs: 
            await self._collect_location_tree(
                child_loc.access_key, 
                locations_by_access_key,
                children_by_parent_key,
                all_connections_by_from_key,
                output_dict
            )
        self.logger.debug(f"Debug: _collect_location_tree: –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è {current_loc_access_key}.")

    # all_pg_locations —Ç–µ–ø–µ—Ä—å List[GameLocationData]
    async def _initialize_and_store_dynamic_locations(self, all_pg_locations: List[GameLocationData]) -> bool:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏.
        """
        self.logger.debug("Debug: _initialize_and_store_dynamic_locations started.")
        dynamic_locations_to_save: List[Dict[str, Any]] = []

        # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º World_instance_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –∑–∞–≥–ª—É—à–∫–∏ (–í–ê–ñ–ù–û: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID)
        # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ–¥–∏–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –º–∏—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ.
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞:
        world_instance_id = "main_world_instance_001" 
        self.logger.debug(f"Debug: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è world_instance_id: {world_instance_id}")

        # pg_loc —Ç–µ–ø–µ—Ä—å GameLocationData DTO
        for pg_loc in all_pg_locations: 
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
                active_loc_doc = ActiveLocationDocument(
                    _id=pg_loc.access_key, 
                    world_instance_id=world_instance_id,
                    last_update=datetime.utcnow(),
                    players=[],
                    npcs=[],
                    items_on_ground=[],
                    resource_nodes=[],
                    location_effects=[]
                )
                dynamic_locations_to_save.append(active_loc_doc.model_dump(by_alias=True))
                self.logger.debug(f"Debug: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω ActiveLocationDocument –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏: {pg_loc.access_key}") 
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ActiveLocationDocument –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ '{pg_loc.access_key}': {e}", exc_info=True) 
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ª–æ–∫–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å DTO
        
        if not dynamic_locations_to_save:
            self.logger.warning("–ù–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ª–æ–∫–∞—Ü–∏–∏. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.")
            self.logger.debug("Debug: dynamic_locations_to_save is empty.")
            return True

        self.logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(dynamic_locations_to_save)} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ª–æ–∫–∞—Ü–∏–π. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ MongoDB...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è bulk_save_active_locations
            result = await self.location_state_repo.bulk_save_active_locations(dynamic_locations_to_save)
                        
            self.logger.debug(f"Debug: –†–µ–∑—É–ª—å—Ç–∞—Ç bulk_save_active_locations: upserted_count={getattr(result, 'upserted_count', 'N/A')}, modified_count={getattr(result, 'modified_count', 'N/A')}, matched_count={getattr(result, 'matched_count', 'N/A')}")
            
            self.logger.info(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ MongoDB: "
                f"{getattr(result, 'upserted_count', 0) + getattr(result, 'modified_count', 0)} –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π."
            )
            self.logger.debug("Debug: _initialize_and_store_dynamic_locations finished successfully.")
            return True
        except Exception as e:
            self.logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ª–æ–∫–∞—Ü–∏–π –≤ MongoDB: {e}", exc_info=True)
            self.logger.debug("Debug: _initialize_and_store_dynamic_locations finished with error.")
            return False
