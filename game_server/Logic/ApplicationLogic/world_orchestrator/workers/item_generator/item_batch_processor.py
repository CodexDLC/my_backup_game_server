# game_server/Logic/DomainLogic/worker_generator_templates/worker_item_template/item_batch_processor.py

import logging
from typing import List, Dict, Any, Callable # –î–æ–±–∞–≤–ª–µ–Ω Callable
from sqlalchemy.ext.asyncio import AsyncSession # –î–æ–±–∞–≤–ª–µ–Ω AsyncSession

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RedisBatchStore
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.redis_batch_store import RedisBatchStore
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –§–ê–ë–†–ò–ö–ò –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_1lvl.interfaces_meta_data_1lvl import IEquipmentTemplateRepository
from game_server.contracts.dtos.orchestrator.data_models import ItemGenerationSpec


from .handler_utils.item_redis_operations import update_redis_task_status
from .handler_utils.item_template_creation_utils import generate_item_templates_from_specs
from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data.reference_data_reader import ReferenceDataReader

REDIS_TASK_COMPLETION_TTL_SECONDS: int = 3600 # 1 —á–∞—Å


class ItemBatchProcessor:
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–µ–π –∑–∞–¥–∞—á –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
    –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–±—Ä–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–µ—Å—Å–∏–µ–π, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∏–∑–≤–Ω–µ.
    """
    def __init__(
        self,
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –§–ê–ë–†–ò–ö–£ IEquipmentTemplateRepository
        equipment_template_repo_factory: Callable[[AsyncSession], IEquipmentTemplateRepository],
        redis_batch_store: RedisBatchStore,
        reference_data_reader: ReferenceDataReader,
        logger: logging.Logger,
    ):
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–±—Ä–∏–∫—É equipment_template_repo
        self._equipment_template_repo_factory = equipment_template_repo_factory
        self.logger = logger
        self.redis_batch_store = redis_batch_store
        self.reference_data_reader = reference_data_reader
        self.logger.info("ItemBatchProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def process_batch(
        self,
        session: AsyncSession, # <--- –î–û–ë–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        redis_worker_batch_id: str,
        task_key_template: str,
        batch_specs: List[ItemGenerationSpec]
    ) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞ –∑–∞–¥–∞—á.
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        log_prefix = f"ITEM_BATCH_PROCESSOR_ID({redis_worker_batch_id}):"
        self.logger.info(f"{log_prefix} –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –≤–Ω–µ—à–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∏–∑–≤–Ω–µ
        equipment_template_repo = self._equipment_template_repo_factory(session)

        if not batch_specs:
            self.logger.warning(f"{log_prefix} –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
            await update_redis_task_status(
                redis_worker_batch_id=redis_worker_batch_id,
                task_key_template=task_key_template,
                status="completed_with_warnings",
                log_prefix=log_prefix,
                error_message="Received empty batch specs list",
                ttl_seconds_on_completion=REDIS_TASK_COMPLETION_TTL_SECONDS,
                redis_batch_store=self.redis_batch_store,
                final_generated_count=0
            )
            # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—à–µ—Å—Ç–æ—è—â–∏–º ARQ-—Ç–∞—Å–∫–æ–º, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            return

        try:
            generated_templates = await generate_item_templates_from_specs(
                batch_specs=batch_specs,
                log_prefix=log_prefix,
                reference_data_reader=self.reference_data_reader,
            )

            if not generated_templates:
                self.logger.warning(f"{log_prefix} –ù–∏ –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
                await update_redis_task_status(
                    redis_worker_batch_id=redis_worker_batch_id,
                    task_key_template=task_key_template,
                    status="completed_with_warnings",
                    log_prefix=log_prefix,
                    error_message="No templates generated from specs",
                    ttl_seconds_on_completion=REDIS_TASK_COMPLETION_TTL_SECONDS,
                    redis_batch_store=self.redis_batch_store,
                    final_generated_count=0
                )
                # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—à–µ—Å—Ç–æ—è—â–∏–º ARQ-—Ç–∞—Å–∫–æ–º, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                return

            self.logger.info(f"{log_prefix} –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generated_templates)} —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")

            try:
                # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –°–û–ó–î–ê–ù–ù–´–ô –≠–ö–ó–ï–ú–ü–õ–Ø–† –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø
                success_count = await equipment_template_repo.upsert_many(
                    generated_templates
                )
                success = success_count > 0
                if not success:
                    self.logger.warning(f"{log_prefix} –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, 0 –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
            except Exception as e:
                self.logger.error(f"{log_prefix} –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ –≤ –ë–î: {e}", exc_info=True)
                success = False
                
            status_to_set = "completed" if success else "failed"
            error_msg = None if success else "Failed to persist templates to DB"
            
            await update_redis_task_status(
                redis_worker_batch_id=redis_worker_batch_id,
                task_key_template=task_key_template,
                status=status_to_set,
                log_prefix=log_prefix,
                error_message=error_msg,
                ttl_seconds_on_completion=REDIS_TASK_COMPLETION_TTL_SECONDS,
                redis_batch_store=self.redis_batch_store,
                final_generated_count=len(generated_templates) if success else 0
            )
            if not success:
                raise Exception(error_msg)

        except Exception as e:
            self.logger.error(f"{log_prefix} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {e}", exc_info=True)
            await update_redis_task_status(
                redis_worker_batch_id=redis_worker_batch_id,
                task_key_template=task_key_template,
                status="failed",
                log_prefix=log_prefix,
                error_message=str(e),
                redis_batch_store=self.redis_batch_store,
                final_generated_count=0
            )
            # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—ã—à–µ—Å—Ç–æ—è—â–∏–º ARQ-—Ç–∞—Å–∫–æ–º
            raise