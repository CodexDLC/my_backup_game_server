# game_server/Logic/ApplicationLogic/world_orchestrator/workers/item_generator/item_template_planner.py

import asyncio
import logging
import inject
from typing import Callable
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã —ç—Ç–æ–º—É –∫–ª–∞—Å—Å—É
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_reference_data_reader import IReferenceDataReader
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.redis_batch_store import RedisBatchStore
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_1lvl.interfaces_meta_data_1lvl import IEquipmentTemplateRepository
from game_server.Logic.InfrastructureLogic.db_instance import AsyncSessionLocal
from game_server.config.constants.item import DEFAULT_RARITY_LEVEL, MATERIAL_COMPATIBILITY_RULES
from game_server.config.settings.process.prestart import ITEM_GENERATION_BATCH_SIZE, ITEM_GENERATION_LIMIT
from game_server.config.settings.redis_setting import BATCH_TASK_TTL_SECONDS

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å —Å stateless-–ª–æ–≥–∏–∫–æ–π
from . import item_template_planner_logic as item_logic

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã


from game_server.Logic.InfrastructureLogic.app_post.utils.transactional_decorator import transactional

class ItemTemplatePlanner:
    """
    –ö–ª–∞—Å—Å-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä. –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
    """
    # üëá –®–ê–ì 3: –£–ë–ò–†–ê–ï–ú session_factory –ò–ó –í–ù–ï–î–†–ï–ù–ò–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
    @inject.autoparams(
        'logger', 'equipment_template_repo_factory',
        'central_redis_client', 'reference_data_reader', 'redis_batch_store'
    )
    def __init__(
        self,
        logger: logging.Logger,
        equipment_template_repo_factory: Callable[[AsyncSession], IEquipmentTemplateRepository],
        central_redis_client: CentralRedisClient,
        reference_data_reader: IReferenceDataReader,
        redis_batch_store: RedisBatchStore
    ):
        self.logger = logger
        # self._session_factory –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
        self._equipment_template_repo_factory = equipment_template_repo_factory
        self._central_redis_client = central_redis_client
        self._reference_data_reader = reference_data_reader
        self._redis_batch_store = redis_batch_store
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        self.item_generation_limit = ITEM_GENERATION_LIMIT
        self.item_generation_batch_size = ITEM_GENERATION_BATCH_SIZE
        self.batch_task_ttl = BATCH_TASK_TTL_SECONDS
        self.default_rarity_level = DEFAULT_RARITY_LEVEL
        self.material_compatibility_rules = MATERIAL_COMPATIBILITY_RULES
        
        print(f"--- DEBUG: –ê–¢–†–ò–ë–£–¢ BATCH_TTL –£–°–ü–ï–®–ù–û –£–°–¢–ê–ù–û–í–õ–ï–ù: {self.batch_task_ttl} ---")
        
    @transactional(AsyncSessionLocal)
    async def run_item_planning(self, session: AsyncSession):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥, –∑–∞–ø—É—Å–∫–∞—é—â–∏–π –≤—Å—é —Ü–µ–ø–æ—á–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤.
        """
        self.logger.info("‚û°Ô∏è ItemTemplatePlanner: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ü–†–ï–î–ú–ï–¢–û–í...")
        
        # üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –Ω–∞ —Ç—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
        item_base_res, materials_res, suffixes_res = await asyncio.gather(
            self._reference_data_reader.get_all_item_bases(),
            self._reference_data_reader.get_all_materials(),
            self._reference_data_reader.get_all_suffixes()
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ None, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
        item_base = item_base_res if item_base_res is not None else {}
        materials = materials_res if materials_res is not None else {}
        suffixes = suffixes_res if suffixes_res is not None else {}
        
        # 2. –°—Ç—Ä–æ–∏–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –ø—É–ª
        etalon_pool = item_logic.build_etalon_item_codes(
            item_base_data=item_base, materials_data=materials, suffixes_data=suffixes,
            default_rarity_level=self.default_rarity_level,
            material_compatibility_rules=self.material_compatibility_rules,
            logger=self.logger
        )
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–¥—ã –∏–∑ –ë–î
        equipment_repo = self._equipment_template_repo_factory(session)
        existing_codes = await equipment_repo.get_all_item_codes()
        
        # 4. –ù–∞—Ö–æ–¥–∏–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
        missing_specs = item_logic.find_missing_specs(etalon_pool, set(existing_codes))
        
        # 5. –ì–æ—Ç–æ–≤–∏–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤–æ—Ä–∫–µ—Ä–∞
        item_tasks = await item_logic.prepare_tasks_for_missing_items(
            missing_specs=missing_specs,
            item_generation_limit=self.item_generation_limit,
            item_generation_batch_size=self.item_generation_batch_size,
            batch_task_ttl=self.batch_task_ttl,
            redis_batch_store=self._redis_batch_store,
            logger=self.logger
        )
        
        return item_tasks