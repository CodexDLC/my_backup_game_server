# -*- coding: utf-8 -*-
import uuid
from pathlib import Path
import logging
from typing import Callable, List, Any, Dict, Optional, Set, Tuple
from sqlalchemy.ext.asyncio import AsyncSession
import inject
from sqlalchemy import select # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç select –¥–ª—è _get_all_pks_from_db

from game_server.Logic.CoreServices.utils.seed_utils import get_pk_column_name
from game_server.Logic.CoreServices.services.data_version_manager import DataVersionManager
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_0lvl.interfaces_meta_data_0lvl import (
    IAbilityRepository, IBackgroundStoryRepository, ICreatureTypeRepository, IMaterialRepository,
    IModifierLibraryRepository, IPersonalityRepository, ISkillRepository, ICreatureTypeInitialSkillRepository, IStaticItemTemplateRepository,
    ISuffixRepository
)
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_1lvl.interfaces_meta_data_1lvl import IEquipmentTemplateRepository
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.core_world.interfaces_core_world import IGameLocationRepository, IStateEntityRepository
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.system.interfaces_system import IDataVersionRepository


from game_server.config.constants.seeds import FILE_LOAD_ORDER, SEEDS_DIR

from game_server.database.models.models import Base, Ability, BackgroundStory, CreatureType, GameLocation, Material, \
    ModifierLibrary, Personality, Skills, CreatureTypeInitialSkill, StaticItemTemplate, Suffix, \
    EquipmentTemplate, StateEntity

from .seed_loader import SeedLoader # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ SeedLoader –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–¥–µ—Å—å

from pydantic import BaseModel


class SeedsManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è "—Å–∏–¥–∞–º–∏" (–Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏) –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    –Ø–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü–µ–π.
    """
    @inject.autoparams()
    def __init__(
        self,
        session_factory: Callable[[], AsyncSession], # –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
        ability_repo_factory: Callable[[AsyncSession], IAbilityRepository],
        background_story_repo_factory: Callable[[AsyncSession], IBackgroundStoryRepository],
        creature_type_repo_factory: Callable[[AsyncSession], ICreatureTypeRepository],
        material_repo_factory: Callable[[AsyncSession], IMaterialRepository],
        modifier_library_repo_factory: Callable[[AsyncSession], IModifierLibraryRepository],
        personality_repo_factory: Callable[[AsyncSession], IPersonalityRepository],
        skill_repo_factory: Callable[[AsyncSession], ISkillRepository],
        creature_type_initial_skill_repo_factory: Callable[[AsyncSession], ICreatureTypeInitialSkillRepository],
        static_item_template_repo_factory: Callable[[AsyncSession], IStaticItemTemplateRepository],
        suffix_repo_factory: Callable[[AsyncSession], ISuffixRepository],
        equipment_template_repo_factory: Callable[[AsyncSession], IEquipmentTemplateRepository],
        game_location_repo_factory: Callable[[AsyncSession], IGameLocationRepository],
        state_entity_repo_factory: Callable[[AsyncSession], IStateEntityRepository],
        data_version_repo_factory: Callable[[AsyncSession], IDataVersionRepository],
        logger: logging.Logger,
        loader: SeedLoader # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ SeedLoader –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è
    ):
        self._session_factory = session_factory
        self._ability_repo_factory = ability_repo_factory
        self._background_story_repo_factory = background_story_repo_factory
        self._creature_type_repo_factory = creature_type_repo_factory
        self._material_repo_factory = material_repo_factory
        self._modifier_library_repo_factory = modifier_library_repo_factory
        self._personality_repo_factory = personality_repo_factory
        self._skill_repo_factory = skill_repo_factory
        self._creature_type_initial_skill_repo_factory = creature_type_initial_skill_repo_factory
        self._static_item_template_repo_factory = static_item_template_repo_factory
        self._suffix_repo_factory = suffix_repo_factory
        self._equipment_template_repo_factory = equipment_template_repo_factory
        self._game_location_repo_factory = game_location_repo_factory
        self._state_entity_repo_factory = state_entity_repo_factory
        self._data_version_repo_factory = data_version_repo_factory
        self.logger = logger
        self.loader = loader # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π loader
        self.logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–±—Ä–∏–∫–∞–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ –∫–ª–∞—Å—Å—É –º–æ–¥–µ–ª–∏
        self._model_to_repo_factory: Dict[type[Base], Callable[[AsyncSession], Any]] = {
            Ability: self._ability_repo_factory,
            BackgroundStory: self._background_story_repo_factory,
            CreatureType: self._creature_type_repo_factory,
            Material: self._material_repo_factory,
            ModifierLibrary: self._modifier_library_repo_factory,
            Personality: self._personality_repo_factory,
            Skills: self._skill_repo_factory,
            CreatureTypeInitialSkill: self._creature_type_initial_skill_repo_factory,
            StaticItemTemplate: self._static_item_template_repo_factory,
            Suffix: self._suffix_repo_factory,
            EquipmentTemplate: self._equipment_template_repo_factory,
            GameLocation: self._game_location_repo_factory,
            StateEntity: self._state_entity_repo_factory,
            # DataVersion –Ω–µ –≤–∫–ª—é—á–∞–µ–º —Å—é–¥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        }

        self.inserted_total = 0
        self.updated_total = 0
        self.deleted_total = 0

    @classmethod
    def convert_filename_to_model(cls, filename: str) -> str:
        name = filename.replace('.yml', '')
        if '_' in name and name.split('_')[0].isdigit():
            name = '_'.join(name.split('_')[1:])
        return ''.join(word.capitalize() for word in name.split('_'))

    def _collect_seed_files(self) -> list[Path]:
        self.logger.info(f"üìå –ò—â–µ–º seed-—Ñ–∞–π–ª—ã –≤–Ω—É—Ç—Ä–∏ {SEEDS_DIR}...")
        all_yml_files = list(SEEDS_DIR.rglob('*.yml'))
        ordered_files = []
        ordered_file_names = set(FILE_LOAD_ORDER)
        file_paths_by_name = {f.name: f for f in all_yml_files}

        critical_files_missing = False
        for name in FILE_LOAD_ORDER:
            if name in file_paths_by_name:
                ordered_files.append(file_paths_by_name[name])
            else:
                self.logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –§–∞–π–ª '{name}' –∏–∑ FILE_LOAD_ORDER –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë–µ–∑ –Ω–µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
                critical_files_missing = True

        if critical_files_missing:
            raise RuntimeError("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ seed-—Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Ä–≤–∞–Ω.")

        remaining_files = sorted([f for f in all_yml_files if f.name not in ordered_file_names], key=lambda x: x.name)
        final_file_list = ordered_files + remaining_files

        if not final_file_list:
            self.logger.critical("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ—Ç .yml —Ñ–∞–π–ª–æ–≤ –≤ SEEDS_DIR. –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏–¥–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
            raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç YML-—Ñ–∞–π–ª—ã —Å–∏–¥–æ–≤.")
            
        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(final_file_list)} seed-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        return final_file_list

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω return True –≤ –∫–æ–Ω—Ü–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    async def import_seeds(self, session: AsyncSession, models_module: Any) -> bool:
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–º–ø–æ—Ä—Ç–∞ Seed-–¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            seed_files = self._collect_seed_files()
            if not seed_files:
                raise RuntimeError("–ù–µ—Ç seed-files –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

            grouped_data: Dict[str, Dict[str, Any]] = {}

            for file_path in seed_files:
                model_name = self.convert_filename_to_model(file_path.name)
                model = getattr(models_module, model_name, None)

                if not model:
                    raise RuntimeError(f"–ú–æ–¥–µ–ª—å '{model_name}' –¥–ª—è —Ñ–∞–π–ª–∞ '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
                
                table_name = model.__tablename__
                if table_name not in grouped_data:
                    grouped_data[table_name] = {'model': model, 'files': [], 'all_items': []}
                grouped_data[table_name]['files'].append(file_path)

            self.logger.info(f"üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(grouped_data)} —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {', '.join(grouped_data.keys())}.")

            for table_name, data_info in grouped_data.items():
                model = data_info['model']
                all_items_for_model: List[BaseModel] = []

                self.logger.info(f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}'.")

                for file_path in data_info['files']:
                    items_from_file = await self.loader.load_and_prepare_data_from_yaml(file_path, model)
                    if items_from_file is None:
                        raise RuntimeError(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {file_path.name}. –ò–º–ø–æ—Ä—Ç –ø—Ä–µ—Ä–≤–∞–Ω.")
                    all_items_for_model.extend(items_from_file)
                
                self.logger.debug(f"DEBUG: –ü–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è YAML –¥–ª—è {table_name}, —Å–æ–±—Ä–∞–Ω–æ {len(all_items_for_model)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.")
                
                data_version_repo = self._data_version_repo_factory(session) # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∑–¥–µ—Å—å

                if not all_items_for_model:
                    self.logger.critical(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –î–ª—è —Ç–∞–±–ª–∏—Ü—ã {table_name} —Å–æ–±—Ä–∞–Ω–æ 0 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ YAML-—Ñ–∞–π–ª–æ–≤. "
                                        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ YAML-—Ñ–∞–π–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–ª—é—á–µ 'data'.")
                    
                    items_for_hash_calculation = [item.model_dump(by_alias=True) for item in all_items_for_model]
                    new_hash_empty = DataVersionManager._calculate_data_hash(items_for_hash_calculation)
                    
                    current_hash_empty = await data_version_repo.get_current_version(table_name)
                    if new_hash_empty != current_hash_empty:
                        self.logger.warning(f"‚ö†Ô∏è –í–µ—Ä—Å–∏—è –¥–ª—è '{table_name}' –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ —Ö—ç—à –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö ({new_hash_empty[:8]}...)."
                                            f" –û–±–Ω–æ–≤–ª—è—é –≤–µ—Ä—Å–∏—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                        await data_version_repo.update_version(table_name, new_hash_empty)
                    # await session.commit() # –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ—Ä—Å–∏–∏ - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ DataLoadersHandler
                    continue

                items_for_hash_calculation = [item.model_dump(by_alias=True) for item in all_items_for_model]
                new_hash = DataVersionManager._calculate_data_hash(items_for_hash_calculation)
                
                current_hash = await data_version_repo.get_current_version(table_name)

                if new_hash == current_hash:
                    self.logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è '{table_name}' –∞–∫—Ç—É–∞–ª—å–Ω—ã (—Ö—ç—à: {new_hash[:8]}...). –ü—Ä–æ–ø—É—Å–∫.")
                    # await session.commit() # –ö–æ–º–º–∏—Ç, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ DataLoadersHandler
                    continue
                
                self.logger.info(f"üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è '{table_name}'. –°—Ç–∞—Ä—ã–π —Ö—ç—à: {current_hash[:8] if current_hash else 'N/A'}, –Ω–æ–≤—ã–π: {new_hash[:8]}....")
                
                pk_column_name = get_pk_column_name(model)

                existing_pks_in_db = await self._get_all_pks_from_db(session, model, pk_column_name)
                
                new_pks_from_yaml = set()
                for item in all_items_for_model:
                    if pk_column_name == "creature_type_id" and model.__name__ == "CreatureTypeInitialSkill":
                        if hasattr(item, 'creature_type_id') and hasattr(item, 'skill_key'):
                            new_pks_from_yaml.add((item.creature_type_id, item.skill_key))
                    elif hasattr(item, pk_column_name):
                        pk_value = getattr(item, pk_column_name)
                        if pk_value is not None:
                            new_pks_from_yaml.add(pk_value)
                    else:
                        self.logger.error(f"DTO –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã–π PK –∞—Ç—Ä–∏–±—É—Ç '{pk_column_name}'. –≠–ª–µ–º–µ–Ω—Ç: {item.model_dump()}")
                        raise RuntimeError(f"DTO –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__} –Ω–µ –∏–º–µ–µ—Ç PK –∞—Ç—Ä–∏–±—É—Ç–∞ '{pk_column_name}'.")

                pks_to_delete = existing_pks_in_db - new_pks_from_yaml

                if pks_to_delete:
                    deleted_count = await self._perform_deletions(session, model, pk_column_name, list(pks_to_delete))
                    self.deleted_total += deleted_count
                    self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ '{table_name}'.")

                self.logger.debug(f"DEBUG: –í—ã–∑–æ–≤ self.loader.upsert_data –¥–ª—è {table_name} —Å {len(all_items_for_model)} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.")
                
                repo_factory = self._model_to_repo_factory.get(model)
                if not repo_factory:
                    raise RuntimeError(f"–§–∞–±—Ä–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                repository = repo_factory(session)

                inserted, updated = await self.loader.upsert_data(session, repository, model, all_items_for_model)

                self.inserted_total += inserted
                self.updated_total += updated
                
                if all_items_for_model:
                    await data_version_repo.update_version(table_name, new_hash)
                    self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}'.")
                # else: # –≠—Ç–æ—Ç else –±–ª–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ all_items_for_model –ø—É—Å—Ç, –Ω–æ —Ö—ç—à –∏–∑–º–µ–Ω–∏–ª—Å—è.
                #     self.logger.warning(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –•—ç—à –¥–ª—è '{table_name}' –∏–∑–º–µ–Ω–∏–ª—Å—è, –Ω–æ –≤ YAML-—Ñ–∞–π–ª–∞—Ö –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. "
                #                         f"–í–µ—Ä—Å–∏—è –¥–ª—è –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö ({new_hash[:8]}...) –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞.")
                
                # await session.commit() # –ö–æ–º–º–∏—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - —ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ DataLoadersHandler
            
            self.logger.info("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞ Seed-–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ.") # üî• –î–û–ë–ê–í–õ–ï–ù –õ–û–ì
            return True # üî• –î–û–ë–ê–í–õ–ï–ù: –Ø–≤–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏

        except RuntimeError as e:
            self.logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–º–ø–æ—Ä—Ç–∞ —Å–∏–¥–æ–≤: {e}")
            raise
        except Exception as e:
            self.logger.critical(f"üö® –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å–∏–¥–æ–≤: {e}", exc_info=True)
            raise

    async def _get_all_pks_from_db(self, session: AsyncSession, model: Any, pk_column_name: str) -> Set[Any]:
        self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö PK –∏–∑ –ë–î –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__}...")
        try:
            repo_factory = self._model_to_repo_factory.get(model)
            if not repo_factory:
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–±—Ä–∏–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__}.")
            
            repository = repo_factory(session)

            if not repository:
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__}.")
            
            pks_set: Set[Any] = set()

            entities = []
            if hasattr(repository, 'get_all'):
                entities = await repository.get_all()
            elif model.__name__ == "CreatureTypeInitialSkill": 
                entities = await repository.get_all()
                pks_set = {(e.creature_type_id, e.skill_key) for e in entities}
                self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(pks_set)} PK (—Å–æ—Å—Ç–∞–≤–Ω–æ–π) –∏–∑ –ë–î –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__}.")
                return pks_set
            else:
                self.logger.warning(f"–ú–æ–¥–µ–ª—å {model.__name__} –Ω–µ –∏–º–µ–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ 'get_all()' –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏. "
                                    f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å PK –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é.")
                # Fallback to direct session query if get_all is not available
                from sqlalchemy import select # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è fallback
                stmt = select(getattr(model, pk_column_name))
                result = await session.execute(stmt)
                pks_set = set(result.scalars().all())
                self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(pks_set)} PK –∏–∑ –ë–î –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__} –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é.")
                return pks_set

            pks_set = {getattr(e, pk_column_name) for e in entities}

            self.logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(pks_set)} PK –∏–∑ –ë–î –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__}.")
            return pks_set
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ '{model.__tablename__}': {e}", exc_info=True)
            raise

    def _get_repo_by_model(self, model: Any) -> Optional[Callable[[AsyncSession], Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –§–ê–ë–†–ò–ö–£ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.
        """
        repo_factory = self._model_to_repo_factory.get(model)
        if not repo_factory:
            self.logger.error(f"–§–∞–±—Ä–∏–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ _model_to_repo_factory.")
        return repo_factory

    async def _perform_deletions(self, session: AsyncSession, model: Any, pk_column_name: str, pks_to_delete: List[Any]) -> int:
        if not pks_to_delete:
            return 0
        
        try:
            repo_factory = self._model_to_repo_factory.get(model)
            if not repo_factory:
                self.logger.critical(f"üö® Critical error: Repository factory not found for model {model.__name__} for data cleaning.")
                raise RuntimeError(f"Data cleaning impossible: repository factory for model {model.__name__} not found.")
            
            repository = repo_factory(session)

            deleted_count = 0
            
            if hasattr(repository, 'delete_all_records'):
                deleted_count = await repository.delete_all_records()
            elif hasattr(repository, 'delete_all'):
                deleted_count = await repository.delete_all()
            else:
                self.logger.warning(f"–£–¥–∞–ª–µ–Ω–∏–µ –¥–ª—è {model.__name__} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–∞–∫–µ—Ç–Ω–æ. –£–¥–∞–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É.")
                for pk in pks_to_delete:
                    try:
                        if hasattr(repository, 'delete_by_pk'):
                            await repository.delete_by_pk(pk)
                        else:
                            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__} —Å PK {pk}.")
                            continue
                        deleted_count += 1
                    except Exception as single_delete_e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ PK {pk} –¥–ª—è {model.__name__}: {single_delete_e}", exc_info=True)
                
            self.logger.info(f"üóëÔ∏è –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ '{model.__tablename__}'.")
            return deleted_count
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –∏–∑ '{model.__tablename__}': {e}", exc_info=True)
            raise
