# game_server/Logic/ApplicationLogic/world_orchestrator/workers/load_kesh_database/load_seeds/seed_loader.py

# -*- coding: utf-8 -*-
import uuid
from pathlib import Path
import logging # –î–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ logger
from typing import Dict, Any, Optional, Tuple, Type, List, TypeVar
import inject # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è @inject.autoparams()
import yaml # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å YAML

from game_server.Logic.CoreServices.utils.yaml_readers import YamlReader # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ YamlReader –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω


# üî• –í–ê–ñ–ù–û: –ò–º–ø–æ—Ä—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –∑–¥–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã,
# —Ç–∞–∫ –∫–∞–∫ SeedLoader –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏—Ö –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∏ –≤—ã–±–∏—Ä–∞—Ç—å –≤ _get_repo_by_model.
# –û–Ω –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ –º–µ—Ç–æ–¥–∞—Ö –æ—Ç SeedsManager.
# from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_0lvl.interfaces_meta_data_0lvl import (
#     IAbilityRepository, IBackgroundStoryRepository, ICreatureTypeRepository, IMaterialRepository,
#     IModifierLibraryRepository, IPersonalityRepository, ISkillRepository, ICreatureTypeInitialSkillRepository,
#     IStaticItemTemplateRepository, ISuffixRepository
# )
# from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_1lvl.interfaces_meta_data_1lvl import IEquipmentTemplateRepository
# from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.core_world.interfaces_core_world import IStateEntityRepository, IGameLocationRepository
# from game_server.Logic.InfrastructureLogic.app_post.repository_groups.system.interfaces_system import IDataVersionRepository


from game_server.Logic.CoreServices.utils.seed_utils import get_pk_column_name
from game_server.config.settings.process.prestart import SEEDING_DELETION_BATCH_SIZE

from game_server.contracts.dtos.orchestrator.data_models import AbilityData, BackgroundStoryData, CreatureTypeData, CreatureTypeInitialSkillData, GameLocationData, MaterialData, ModifierLibraryData, PersonalityData, SkillData, StaticItemTemplateData, SuffixData
from game_server.contracts.dtos.state_entity.data_models import StateEntityDTO
from game_server.database.models.models import Base, Ability, BackgroundStory, CreatureType, GameLocation, Material, \
    ModifierLibrary, Personality, Skills, CreatureTypeInitialSkill, StaticItemTemplate, Suffix, \
    EquipmentTemplate, StateEntity


from pydantic import BaseModel, ValidationError


PydanticDtoType = TypeVar('PydanticDtoType', bound=BaseModel)


class SeedLoader:
    MODEL_TO_DTO_MAP: Dict[Type[Base], Type[BaseModel]] = {
        Ability: AbilityData,
        BackgroundStory: BackgroundStoryData,
        CreatureType: CreatureTypeData,
        Material: MaterialData,
        ModifierLibrary: ModifierLibraryData,
        Personality: PersonalityData,
        Skills: SkillData,
        CreatureTypeInitialSkill: CreatureTypeInitialSkillData,
        StaticItemTemplate: StaticItemTemplateData,
        Suffix: SuffixData,
        StateEntity: StateEntityDTO,
        GameLocation: GameLocationData,
    }

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã SeedLoader –¥–ª—è –µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    # (—á—Ç–µ–Ω–∏–µ YAML, –≤–∞–ª–∏–¥–∞—Ü–∏—è DTO), –∞ –Ω–µ –≤—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.
    @inject.autoparams()
    def __init__(
        self,
        logger: logging.Logger,
        yaml_reader: YamlReader # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ YamlReader –∏–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –∏ –∏–º–µ–µ—Ç @inject.autoparams()
    ):
        self.logger = logger
        self.yaml_reader = yaml_reader # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π YamlReader
        self.logger.info("‚úÖ SeedLoader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # üî• –£–î–ê–õ–ï–ù–û: –í—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω–∞–ø—Ä—è–º—É—é.
        # –û–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ë–î.

    @staticmethod
    def load_json_seed(file_path: Path) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON/YAML —Ñ–∞–π–ª–∞."""
        with open(file_path, 'r', encoding='utf-8') as f:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º yaml.safe_load –¥–ª—è YAML —Ñ–∞–π–ª–æ–≤
            data = yaml.safe_load(f)
        return data

    async def load_and_prepare_data_from_yaml(self, file_path: Path, model: Type[Base]) -> Optional[List[PydanticDtoType]]:
        dto_type = self.MODEL_TO_DTO_MAP.get(model)
        if not dto_type:
            self.logger.critical(f"üö® Critical error: Pydantic DTO not found for ORM model '{model.__name__}'. "
                                 f"Check mapping in SeedLoader.MODEL_TO_DTO_MAP.")
            return None

        try:
            pk_for_yaml_reader = get_pk_column_name(model)
        except RuntimeError as e:
            self.logger.error(f"‚ùå {e}. Skipping file {file_path.name}.")
            return None

        try:
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º self.yaml_reader
            items_to_process_dicts = await self.yaml_reader.get_items_from_yaml(file_path, pk_for_yaml_reader)
        except RuntimeError as e:
            self.logger.critical(f"üö® Critical YAML format error in file {file_path.name}: {e}. Skipping file.")
            return None

        if items_to_process_dicts is None:
            return None
        if not items_to_process_dicts:
            self.logger.warning(f"‚ö†Ô∏è File {file_path.name} processed, but contains no data for loading.")
            return []

        validated_items: List[PydanticDtoType] = []
        for item_data_dict in items_to_process_dicts:
            try:
                validated_item = dto_type(**item_data_dict)
                validated_items.append(validated_item)
            except ValidationError as e:
                self.logger.critical(f"üö®üö® Pydantic ValidationError for '{model.__name__}' from file '{file_path.name}' "
                                     f"Element: {item_data_dict}. Error: {e.errors()}", exc_info=True)
                raise RuntimeError(f"Critical Pydantic validation error for file {file_path.name}. "
                                   f"Error: {e.errors()}")
            except Exception as e:
                self.logger.critical(f"üö®üö®üö® Unexpected error during Pydantic validation for '{model.__name__}' from file '{file_path.name}' "
                                     f"Element: {item_data_dict}. Error: {e}", exc_info=True)
                raise RuntimeError(f"Unexpected validation error for file {file_path.name}.")

        self.logger.debug(f"Successfully validated {len(validated_items)} elements for model {model.__name__} from file {file_path.name}.")
        return validated_items

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: upsert_data —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ —Å–µ—Å—Å–∏—é
    async def upsert_data(self, session: Any, repository: Any, model: Type[Base], items_to_process: List[BaseModel]) -> Tuple[int, int]:
        """
        –í—Å—Ç–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
        """
        inserted_count = 0
        updated_count = 0

        if not items_to_process:
            self.logger.info(f"‚ÑπÔ∏è No data to UPSERT for model {model.__name__}.")
            return 0, 0

        transformed_data_list: List[Dict[str, Any]] = []

        orm_columns = [c.name for c in model.__table__.columns]

        for item_dto in items_to_process:
            item_dict_from_dto = item_dto.model_dump(by_alias=False)

            transformed_item = {}
            for col_name in orm_columns:
                if col_name in item_dict_from_dto:
                    value = item_dict_from_dto[col_name]
                    if isinstance(value, BaseModel):
                        transformed_item[col_name] = value.model_dump()
                    elif isinstance(value, uuid.UUID):
                        transformed_item[col_name] = str(value)
                    else:
                        transformed_item[col_name] = value

            transformed_data_list.append(transformed_item)

        total_affected_count = 0
        inserted_count = 0
        updated_count = 0

        try:
            if hasattr(repository, 'upsert_many'):
                total_affected_count = await repository.upsert_many(transformed_data_list)
                inserted_count = total_affected_count
                updated_count = 0
            else:
                self.logger.warning(f"Batch UPSERT for {model.__name__} not implemented in repository. Performing single UPSERT.")
                pk_column_name = get_pk_column_name(model) # –ü–æ–ª—É—á–∞–µ–º PK –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è single upsert

                for item_data in transformed_data_list:
                    pk_value = item_data.get(pk_column_name) # –ü–æ–ª—É—á–∞–µ–º PK –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    if pk_value is None:
                        self.logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ PK –¥–ª—è –º–æ–¥–µ–ª–∏ {model.__name__} –≤ single UPSERT: {item_data}")
                        continue

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç get_by_pk
                    existing_record = None
                    if hasattr(repository, 'get_by_pk'):
                        existing_record = await repository.get_by_pk(pk_value)

                    if existing_record:
                        if hasattr(repository, 'update_by_pk'):
                            await repository.update_by_pk(pk_value, item_data)
                            updated_count += 1
                        else:
                            self.logger.error(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {model.__name__} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç update_by_pk –¥–ª—è single UPSERT.")
                            raise NotImplementedError(f"Update by PK for model {model.__name__} not implemented.")
                    else:
                        if hasattr(repository, 'create'):
                            await repository.create(item_data)
                            inserted_count += 1
                        else:
                            self.logger.error(f"–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π {model.__name__} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç create –¥–ª—è single UPSERT.")
                            raise NotImplementedError(f"Create for model {model.__name__} not implemented.")

                    total_affected_count += 1

            self.logger.info(f"‚úÖ UPSERT completed for {model.__name__}. Affected rows: {total_affected_count}. (Inserted: {inserted_count}, Updated: {updated_count}).")
            return inserted_count, updated_count

        except Exception as e:
            self.logger.critical(f"üö® CRITICAL UPSERT error for {model.__name__}: {e}", exc_info=True)
            raise

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: _clear_model_data —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ SeedsManager (–µ—Å–ª–∏ –æ–Ω —Ç–∞–º –±—ã–ª)
    # async def _clear_model_data(self, model: Type[Base]) -> int: ... (–£–î–ê–õ–ï–ù)
