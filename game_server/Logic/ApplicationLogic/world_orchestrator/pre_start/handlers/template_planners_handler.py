# game_server/Logic/ApplicationLogic/world_orchestrator/pre_start/handlers/template_planners_handler.py

import logging
import inject
from typing import List, Dict

from .base_step_handler import IPreStartStepHandler
from game_server.Logic.InfrastructureLogic.arq_worker.arq_manager import ArqQueueService
# üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ü–õ–ê–ù–ï–†–´
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.item_generator.item_template_planner import ItemTemplatePlanner
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.character_generator.template_generator_character.character_template_planner import CharacterTemplatePlanner
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.character_generator.handler_utils.creature_type_data_orchestrator import CreatureTypeDataOrchestrator
from game_server.config.provider import config


class TemplatePlannersHandler(IPreStartStepHandler):
    """–®–∞–≥ 2: –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –ø–ª–∞–Ω–µ—Ä—ã."""

    # üëá –í–Ω–µ–¥—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ä—ã –∏ —Å–µ—Ä–≤–∏—Å—ã
    @inject.autoparams(
        'item_planner',
        'character_planner',
        'creature_orchestrator',
        'arq_service'
    )
    def __init__(self,
                 item_planner: ItemTemplatePlanner, # <-- –ü–æ–ª—É—á–∞–µ–º –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π –ø–ª–∞–Ω–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
                 character_planner: CharacterTemplatePlanner,
                 creature_orchestrator: CreatureTypeDataOrchestrator,
                 arq_service: ArqQueueService
                 ):
        self.logger = inject.instance(logging.Logger)
        self._item_planner = item_planner
        self._character_planner = character_planner
        self._creature_orchestrator = creature_orchestrator
        self._arq_service = arq_service

    async def execute(self) -> bool:
        self.logger.info("--- ‚öôÔ∏è –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤ ---")
        try:
            # --- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ü—Ä–µ–¥–º–µ—Ç–æ–≤ ---
            item_tasks = await self._item_planner.run_item_planning()
            await self._enqueue_tasks(item_tasks, config.constants.arq.ARQ_TASK_PROCESS_ITEM_GENERATION_BATCH, "–ø—Ä–µ–¥–º–µ—Ç–æ–≤")

            # --- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–µ—Ä—Å–æ–Ω–∞–∂–µ–π ---
            self.logger.info("‚û°Ô∏è –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –ü–ï–†–°–û–ù–ê–ñ–ï–ô...")
            # üëá –≠–¢–ò –î–í–ï –°–¢–†–û–ö–ò –ù–£–ñ–ù–û –ó–ê–ú–ï–ù–ò–¢–¨
            # await self._creature_orchestrator.load_raw_data()
            # await self._creature_orchestrator.process_data_for_generators()
            await self._creature_orchestrator.prepare_data()
            playable_races = self._creature_orchestrator.get_playable_race_list()
            character_tasks = await self._character_planner.pre_process(
                playable_races_data=playable_races,
                desired_gender_ratio=config.settings.prestart.DEFAULT_CHARACTER_GENDER_RATIO
            )
            await self._enqueue_tasks(character_tasks, config.constants.arq.ARQ_TASK_GENERATE_CHARACTER_BATCH, "–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π")

            self.logger.info("--- ‚úÖ –®–∞–≥ 2: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ---")
            return True
        except Exception as e:
            self.logger.critical(f"üö® –®–∞–≥ 2: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}", exc_info=True)
            return False

    # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ _enqueue_tasks —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Ä–≤–∏—Å
    async def _enqueue_tasks(self, tasks: List[Dict], task_name: str, entity_name: str):
        if not tasks:
            self.logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è '{entity_name}' –Ω–µ –Ω–∞—à–µ–ª –∑–∞–¥–∞—á –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")
            return
        
        success_count = 0
        self.logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(tasks)} –±–∞—Ç—á–µ–π –∑–∞–¥–∞—á –¥–ª—è '{entity_name}'. –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å ARQ...")
        for task_entry in tasks:
            batch_id = task_entry.get("batch_id")
            if batch_id:
                try:
                    # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –Ω–∞—à–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
                    await self._arq_service.enqueue_job(task_name, batch_id=batch_id)
                    success_count += 1
                except Exception:
                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ —É–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞
                    pass # –û—à–∏–±–∫–∏ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω—ã –≤ ArqQueueService
            else:
                self.logger.error(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞—á–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç batch_id –≤ {task_entry}.")
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–∞
        self.logger.info(f"–ò—Ç–æ–≥ –¥–ª—è '{entity_name}': —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {success_count} –∑–∞–¥–∞—á.")