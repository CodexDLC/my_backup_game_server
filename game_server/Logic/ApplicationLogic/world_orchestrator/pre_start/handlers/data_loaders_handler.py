# game_server/Logic/ApplicationLogic/world_orchestrator/pre_start/handlers/data_loaders_handler.py

import logging
import inject
from typing import Any, Callable
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è DataLoadersHandler
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.load_kesh_database.load_seeds.seeds_manager import SeedsManager
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.load_kesh_database.load_seeds.reference_data_loader import ReferenceDataLoader

# üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–µ–Ω–Ω–æ –º–æ–¥—É–ª—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –í–°–ï ORM-–º–æ–¥–µ–ª–∏
from game_server.database.models import models as orm_models # –¢–µ–ø–µ—Ä—å orm_models —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ game_server.database.models.models

class DataLoadersHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —à–∞–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ PreStartCoordinator.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ SeedsManager –∏ ReferenceDataLoader.
    –Ø–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü–µ–π.
    """
    @inject.autoparams()
    def __init__(
        self,
        session_factory: Callable[[], AsyncSession], # –§–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
        seeds_manager: SeedsManager, # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º SeedsManager
        reference_data_loader: ReferenceDataLoader, # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º ReferenceDataLoader
        logger: logging.Logger
    ):
        self._session_factory = session_factory
        self._seeds_manager = seeds_manager
        self._reference_data_loader = reference_data_loader
        self.logger = logger
        self.logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def execute(self) -> bool: # üî• –ò–ó–ú–ï–ù–ï–ù–û: –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool
        self.logger.info("‚û°Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: DataLoadersHandler...")
        self.logger.debug("DEBUG: DataLoadersHandler.execute - –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
        
        try:
            async with self._session_factory() as session: # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                self.logger.debug("DEBUG: DataLoadersHandler.execute - –°–µ—Å—Å–∏—è –æ—Ç–∫—Ä—ã—Ç–∞. –ó–∞–ø—É—Å–∫–∞–µ–º SeedsManager.import_seeds.")
                seeds_import_success = await self._seeds_manager.import_seeds(session, orm_models)
                self.logger.debug(f"DEBUG: DataLoadersHandler.execute - SeedsManager.import_seeds –≤–µ—Ä–Ω—É–ª: {seeds_import_success} (—Ç–∏–ø: {type(seeds_import_success)})") # üî• –î–û–ë–ê–í–õ–ï–ù –õ–û–ì
                
                if not seeds_import_success: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞ —Å–∏–¥–æ–≤
                    self.logger.critical("üö® SeedsManager.import_seeds –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π. –ü—Ä–µ—Ä—ã–≤–∞–µ–º DataLoadersHandler.")
                    return False # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –µ—Å–ª–∏ –∏–º–ø–æ—Ä—Ç —Å–∏–¥–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è

                self.logger.info("‚úÖ Seeds –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ PostgreSQL.")
                self.logger.debug("DEBUG: DataLoadersHandler.execute - SeedsManager.import_seeds –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º ReferenceDataLoader.load_and_cache_all_data.")

                reference_data_load_success = await self._reference_data_loader.load_and_cache_all_data()
                self.logger.debug(f"DEBUG: DataLoadersHandler.execute - ReferenceDataLoader.load_and_cache_all_data –≤–µ—Ä–Ω—É–ª: {reference_data_load_success} (—Ç–∏–ø: {type(reference_data_load_success)})") # üî• –î–û–ë–ê–í–õ–ï–ù –õ–û–ì

                if not reference_data_load_success: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    self.logger.critical("üö® ReferenceDataLoader.load_and_cache_all_data –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π. –ü—Ä–µ—Ä—ã–≤–∞–µ–º DataLoadersHandler.")
                    return False # –í–æ–∑–≤—Ä–∞—â–∞–µ–º False, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å

                self.logger.info("‚úÖ –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –≤ Redis.")
                self.logger.debug("DEBUG: DataLoadersHandler.execute - ReferenceDataLoader.load_and_cache_all_data –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–æ–º–º–∏—Ç–∏–º —Å–µ—Å—Å–∏—é.")

                await session.commit() # –ö–æ–º–º–∏—Ç –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —ç—Ç–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                self.logger.info("‚úÖ –®–∞–≥ DataLoadersHandler —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω–∞.")
                self.logger.debug("DEBUG: DataLoadersHandler.execute - –ö–æ–º–º–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º True.")
                return True # üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –Ø–í–ù–´–ô –í–û–ó–í–†–ê–¢ True

        except Exception as e:
            self.logger.critical(f"üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥ 'DataLoadersHandler': {e}", exc_info=True)
            self.logger.critical("üö® –û–°–¢–ê–ù–û–í–ö–ê –ü–†–ï–î–°–¢–ê–†–¢–ê: –®–∞–≥ 'DataLoadersHandler' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
            self.logger.debug("DEBUG: DataLoadersHandler.execute - –ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º False.") # üî• –ò–ó–ú–ï–ù–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º False –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
            return False # üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –Ø–í–ù–´–ô –í–û–ó–í–†–ê–¢ False –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
