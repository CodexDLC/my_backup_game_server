# game_server/Logic/ApplicationLogic/world_orchestrator/pre_start/coordinator_pre_start.py
import logging
import inject
from typing import Callable
from sqlalchemy.ext.asyncio import AsyncSession

from game_server.Logic.InfrastructureLogic.app_post.utils.transactional_decorator import transactional

from .handlers.data_loaders_handler import DataLoadersHandler
from .handlers.template_planners_handler import TemplatePlannersHandler
from .handlers.world_generation_handler import WorldGenerationHandler

class PreStartCoordinator:
    """–ì–ª–∞–≤–Ω—ã–π –¥–∏—Ä–∏–∂–µ—Ä —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–¥—Å—Ç–∞—Ä—Ç–∞."""

    @inject.autoparams()
    def __init__(self, logger: logging.Logger, session_factory: Callable[[], AsyncSession]):
        self.logger = logger
        self._session_factory = session_factory
        self.steps = [
            DataLoadersHandler,
            TemplatePlannersHandler,
            WorldGenerationHandler,
        ]
        self.logger.info(f"PreStartCoordinator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {len(self.steps)}.")

    async def run_pre_start_sequence(self) -> bool:
        """
        –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —à–∞–≥–∏ –ø—Ä–µ–¥—Å—Ç–∞—Ä—Ç–∞.
        –í—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–µ—Ä–Ω—É—Ç–∞ –≤ –µ–¥–∏–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
        """
        @transactional(self._session_factory)
        async def _run(session: AsyncSession) -> bool: # 'session' –∑–¥–µ—Å—å - —ç—Ç–æ —Å–µ—Å—Å–∏—è –¥–ª—è –≤—Å–µ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.logger.info("--- üöÄ –ó–ê–ü–£–°–ö –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–ò –ü–†–ï–î–°–¢–ê–†–¢–ê (–¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–û) ---")
            self.logger.debug("DEBUG: PreStartCoordinator._run - –ù–∞—á–∏–Ω–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –ø–æ —à–∞–≥–∞–º.") # üî• –î–û–ë–ê–í–õ–ï–ù –õ–û–ì

            for step_class in self.steps:
                self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞: {step_class.__name__}...")
                try:
                    handler_instance = inject.instance(step_class)
                    self.logger.debug(f"DEBUG: PreStartCoordinator._run - –ò–Ω—Å—Ç–∞–Ω—Å {step_class.__name__} –ø–æ–ª—É—á–µ–Ω. –í—ã–∑—ã–≤–∞–µ–º execute().") # üî• –î–û–ë–ê–í–õ–ï–ù –õ–û–ì

                    success = await handler_instance.execute()
                    self.logger.debug(f"DEBUG: PreStartCoordinator._run - –®–∞–≥ '{step_class.__name__}' –≤–µ—Ä–Ω—É–ª success={success} (—Ç–∏–ø: {type(success)}).") # üî• –î–û–ë–ê–í–õ–ï–ù –õ–û–ì

                    if not success:
                        self.logger.critical(f"üö® –û–°–¢–ê–ù–û–í–ö–ê –ü–†–ï–î–°–¢–ê–†–¢–ê: –®–∞–≥ '{step_class.__name__}' –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
                        return False
                except Exception as e:
                    self.logger.critical(f"üö® –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —à–∞–≥ '{step_class.__name__}': {e}", exc_info=True)
                    self.logger.debug(f"DEBUG: PreStartCoordinator._run - –ü–æ–π–º–∞–Ω–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —à–∞–≥–∞ '{step_class.__name__}'. –í–æ–∑–≤—Ä–∞—â–∞–µ–º False.") # üî• –î–û–ë–ê–í–õ–ï–ù –õ–û–ì
                    return False

            self.logger.info("--- ‚úÖ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–†–ï–î–°–¢–ê–†–¢–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê (–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –ó–ê–ö–û–ú–ú–ò–ß–ï–ù–ê) ---")
            self.logger.debug("DEBUG: PreStartCoordinator._run - –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º True.") # üî• –î–û–ë–ê–í–õ–ï–ù –õ–û–ì
            return True

        self.logger.debug("DEBUG: PreStartCoordinator.run_pre_start_sequence - –í—ã–∑—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π _run.") # üî• –î–û–ë–ê–í–õ–ï–ù –õ–û–ì
        final_result = await _run()
        self.logger.debug(f"DEBUG: PreStartCoordinator.run_pre_start_sequence - _run –≤–µ—Ä–Ω—É–ª {final_result}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç—Ç–æ.") # üî• –î–û–ë–ê–í–õ–ï–ù –õ–û–ì
        return final_result
