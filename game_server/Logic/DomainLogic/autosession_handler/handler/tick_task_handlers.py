# tick_task_handlers.py


import asyncio
from game_server.Logic.ApplicationLogic.coordinator_tick.tick_utils.tick_logger import logger
from game_server.Logic.DomainLogic.autosession_handler.handler.handler_report import finalize_handler_report



class BaseTaskHandler:
    def __init__(self, task_type, task_package):
        self.task_type = task_type
        self.batch_id = task_package.get("batch_id")  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏–µ batch_id
        self.items = task_package.get("items", [])
        self.redis_client = task_package.get("redis_client")
        self.db_session = task_package.get("db_session")
        self.completed = 0
        self.failed_tasks = []

    async def process(self):
        raise NotImplementedError("–ú–µ—Ç–æ–¥ `process()` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")

    async def finalize(self):
        await finalize_handler_report(
            batch_id=self.batch_id,
            task_type=self.task_type,
            completed=self.completed,
            failed_tasks=self.failed_tasks,
            redis_client=self.redis_client,
            db_session=self.db_session
        )
            
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Crafting

class CraftingHandler(BaseTaskHandler):
    async def process(self):
        logger.debug(f"üöÄ –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ Crafting ({len(self.items)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π)")
        for character_id in self.items:
            try:
                await self.redis_client.set(f"tick_processed_{character_id}", "done")
                logger.debug(f"‚úÖ Crafting –∑–∞–≤–µ—Ä—à—ë–Ω: character_id={character_id}")
                self.completed += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Crafting –¥–ª—è character_id={character_id}: {e}")
                self.failed_tasks.append({"character_id": character_id, "reason": str(e)})
                await asyncio.sleep(1)
        await self.finalize()
        logger.debug(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ Crafting –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {self.completed}, –û—à–∏–±–æ–∫: {len(self.failed_tasks)}")
        return f"–û–±—Ä–∞–±–æ—Ç–∫–∞ crafting –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {self.completed}, –û—à–∏–±–æ–∫: {len(self.failed_tasks)}"

class GeneralHandler(BaseTaskHandler):
    async def process(self):
        logger.debug(f"üöÄ –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ General ({len(self.items)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π)")
        for character_id in self.items:
            try:
                await self.redis_client.set(f"tick_processed_{character_id}", "done")
                logger.debug(f"‚úÖ General –∑–∞–≤–µ—Ä—à—ë–Ω: character_id={character_id}")
                self.completed += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ General –¥–ª—è character_id={character_id}: {e}")
                self.failed_tasks.append({"character_id": character_id, "reason": str(e)})
                await asyncio.sleep(1)
        await self.finalize()
        logger.debug(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ General –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {self.completed}, –û—à–∏–±–æ–∫: {len(self.failed_tasks)}")
        return f"–û–±—Ä–∞–±–æ—Ç–∫–∞ general –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {self.completed}, –û—à–∏–±–æ–∫: {len(self.failed_tasks)}"

class ExplorationHandler(BaseTaskHandler):
    async def process(self):
        logger.debug(f"üöÄ –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ Exploration ({len(self.items)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π)")

        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
        tick_processed_batch = {}

        for character_id in self.items:
            try:
                # ‚úÖ –ò–∑–º–µ–Ω—è–µ–º `tick_status` —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
                if character_id == "1":  # <-- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                    await self.redis_client.hset("tick_status", f"tick_status_1_1747922194", "D")

                # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ `tick_processed_batch`, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
                tick_processed_batch[f"E,{character_id}"] = "done"

                self.completed += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Exploration –¥–ª—è character_id={character_id}: {e}")
                self.failed_tasks.append({"character_id": character_id, "reason": str(e)})
                await asyncio.sleep(1)

        # ‚úÖ –û–¥–Ω–∞ –∑–∞–ø–∏—Å—å –≤ Redis, –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        for key, value in tick_processed_batch.items():
            await self.redis_client.hset("tick_processed", key, value)

        await self.redis_client.hset("batch_status", self.batch_id, "done")
        logger.debug(f"üèÅ batch_id={self.batch_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω! –£—Å–ø–µ—à–Ω–æ: {self.completed}, –û—à–∏–±–æ–∫: {len(self.failed_tasks)}")

        await self.finalize()
        logger.debug(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ Exploration –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {self.completed}, –û—à–∏–±–æ–∫: {len(self.failed_tasks)}")
        return f"–û–±—Ä–∞–±–æ—Ç–∫–∞ exploration –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {self.completed}, –û—à–∏–±–æ–∫: {len(self.failed_tasks)}"


class TradeHandler(BaseTaskHandler):
    async def process(self):
        logger.debug(f"üöÄ –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ Trade ({len(self.items)} –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π)")
        for character_id in self.items:
            try:
                await self.redis_client.set(f"tick_processed_{character_id}", "done")
                logger.debug(f"‚úÖ Trade –∑–∞–≤–µ—Ä—à—ë–Ω: character_id={character_id}")
                self.completed += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Trade –¥–ª—è character_id={character_id}: {e}")
                self.failed_tasks.append({"character_id": character_id, "reason": str(e)})
                await asyncio.sleep(1)
        logger.debug("üßπ –ó–∞–ø—É—â–µ–Ω –º–µ—Ç–æ–¥ finalize()")      
        await self.finalize()
        logger.debug(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ Trade –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –£—Å–ø–µ—à–Ω–æ: {self.completed}, –û—à–∏–±–æ–∫: {len(self.failed_tasks)}")
        return f"–û–±—Ä–∞–±–æ—Ç–∫–∞ trade –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {self.completed}, –û—à–∏–±–æ–∫: {len(self.failed_tasks)}"


# –§–∞–±—Ä–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
def create_task_handler(task_type, task_package):
    mapping = {
        "exploration": ExplorationHandler,
        "crafting": CraftingHandler,
        "trade": TradeHandler,
        "general": GeneralHandler,
    }
    handler_class = mapping.get(task_type)
    if not handler_class:
        raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏: {task_type}")
    return handler_class(task_type, task_package)

# –§—É–Ω–∫—Ü–∏–∏-–æ–±—ë—Ä—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–Ω–µ–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≤—ã–∑–æ–≤–∞–º–∏:
async def handle_exploration_task(task_package):
    handler = create_task_handler("exploration", task_package)
    return await handler.process()

async def handle_crafting_task(task_package):
    handler = create_task_handler("crafting", task_package)
    return await handler.process()

async def handle_trade_task(task_package):
    handler = create_task_handler("trade", task_package)
    return await handler.process()

async def handle_general_task(task_package):
    handler = create_task_handler("general", task_package)
    return await handler.process()
