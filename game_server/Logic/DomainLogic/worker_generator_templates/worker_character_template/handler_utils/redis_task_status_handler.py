import logging
from typing import List, Dict, Any, Tuple, Optional

# üî• –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.task_queue_cache_manager import TaskQueueCacheManager
from game_server.config.constants.redis import CHARACTER_GENERATION_REDIS_TASK_KEY_TEMPLATE
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç task_queue_cache_manager
async def get_task_specs_from_redis(
    batch_id: str,
    task_key_template: str,
    task_queue_cache_manager: TaskQueueCacheManager, # üî• –î–û–ë–ê–í–õ–ï–ù–û
) -> Tuple[Optional[List[Dict[str, Any]]], int, Optional[str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –∏ —Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ TaskQueueCacheManager.
    """
    log_prefix = f"CHAR_SPEC_GET({batch_id}):"
    # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–î–ê–ù–ù–´–ô task_queue_cache_manager
    loaded_data = await task_queue_cache_manager.get_character_task_specs(
        batch_id=batch_id,
        key_template=task_key_template
    )
    
    specs, target_count, error_message = loaded_data

    if error_message:
        logger.error(f"{log_prefix} –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {error_message}")
    
    return specs, target_count, error_message


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç task_queue_cache_manager (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ)
async def update_task_generated_count(
    batch_id: str,
    task_key_template: str,
    task_queue_cache_manager: TaskQueueCacheManager, # üî• –î–û–ë–ê–í–õ–ï–ù–û
    increment_by: int = 1
) -> Optional[int]:
    """–ê—Ç–æ–º–∞—Ä–Ω–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç 'generated_count_in_chunk' —á–µ—Ä–µ–∑ TaskQueueCacheManager."""
    log_prefix = f"CHAR_COUNT_UPDATE({batch_id}):"
    # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–î–ê–ù–ù–´–ô task_queue_cache_manager
    new_count = await task_queue_cache_manager.increment_task_generated_count(
        batch_id=batch_id,
        key_template=task_key_template,
        increment_by=increment_by
    )
    if new_count is not None:
        logger.debug(f"{log_prefix} –°—á–µ—Ç—á–∏–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ '{batch_id}' –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {new_count}.")
    else:
        logger.warning(f"{log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ '{batch_id}'.")
    return new_count

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç task_queue_cache_manager (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ)
async def set_task_final_status(
    batch_id: str,
    task_key_template: str,
    status: str,
    task_queue_cache_manager: TaskQueueCacheManager, # üî• –î–û–ë–ê–í–õ–ï–ù–û
    final_generated_count: Optional[int] = None,
    target_count: Optional[int] = None,
    error_message: Optional[str] = None,
    was_empty: bool = False
) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ TaskQueueCacheManager."""
    log_prefix = f"CHAR_FINAL_STATUS({batch_id}):"
    # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–î–ê–ù–ù–´–ô task_queue_cache_manager
    await task_queue_cache_manager.set_character_task_final_status(
        batch_id=batch_id,
        key_template=task_key_template,
        status=status,
        final_generated_count=final_generated_count,
        target_count=target_count,
        error_message=error_message,
        was_empty=was_empty
    )
    logger.info(f"{log_prefix} –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ '{batch_id}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}'.")