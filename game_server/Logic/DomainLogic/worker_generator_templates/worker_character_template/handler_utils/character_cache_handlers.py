# game_server/Logic/DomainLogic/worker_generator_templates/worker_character_template/handler_utils/character_cache_handlers.py

# -*- coding: utf-8 -*-
import logging
from typing import Dict, Any, Optional, Type, TypeVar
from pydantic import BaseModel

# üëá –ì–õ–ê–í–ù–´–ô –ò–ú–ü–û–†–¢: config provider
from game_server.config.provider import config

# –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ ReferenceDataReader
from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data.reference_data_reader import ReferenceDataReader
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç DTO –¥–ª—è Personality –∏ BackgroundStory
from game_server.common_contracts.start_orcestrator.dtos import PersonalityData, BackgroundStoryData


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ TypeVar –¥–ª—è Pydantic DTO (–æ–±—â–∏–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è DTO)
PydanticDtoType = TypeVar('PydanticDtoType', bound=BaseModel)

async def get_weighted_random_id_from_cached_hash(
    redis_key: str,
    id_field: str, # –ò–º—è –ø–æ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ ID –≤ DTO (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'personality_id')
    weight_field: str,
    reference_data_reader: ReferenceDataReader,
    dto_type: Type[PydanticDtoType],
    default_id: Optional[int] = None
) -> Optional[int]: # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Optional[int]
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π ID —Å —É—á–µ—Ç–æ–º –≤–µ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è ReferenceDataReader.
    ReferenceDataReader –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å DTO –æ–±—ä–µ–∫—Ç—ã.
    """
    selected_dto: Optional[PydanticDtoType] = await reference_data_reader.get_weighted_random_id(
        redis_key=redis_key,
        id_field=id_field, # –≠—Ç–∏ –ø–æ–ª—è –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º DTO
        weight_field=weight_field, # –≠—Ç–∏ –ø–æ–ª—è –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º DTO
        dto_type=dto_type,
        default_id=None # default_id –¥–ª—è ReferenceDataReader –º–æ–∂–µ—Ç –±—ã—Ç—å None, —Ç.–∫. DTO –Ω–µ –∏–º–µ–µ—Ç int ID
    )
    
    if selected_dto:
        # –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç –∏ —è–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ int –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        # (—Ö–æ—Ç—è Pydantic DTO –¥–æ–ª–∂–µ–Ω –±—ã–ª —É–∂–µ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø).
        # –≠—Ç–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏.
        selected_id = getattr(selected_dto, id_field, None)
        if selected_id is not None:
            try:
                return int(selected_id)
            except (ValueError, TypeError):
                logger.error(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ID '{selected_id}' (–∏–∑ {id_field}) –≤ int –¥–ª—è –∫–ª—é—á–∞ Redis '{redis_key}'.")
                # –ï—Å–ª–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å default_id –∏–ª–∏ None
                return default_id
        return None
    
    # –ï—Å–ª–∏ DTO –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º default_id (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ int)
    return default_id


async def get_character_personality_id_from_cache(
    reference_data_reader: ReferenceDataReader
) -> int: # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int
    """–í—ã–±–∏—Ä–∞–µ—Ç ID –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ –∫—ç—à–∞ Redis."""
    selected_id = await get_weighted_random_id_from_cached_hash(
        redis_key=config.constants.redis.REDIS_KEY_GENERATOR_PERSONALITIES,
        id_field='personality_id', # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø–æ 'personality_id'
        weight_field='rarity_weight',
        default_id=config.constants.character.DEFAULT_PERSONALITY_ID,
        reference_data_reader=reference_data_reader,
        dto_type=PersonalityData
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º selected_id, –µ—Å–ª–∏ –æ–Ω –Ω–µ None, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    return selected_id if selected_id is not None else config.constants.character.DEFAULT_PERSONALITY_ID


async def get_character_background_id_from_cache(
    reference_data_reader: ReferenceDataReader
) -> int: # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç int
    """–í—ã–±–∏—Ä–∞–µ—Ç ID –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –∏–∑ –∫—ç—à–∞ Redis."""
    selected_id = await get_weighted_random_id_from_cached_hash(
        redis_key=config.constants.redis.REDIS_KEY_GENERATOR_BACKGROUND_STORIES,
        id_field='story_id', # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –∏—â–µ–º –ø–æ 'story_id'
        weight_field='rarity_weight',
        default_id=config.constants.character.DEFAULT_BACKGROUND_STORY_ID,
        reference_data_reader=reference_data_reader,
        dto_type=BackgroundStoryData
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º selected_id, –µ—Å–ª–∏ –æ–Ω –Ω–µ None, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    return selected_id if selected_id is not None else config.constants.character.DEFAULT_BACKGROUND_STORY_ID


async def get_character_visual_data_placeholder() -> Dict[str, Any]:
    """(–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è visual_appearance_data."""
    return {}
