import random
from typing import Dict, List, Any, Tuple, Optional, Set, Union
from collections import defaultdict, Counter

# --- –õ–æ–≥–≥–µ—Ä ---
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
from game_server.config.provider import config

# –ù–û–í–´–ô –ò–ú–ü–û–†–¢: –î–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ ReferenceDataReader
from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data.reference_data_reader import ReferenceDataReader # –£—Ç–æ—á–Ω–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç SkillData DTO
from game_server.common_contracts.start_orcestrator.dtos import SkillData #


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç skills_data –∫–∞–∫ Dict[str, SkillData]
def _get_skill_categories_and_tags_from_config(skill_id: str, skills_data: Dict[str, SkillData]) -> Tuple[Set[str], Set[str]]: # <--- –ò–ó–ú–ï–ù–ï–ù–û
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–µ–≥–∏ –Ω–∞–≤—ã–∫–∞ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö (SkillData DTO)."""
    skill_dto = skills_data.get(skill_id)
    if skill_dto:
        categories = set(skill_dto.categories) # –î–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç—É DTO
        tags = set(skill_dto.tags) # –î–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç—É DTO
        return categories, tags
    logger.warning(f"–ù–∞–≤—ã–∫ —Å ID '{skill_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Ç–µ–≥–∏.")
    return set(), set()


async def distribute_initial_skill_levels(
    character_data_batch: List[Dict[str, Any]], # –ü–æ–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è List[Dict[str, Any]]
    reference_data_reader: ReferenceDataReader,
) -> List[Dict[str, Any]]: # –ü–æ–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è List[Dict[str, Any]]
    """
    –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –±–∞—Ç—á–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.
    """
    if not character_data_batch:
        return []

    # –ò–ó–ú–ï–ù–ï–ù–û: GAME_SKILLS_FROM_REDIS —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç Dict[str, SkillData]
    GAME_SKILLS_FROM_REDIS: Dict[str, SkillData] = await reference_data_reader.get_all_skills() # <--- –ò–ó–ú–ï–ù–ï–ù–û

    if not GAME_SKILLS_FROM_REDIS:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–≤—ã–∫–∞—Ö –∏–∑ Redis. –ù–∞–≤—ã–∫–∏ –Ω–µ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã.")
        return character_data_batch

    updated_batch = []

    for char_data in character_data_batch:
        quality_level = char_data.get("quality_level")
        initial_role_name = char_data.get("selected_role_name", "UNASSIGNED_ROLE")

        quality_config = config.settings.character.CHARACTER_TEMPLATE_QUALITY_CONFIG.get(quality_level)
        if not quality_config:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è {quality_level}.")
            char_data["initial_skill_levels"] = {}
            updated_batch.append(char_data)
            continue

        max_total_skill_points = quality_config["max_total_skill_points"]
        max_skill_level_per_skill = quality_config["max_skill_level_per_skill"]
        min_active_skills = quality_config["min_active_skills"]
        max_active_skills = quality_config["max_active_skills"]

        role_config = config.constants.character.NPC_ROLES.get(initial_role_name)
        if not role_config:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–æ–ª–∏ –¥–ª—è {initial_role_name}. –ù–∞–≤—ã–∫–∏ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –±–µ–∑ —É—á–µ—Ç–∞ —Ä–æ–ª–∏.")
            role_skill_preference_tags = set()
            role_specific_skills = set()
            role_limit_groups = []
        else:
            role_skill_preference_tags = set(role_config.get("skill_preference_tags", []))
            role_specific_skills = set(role_config.get("specific_skills", []))
            role_limit_groups = role_config.get("skill_preference_tags", {}).get("limit_groups", []) # –ó–¥–µ—Å—å –æ–ø–µ—á–∞—Ç–∫–∞, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å role_config.get("skill_limit_groups", [])

        initial_skill_levels: Dict[str, int] = {}
        assigned_skill_points = 0
        assigned_skill_count = 0
        assigned_skill_groups: Dict[str, int] = defaultdict(int)

        # available_skills_for_assignment —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç Dict[str, SkillData]
        available_skills_for_assignment = GAME_SKILLS_FROM_REDIS # <--- –ò–ó–ú–ï–ù–ï–ù–û

        # –®–∞–≥ 1: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —Ä–æ–ª–∏
        for skill_id in role_specific_skills:
            if assigned_skill_points >= max_total_skill_points or assigned_skill_count >= max_active_skills:
                break
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ skill_id –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å –≤ GAME_SKILLS_FROM_REDIS
            if skill_id in available_skills_for_assignment and initial_skill_levels.get(skill_id, 0) < max_skill_level_per_skill:
                # –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º GAME_SKILLS_FROM_REDIS (—Ç–µ–ø–µ—Ä—å Dict[str, SkillData])
                skill_categories, skill_tags = _get_skill_categories_and_tags_from_config(skill_id, GAME_SKILLS_FROM_REDIS)
                can_assign = True
                for group in skill_categories:
                    limit_config = config.constants.character.SKILL_GROUP_LIMITS.get(group)
                    if limit_config and limit_config['limit_type'] == 'exclusive' and assigned_skill_groups[group] > 0:
                        can_assign = False
                        break
                
                if can_assign:
                    initial_skill_levels[skill_id] = initial_skill_levels.get(skill_id, 0) + 1
                    assigned_skill_points += 1
                    assigned_skill_count += 1
                    for group in skill_categories:
                        assigned_skill_groups[group] += 1

        # –®–∞–≥ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—á–∫–æ–≤ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º –∏ –∏—Ö —Ç–µ–≥–∞–º
        shuffled_available_skills = list(available_skills_for_assignment.keys())
        random.shuffle(shuffled_available_skills)

        for skill_id in shuffled_available_skills:
            if assigned_skill_points >= max_total_skill_points or assigned_skill_count >= max_active_skills:
                break
            
            # –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º GAME_SKILLS_FROM_REDIS (—Ç–µ–ø–µ—Ä—å Dict[str, SkillData])
            skill_categories, skill_tags = _get_skill_categories_and_tags_from_config(skill_id, GAME_SKILLS_FROM_REDIS)
            
            if not (role_skill_preference_tags.intersection(skill_tags) or skill_id in role_specific_skills):
                continue

            can_assign = True
            for group in skill_categories:
                limit_config = config.constants.character.SKILL_GROUP_LIMITS.get(group)
                if limit_config and limit_config['limit_type'] == 'exclusive' and assigned_skill_groups[group] > 0:
                    can_assign = False
                    break
            
            if can_assign and initial_skill_levels.get(skill_id, 0) < max_skill_level_per_skill:
                initial_skill_levels[skill_id] = initial_skill_levels.get(skill_id, 0) + 1
                assigned_skill_points += 1
                assigned_skill_count += 1
                for group in skill_categories:
                    assigned_skill_groups[group] += 1

        # –®–∞–≥ 3: –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤
        while assigned_skill_count < min_active_skills and assigned_skill_points < max_total_skill_points:
            potential_skills = [
                s_id for s_id in GAME_SKILLS_FROM_REDIS.keys()
                if initial_skill_levels.get(s_id, 0) < max_skill_level_per_skill
            ]
            if not potential_skills:
                break
            
            skill_to_boost = random.choice(potential_skills)
            # –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º GAME_SKILLS_FROM_REDIS (—Ç–µ–ø–µ—Ä—å Dict[str, SkillData])
            skill_categories, _ = _get_skill_categories_and_tags_from_config(skill_to_boost, GAME_SKILLS_FROM_REDIS)
            
            can_assign = True
            for group in skill_categories:
                limit_config = config.constants.character.SKILL_GROUP_LIMITS.get(group)
                if limit_config and limit_config['limit_type'] == 'exclusive' and assigned_skill_groups[group] > 0:
                    can_assign = False
                    break
            
            if can_assign:
                initial_skill_levels[skill_to_boost] = initial_skill_levels.get(skill_to_boost, 0) + 1
                assigned_skill_points += 1
                assigned_skill_count += 1
                for group in skill_categories:
                    assigned_skill_groups[group] += 1

        char_data["initial_skill_levels"] = initial_skill_levels
        updated_batch.append(char_data)

    return updated_batch