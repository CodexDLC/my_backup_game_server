import json
import logging
from typing import List, Dict, Any, Optional

# üî• –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.task_queue_cache_manager import TaskQueueCacheManager
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ logger –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç task_queue_cache_manager –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
async def get_batch_specs_from_redis(
    redis_worker_batch_id: str,
    task_key_template: str,
    log_prefix: str,
    task_queue_cache_manager: TaskQueueCacheManager # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
) -> Optional[List[Dict[str, Any]]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–∞—Ç—á–∞ –∏–∑ Redis —á–µ—Ä–µ–∑ TaskQueueCacheManager.
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Redis.
    """
    logger.debug(f"{log_prefix} –ó–∞–ø—Ä–æ—Å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –±–∞—Ç—á–∞ '{redis_worker_batch_id}' –∏–∑ Redis.")
    try:
        # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–î–ê–ù–ù–´–ô task_queue_cache_manager
        batch_specs = await task_queue_cache_manager.get_task_batch_specs(
            batch_id=redis_worker_batch_id,
            key_template=task_key_template,
            log_prefix=log_prefix,
        )
        if batch_specs:
            logger.info(f"{log_prefix} –ü–æ–ª—É—á–µ–Ω–æ {len(batch_specs)} —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∏–∑ Redis –¥–ª—è –±–∞—Ç—á–∞ '{redis_worker_batch_id}'.")
            return batch_specs
        else:
            logger.warning(f"{log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–∞—Ç—á–∞ '{redis_worker_batch_id}' –∏–∑ Redis.")
            return None
    except Exception as e:
        logger.critical(f"{log_prefix} –û–ë–ù–ê–†–£–ñ–ï–ù–ê –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –±–∞—Ç—á–∞: {e}", exc_info=True)
        return None


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏ update_redis_task_status
async def update_redis_task_status(
    redis_worker_batch_id: str,
    task_key_template: str,
    status: str,
    log_prefix: str,
    task_queue_cache_manager: TaskQueueCacheManager, # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω–∏–º–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á
    error_message: Optional[str] = None,
    ttl_seconds_on_completion: Optional[int] = None,
    final_generated_count: Optional[int] = None # üî•üî•üî• –î–û–ë–ê–í–õ–ï–ù–û: –ù–æ–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–ª –æ—à–∏–±–∫—É
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ Redis —á–µ—Ä–µ–∑ TaskQueueCacheManager.
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∞–º —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Redis.
    """
    kwargs = {}
    if error_message:
        kwargs['error_message'] = error_message
    
    # ttl_seconds_on_completion –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –≤ update_task_status –∫–∞–∫ ttl_seconds
    if ttl_seconds_on_completion is not None:
        kwargs['ttl_seconds'] = ttl_seconds_on_completion

    # üî•üî•üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ final_generated_count –≤ update_task_status –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if final_generated_count is not None:
        kwargs['final_generated_count'] = final_generated_count

    try:
        # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–ï–†–ï–î–ê–ù–ù–´–ô task_queue_cache_manager
        await task_queue_cache_manager.update_task_status(
            batch_id=redis_worker_batch_id,
            key_template=task_key_template,
            status=status,
            log_prefix=log_prefix,
            **kwargs
        )
        logger.debug(f"{log_prefix} –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ '{redis_worker_batch_id}' –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{status}' –≤ Redis.")
    except Exception as e:
        logger.error(f"{log_prefix} –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ '{redis_worker_batch_id}' –≤ Redis: {e}", exc_info=True)