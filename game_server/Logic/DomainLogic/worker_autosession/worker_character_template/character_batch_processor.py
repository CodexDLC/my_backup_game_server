# Logic/DomainLogic/handlers_template/worker_character_template/character_batch_processor.py

from typing import List, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession

# --- –õ–æ–≥–≥–µ—Ä ---
from game_server.services.logging.logging_setup import logger

# --- –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –•–µ–ª–ø–µ—Ä—ã ---
from game_server.Logic.DomainLogic.worker_autosession.generator_name.name_orchestrator import NameOrchestrator
from game_server.Logic.DomainLogic.worker_autosession.worker_character_template.handler_utils.redis_task_status_handler import get_task_specs_from_redis, set_task_final_status, update_task_generated_count
from game_server.Logic.InfrastructureLogic.DataAccessLogic.manager.generators.ORM_character_pool_manager import CharacterPoolRepository
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
# from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
# from game_server.Logic.InfrastructureLogic.app_cache.services import task_queue_cache_manager

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –∏–∑ handler_utils ---
from .handler_utils.character_core_attribute_handler import generate_core_attributes_for_single_character
from .handler_utils.character_cache_handlers import (
    get_character_personality_id_from_cache,
    get_character_background_id_from_cache,     
    get_character_visual_data_placeholder
)
from .handler_utils.character_meta_handler import get_character_meta_attributes


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ ---
async def process_character_batch_logic(
    redis_worker_batch_id: str,
    db_session: AsyncSession,
    task_key_template: str,
    target_quality_distribution: Dict[str, float],
    highest_quality_level_name: str
):
    """
    –û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞.
    """
    log_prefix = f"CHAR_BATCH_PROC_ID({redis_worker_batch_id}):"
    logger.info(f"{log_prefix} –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞.")

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ Redis
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑–æ–≤ —Å—Ç–∞–ª —á–∏—Å—Ç—ã–º, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    specifications, target_count, error = await get_task_specs_from_redis(
        batch_id=redis_worker_batch_id,
        task_key_template=task_key_template,
    )

    if error:
        logger.error(f"{log_prefix} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {error}")
        # –°—Ç–∞—Ç—É—Å 'failed' —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤–Ω—É—Ç—Ä–∏ get_task_specs_from_redis
        return

    if not specifications:
        logger.info(f"{log_prefix} –ë–∞—Ç—á –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π. –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–∞–∫ –ø—É—Å—Ç–æ–π.")
        await set_task_final_status(
            redis_worker_batch_id, task_key_template, status="completed",
            final_generated_count=0, target_count=0, was_empty=True
        )
        return

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    char_pool_repo = CharacterPoolRepository(db_session)
    
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    generated_count = 0
    
    # 3. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞—Ç—á–µ
    for spec in specifications:
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            gender = spec.get("gender")
            quality_level = spec.get("quality_level")
            creature_type_id = spec.get("creature_type_id")

            if not all([gender, quality_level, creature_type_id]):
                logger.warning(f"{log_prefix} –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–ø–æ–ª–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: {spec}")
                continue
            
            # --- –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à–∏ "—á–∏—Å—Ç—ã–µ" —Ö–µ–Ω–¥–ª–µ—Ä—ã ---
            
            core_attributes = await generate_core_attributes_for_single_character(quality_level)
            first_name, last_name = NameOrchestrator.generate_character_name(gender=gender)
            personality_id = await get_character_personality_id_from_cache()
            background_story_id = await get_character_background_id_from_cache()
            meta_attributes = await get_character_meta_attributes(
                quality_level, highest_quality_level_name, target_quality_distribution
            )
            visual_appearance_data = await get_character_visual_data_placeholder()

            # --- –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î ---
            pool_entry_data = {
                "creature_type_id": creature_type_id,
                "gender": gender,
                "quality_level": quality_level,
                "base_stats": core_attributes.get("base_stats", {}),
                "initial_role_name": core_attributes.get("initial_role_name", "UNASSIGNED_ROLE"),
                "initial_skill_levels": core_attributes.get("initial_skill_levels", {}),
                "name": first_name,
                "surname": last_name,
                "personality_id": personality_id,
                "background_story_id": background_story_id,
                "visual_appearance_data": visual_appearance_data,
                "is_unique": meta_attributes.get("is_unique", False),
                "rarity_score": meta_attributes.get("rarity_score", 0),
                "status": "available",
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ë–î
            await char_pool_repo.create(pool_entry_data)
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ Redis –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
            new_count = await update_task_generated_count(redis_worker_batch_id, task_key_template)
            if new_count is not None:
                generated_count = new_count

        except Exception as e:
            logger.error(f"{log_prefix} –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}", exc_info=True)
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç—É —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞
            continue

    # 4. –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–≥–æ –±–∞—Ç—á–∞
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –≤–º–µ—Å—Ç–æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞
    final_generated_count = generated_count
    
    await set_task_final_status(
        redis_worker_batch_id, task_key_template, status="completed",
        final_generated_count=final_generated_count, target_count=target_count
    )
    
    logger.info(f"{log_prefix} –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {final_generated_count}/{target_count}.")

