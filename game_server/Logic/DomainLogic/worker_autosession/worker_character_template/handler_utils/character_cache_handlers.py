# Logic/DomainLogic/handlers_template/worker_character_template/handler_utils/character_cache_handlers.py

from typing import Dict, Any, Optional


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ ---
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–õ–¨–ö–û reference_data_reader, —Ç–∞–∫ –∫–∞–∫ –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–º.
from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data_reader import reference_data_reader

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
from game_server.Logic.ApplicationLogic.coordinator_generator.constant.constant_generator import (
    DEFAULT_BACKGROUND_STORY_ID, DEFAULT_PERSONALITY_ID
)
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_constants import (
    REDIS_KEY_GENERATOR_BACKGROUND_STORIES, REDIS_KEY_GENERATOR_PERSONALITIES
)

async def get_weighted_random_id_from_cached_hash(
    redis_key: str,
    id_field: str,
    weight_field: str,
    default_id: Optional[int] = None
) -> Optional[int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π ID —Å —É—á–µ—Ç–æ–º –≤–µ—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—è ReferenceDataReader.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑–æ–≤ –∏–¥–µ—Ç –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –≤—ã—à–µ.
    return await reference_data_reader.get_weighted_random_id(
        redis_key=redis_key,
        id_field=id_field,
        weight_field=weight_field,
        default_id=default_id
    )

async def get_character_personality_id_from_cache() -> int:
    """–í—ã–±–∏—Ä–∞–µ—Ç ID –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ –∫—ç—à–∞ Redis."""
    selected_id = await get_weighted_random_id_from_cached_hash(
        redis_key=REDIS_KEY_GENERATOR_PERSONALITIES, 
        id_field='personality_id',
        weight_field='rarity_weight',
        default_id=DEFAULT_PERSONALITY_ID
    )
    return selected_id if selected_id is not None else DEFAULT_PERSONALITY_ID

async def get_character_background_id_from_cache() -> int:
    """–í—ã–±–∏—Ä–∞–µ—Ç ID –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –∏–∑ –∫—ç—à–∞ Redis."""
    selected_id = await get_weighted_random_id_from_cached_hash(
        redis_key=REDIS_KEY_GENERATOR_BACKGROUND_STORIES, 
        id_field='story_id',
        weight_field='rarity_weight',
        default_id=DEFAULT_BACKGROUND_STORY_ID
    )
    return selected_id if selected_id is not None else DEFAULT_BACKGROUND_STORY_ID

async def get_character_visual_data_placeholder() -> Dict[str, Any]:
    """(–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è visual_appearance_data."""
    return {}
