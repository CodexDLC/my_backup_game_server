# game_server/Logic/DomainLogic/handlers_template/worker_item_generator/item_batch_utils/item_template_creation_utils.py

import json
import asyncio
from typing import List, Dict, Any, Optional

# --- –õ–æ–≥–≥–µ—Ä ---
from game_server.services.logging.logging_setup import logger

# --- –ò–ú–ü–û–†–¢–´ –î–õ–Ø ITEM_GENERATION_LOGIC ---
from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data_reader import ReferenceDataReader 
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–î–ê–õ–ï–ù –∏–º–ø–æ—Ä—Ç CentralRedisClient, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å üî•
# from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
# üî• –£–î–ê–õ–Ø–ï–ú –ò–ú–ü–û–†–¢ parse_item_code, —Ç.–∫. –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω üî•
# from game_server.Logic.ApplicationLogic.coordinator_generator.utils.generator_utils import parse_item_code


class ItemGenerationLogic:
    """–°–æ–¥–µ—Ä–∂–∏—Ç –∞—Ç–æ–º–∞—Ä–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–¥–∞–ª–µ–Ω redis_client –∏–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ üî•
    def __init__(self):
        self._is_data_loaded = False
        self._item_base_data: Dict[str, Any] = {}
        self._materials_data: Dict[str, Any] = {}
        self._suffixes_data: Dict[str, Any] = {}
        self._modifiers_data: Dict[str, Any] = {}
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: ReferenceDataReader —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ redis_client_instance üî•
        self._reference_data_reader = ReferenceDataReader()

    async def _load_reference_data_from_redis(self):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è ReferenceDataReader,
        –∏ –°–û–•–†–ê–ù–Ø–ï–¢ –∏—Ö –≤ –∞—Ç—Ä–∏–±—É—Ç—ã —ç–∫–∑–µ–º–ø–ª—è—Ä–∞.
        """
        if self._is_data_loaded:
            return

        logger.info("ItemGenerationLogic: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis...")
        
        results = await asyncio.gather(
            self._reference_data_reader.get_all_item_bases(),
            self._reference_data_reader.get_all_materials(),
            self._reference_data_reader.get_all_suffixes(),
            self._reference_data_reader.get_all_modifiers()
        )
        
        self._item_base_data, self._materials_data, self._suffixes_data, self._modifiers_data = results
        
        self._is_data_loaded = True
        logger.info("ItemGenerationLogic: –í—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
    def _calculate_base_modifiers(self, item_base: Dict, material: Dict, suffix: Dict, rarity: int) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—á–µ—Ç –ø–æ–ª—è `base_modifiers_json`."""
        return {"placeholder": True}

    def _generate_display_name(self, item_base: Dict, material: Dict, suffix: Dict, specific_name: str, rarity: int) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞."""
        rarity_prefix = f"[T{rarity}]"
        material_adjective = material.get('adjective', '')
        suffix_fragment = suffix.get('fragment', '')
        return f"{rarity_prefix} {material_adjective} {specific_name} {suffix_fragment}".strip().replace('  ', ' ')

    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: generate_single_template —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç spec (—Å–ª–æ–≤–∞—Ä—å), –∞ –Ω–µ item_code (—Å—Ç—Ä–æ–∫—É) üî•
    async def generate_single_template(self, spec: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        """
        await self._load_reference_data_from_redis()

        # üî• –£–î–ê–õ–ï–ù–û: –ë–æ–ª—å—à–µ –Ω–µ –ø–∞—Ä—Å–∏–º item_code, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ spec üî•
        # parts = parse_item_code(item_code)
        # if not parts:
        #     logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å item_code: {item_code}")
        #     return None

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (spec)
        item_code = spec.get('item_code')
        category = spec.get('category')
        base_code = spec.get('base_code')
        specific_name_key = spec.get('specific_name_key')
        material_code = spec.get('material_code')
        suffix_code = spec.get('suffix_code')
        rarity = spec.get('rarity_level')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π –∏–∑ spec
        if not all([item_code, category, base_code, specific_name_key, material_code, suffix_code, rarity]):
            logger.error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞: {spec}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –ø–æ –∏—Ö –∫–æ–¥–∞–º
        item_base = self._item_base_data.get(base_code)
        material = self._materials_data.get(material_code)
        suffix = self._suffixes_data.get(suffix_code)
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã üî•
        if not all([item_base, material, suffix]):
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è item_code: {item_code}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Redis –¥–ª—è {base_code}, {material_code}, {suffix_code}.")
            return None

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º specific_name_key –≤ —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏
        # (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ specific_name_key –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        # –ï—Å–ª–∏ specific_name_key —É–∂–µ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ display_name, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        specific_name_for_display = specific_name_key.replace('-', ' ') # –û—Å—Ç–∞–ª–æ—Å—å, –µ—Å–ª–∏ specific_name_key –∏–∑ Planner –∏–º–µ–µ—Ç –¥–µ—Ñ–∏—Å—ã

        base_modifiers = self._calculate_base_modifiers(item_base, material, suffix, rarity)
        display_name = self._generate_display_name(item_base, material, suffix, specific_name_for_display, rarity)
        
        template_data = {
            "item_code": item_code,
            "display_name": display_name,
            "category": category, # –ë–µ—Ä–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ spec
            "sub_category": base_code, # –ë–µ—Ä–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ spec
            "equip_slot": item_base.get('properties', {}).get('equip_slot'), # –ò–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ item_base
            "inventory_size": item_base.get('properties', {}).get('inventory_size'), # –ò–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ item_base
            "material_code": material_code, # –ë–µ—Ä–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ spec
            "suffix_code": suffix_code, # –ë–µ—Ä–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ spec
            "rarity_level": rarity, # –ë–µ—Ä–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ spec
            "base_modifiers_json": base_modifiers,
        }
        return template_data


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: generate_item_templates_from_specs –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç redis_client üî•
async def generate_item_templates_from_specs(
    batch_specs: List[Dict[str, Any]],
    log_prefix: str,
    # üî• –£–î–ê–õ–ï–ù redis_client –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ üî•
    # redis_client: CentralRedisClient
) -> List[Dict[str, Any]]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –¥–∞–Ω–Ω–æ–º –º–æ–¥—É–ª–µ.
    –û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç `ItemGenerationLogic`, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ
    –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ `reference_data_reader` (–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Redis).
    """
    if not batch_specs:
        logger.warning(f"{log_prefix} –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        return []

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: ItemGenerationLogic —Ç–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ redis_client üî•
    logic = ItemGenerationLogic() 
    
    generated_templates: List[Dict[str, Any]] = []
    
    for spec in batch_specs: # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É —Å–ª–æ–≤–∞—Ä—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å spec –≤ generate_single_template üî•
        template = await logic.generate_single_template(spec)
        
        if template:
            generated_templates.append(template)
            
    logger.info(f"{log_prefix} –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generated_templates)} —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
    return generated_templates
