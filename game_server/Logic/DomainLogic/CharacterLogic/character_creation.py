from sqlalchemy import text
from game_server.Logic.DomainLogic.CharacterLogic.utils.character_database_utils import fetch_starting_skills
from game_server.Logic.DomainLogic.CharacterLogic.utils.character_database_utils import insert_character_stats
from game_server.Logic.DomainLogic.CharacterLogic.utils.character_redis_utils import get_character_data_from_redis

from game_server.services.logging.logging_setup import logger
  

async def insert_character_metadata(character_id: int, metadata: dict, db_session):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (characters): –∏–º—è, —Ä–∞—Å–∞, –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ.
    :param character_id: ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    :param metadata: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (name, race_id, bloodline_id).
    :param db_session: –ü–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    if not metadata:
        logger.warning(f"‚ö† –ü—É—Å—Ç—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å.")
        return

    query = text("""
        INSERT INTO characters (character_id, account_id, name, surname, bloodline_id, race_id, created_at, updated_at, is_deleted)
        VALUES (:character_id, :account_id, :name, :surname, :bloodline_id, :race_id, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, false)
    """)

    try:
        await db_session.execute(query, metadata)
        await db_session.commit()
        logger.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –∑–∞–ø–∏—Å–∞–Ω—ã!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}: {e}")
        raise


async def insert_character_base_skills(character_id: int, db_session):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Å—Ä–∞–∑—É —Å—Ç–∞–≤–∏—Ç –∏—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'PAUSE'.
    
    :param character_id: ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    :param db_session: –ü–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    skills = await fetch_starting_skills()

    if not skills:
        logger.warning(f"‚ö† –ù–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å.")
        return

    character_skills = [
        {
            "character_id": character_id,
            "skill_key": skill["skill_key"],
            "level": 0,
            "xp": 0,
            "progress_state": "PAUSE"
        }
        for skill in skills
    ]

    query = text("""
        INSERT INTO character_skills (character_id, skill_key, level, xp, progress_state)
        VALUES (:character_id, :skill_key, :level, :xp, :progress_state)
    """)

    try:
        await db_session.execute(query, character_skills)
        await db_session.commit()
        logger.info(f"‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ 'PAUSE' –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞–≤—ã–∫–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}: {e}")
        raise



async def finalize_character_creation(character_id: int, db_session, redis_client):
    """
    –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∑–∞–±–∏—Ä–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis –∏ –∑–∞–ø–∏—Å—ã–≤–∞—è –∏—Ö –≤ –ë–î.
    :param character_id: ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    :param db_session: –ü–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param redis_client: –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Redis.
    """
    character_data = await get_character_data_from_redis(character_id, redis_client)
    if not character_data:
        logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ Redis! –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    try:
        await insert_character_metadata(character_id, character_data.get("metadata", {}), db_session)
        await insert_character_stats(character_id, character_data.get("stats", {}), db_session)
        await insert_character_base_skills(character_id, db_session)
        logger.info(f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ {character_id} —É—Å–ø–µ—à–Ω–æ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}: {e}")
        raise