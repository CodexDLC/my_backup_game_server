from sqlalchemy.ext.asyncio import AsyncSession

import logging


from game_server.Logic.DomainLogic.CharacterLogic.utils.character_database_utils import fetch_starting_skills


from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.database.models.models import CharacterSkills, Character




logger = logging.getLogger(__name__)

async def insert_character_metadata(character_id: int, metadata: dict, db_session: AsyncSession):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (`characters`).
    :param character_id: ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    :param metadata: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (name, race_id, bloodline_id).
    :param db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    if not metadata:
        logger.warning(f"‚ö† –ü—É—Å—Ç—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å.")
        return

    new_character = Character(
        character_id=character_id,
        account_id=metadata.get("account_id"),
        name=metadata.get("name", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"),
        surname=metadata.get("surname"),
        bloodline_id=metadata.get("bloodline_id"),
        race_id=metadata.get("race_id"),
        is_deleted=False
    )

    db_session.add(new_character)
    try:
        await db_session.commit()
        logger.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –∑–∞–ø–∏—Å–∞–Ω—ã!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}: {e}")
        raise


async def insert_character_base_skills(character_id: int, db_session: AsyncSession):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (`character_skills`) –∏ —Å—Ç–∞–≤–∏—Ç –∏—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'PAUSE'.
    :param character_id: ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    :param db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    skills = await fetch_starting_skills()

    if not skills:
        logger.warning(f"‚ö† –ù–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å.")
        return

    character_skills = [
        CharacterSkills(
            character_id=character_id,
            skill_key=skill["skill_key"],
            level=0,
            xp=0,
            progress_state="PAUSE"
        )
        for skill in skills
    ]

    db_session.add_all(character_skills)
    try:
        await db_session.commit()
        logger.info(f"‚úÖ –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞–≤—ã–∫–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}: {e}")
        raise



async def finalize_character_creation(character_id: int, db_session: AsyncSession, redis_client: CentralRedisClient):
    """
    –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∑–∞–±–∏—Ä–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis –∏ –∑–∞–ø–∏—Å—ã–≤–∞—è –∏—Ö –≤ –ë–î.
    :param character_id: ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    :param db_session: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param redis_client: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Redis-–∫–ª–∏–µ–Ω—Ç.
    """
    character_data = await redis_client.get_json(f"character:{character_id}")
    
    if not character_data:
        logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ Redis! –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    try:
        await insert_character_metadata(character_id, character_data.get("metadata", {}), db_session)
        await insert_character_base_skills(character_id, db_session)
        logger.info(f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ {character_id} —É—Å–ø–µ—à–Ω–æ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω –≤ –ë–î!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}: {e}")
        raise
