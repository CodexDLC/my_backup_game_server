from typing import List, Dict, Optional, Any
from sqlalchemy import String, cast, select
from sqlalchemy.ext.asyncio import AsyncSession # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AsyncSession

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î –∏ –µ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è

from game_server.Logic.InfrastructureLogic.DataAccessLogic.manager.discord_api_route.ORM_bindings_manager import BindingOperationError, DiscordBindingsManager
from game_server.database.models.models import DiscordBindings
from game_server.services.logging.logging_setup import logger


class DiscordBindingLogic:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∞–º–∏ Discord-–≥–∏–ª—å–¥–∏–π.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏–∫—É –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è, –∏—Å–ø–æ–ª—å–∑—É—è DiscordBindingsManager.
    """

    def __init__(self, db_session: AsyncSession):
        self.db_session = db_session

    async def get_binding_by_key(self, guild_id: int, access_key: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ–¥–Ω—É –ø—Ä–∏–≤—è–∑–∫—É –¥–ª—è –≥–∏–ª—å–¥–∏–∏ –ø–æ access_key.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ None.
        """
        logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è guild_id={guild_id}, access_key={access_key}")
        manager = DiscordBindingsManager(self.db_session)
        try:
            binding = await manager.get_binding(guild_id, access_key)
            if binding:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É DiscordBindings –µ—Å—Ç—å –º–µ—Ç–æ–¥ .to_dict()
                # –ï—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—Ä—É—á–Ω—É—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ORM-–æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å.
                # –ü—Ä–∏–º–µ—Ä: return {"guild_id": binding.guild_id, "access_key": binding.access_key, ...}
                return binding.to_dict()
            return None
        except BindingOperationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏: {e}", exc_info=True)
            raise

    async def get_all_bindings(self, guild_id: Optional[int] = None) -> List[DiscordBindings]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–∏–ª—å–¥–∏–∏,
        –ø—Ä–µ–æ–±—Ä–∞–∑—É—è BigInteger Discord ID –≤ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ DiscordBindings ORM, —Å guild_id —É–∂–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
        """
        logger.info(f"–ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id if guild_id else '–≤—Å–µ—Ö –≥–∏–ª—å–¥–∏–π'}")

        # üî•üî•üî• –≠–¢–û –ò –ï–°–¢–¨ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: —è–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ SQLAlchemy üî•üî•üî•
        # –ú—ã —è–≤–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –ø—Ä–∏–≤–æ–¥–∏–º guild_id –∫ String
        query = select(
            cast(DiscordBindings.guild_id, String).label("guild_id"), # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º int/BigInteger –≤ String
            DiscordBindings.world_id,
            DiscordBindings.access_key,
            DiscordBindings.permissions,
            DiscordBindings.created_at,
            DiscordBindings.updated_at,
            DiscordBindings.category_id,
            DiscordBindings.channel_id
        )

        if guild_id:
            # –í–∞–∂–Ω–æ: –∑–¥–µ—Å—å, –≤ —Ñ–∏–ª—å—Ç—Ä–µ, –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º guild_id –∫–∞–∫ —á–∏—Å–ª–æ,
            # –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ–Ω–æ –≤—Å–µ –µ—â–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ BigInteger.
            query = query.filter(DiscordBindings.guild_id == guild_id)

        try:
            result = await self.db_session.execute(query)
            
            # –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ select —Å cast –∏ label, result.scalars() –Ω–µ –≤–µ—Ä–Ω—ë—Ç –ø–æ–ª–Ω—ã–µ ORM-–æ–±—ä–µ–∫—Ç—ã.
            # result.all() –≤–µ—Ä–Ω—ë—Ç —Å–ø–∏—Å–æ–∫ Row-–æ–±—ä–µ–∫—Ç–æ–≤. Pydantic —Å from_attributes=True –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º–∏,
            # –µ—Å–ª–∏ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –≤ –∑–∞–ø—Ä–æ—Å–µ (—Å label) —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π –≤ Pydantic-–º–æ–¥–µ–ª–∏.
            all_rows = result.all() 
            
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_rows)} –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}.")
            return all_rows # <-- –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ Row-–æ–±—ä–µ–∫—Ç–æ–≤

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫: {e}", exc_info=True)
            # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –º—ã —Ö–æ—Ç–∏–º, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –¥–æ—à–ª–∞ –¥–æ —Å–ª–æ—è API –∏ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ FastAPI
            raise # –ü—Ä–æ—Å—Ç–æ re-raise, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ–Ω–∞ –±—ã–ª–∞ –ø–æ–π–º–∞–Ω–∞ –≤—ã—à–µ
                  # –ò–ª–∏ –º–æ–∂–µ—Ç–µ –æ–±–µ—Ä–Ω—É—Ç—å –µ—ë –≤ BindingOperationError, –∫–∞–∫ —É –≤–∞—Å –±—ã–ª–æ.

    async def upsert_discord_bindings(self, bindings_batch: List[Dict[str, Any]]) -> int:
        """
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–æ–∫ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é –≤—Å—Ç–∞–≤–∫—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (UPSERT) –≤ –ë–î.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.
        """
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ UPSERT –¥–ª—è {len(bindings_batch)} –ø—Ä–∏–≤—è–∑–æ–∫.")

        if not bindings_batch:
            logger.warning("`upsert_discord_bindings` –≤—ã–∑–≤–∞–Ω–∞ —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –¥–∞–Ω–Ω—ã—Ö.")
            return 0

        for binding in bindings_batch:
            if "guild_id" not in binding or "access_key" not in binding:
                logger.error(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è 'guild_id' –∏–ª–∏ 'access_key': {binding}")
                raise ValueError("–ö–∞–∂–¥–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'guild_id' –∏ 'access_key'.")

        try:
            manager = DiscordBindingsManager(self.db_session)
            processed_count = await manager.upsert_bindings(bindings_batch)
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø—Ä–∏–≤—è–∑–æ–∫ —á–µ—Ä–µ–∑ UPSERT.")
            return processed_count
        except BindingOperationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ UPSERT –ø—Ä–∏–≤—è–∑–æ–∫ –≤ –ë–î: {e}", exc_info=True)
            raise
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ `upsert_discord_bindings`: {e}", exc_info=True)
            raise

    async def delete_discord_binding(self, guild_id: int, access_key: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É Discord.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        """
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è guild_id={guild_id}, access_key={access_key}")
        manager = DiscordBindingsManager(self.db_session)
        try:
            result = await manager.delete_binding(guild_id, access_key)
            if result:
                logger.info(f"–ü—Ä–∏–≤—è–∑–∫–∞ (guild_id={guild_id}, access_key={access_key}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            else:
                logger.warning(f"–ü—Ä–∏–≤—è–∑–∫–∞ (guild_id={guild_id}, access_key={access_key}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return result
        except BindingOperationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏: {e}", exc_info=True)
            raise

    async def delete_all_discord_bindings_for_guild(self, guild_id: int) -> int:
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–∏–ª—å–¥–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.
        """
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}.")
        manager = DiscordBindingsManager(self.db_session)
        try:
            deleted_count = await manager.delete_all_bindings_for_guild(guild_id)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}.")
            return deleted_count
        except BindingOperationError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}: {e}", exc_info=True)
            raise