# app/game_server/Logic/InterfacesLogic/Discord/Discord_State_Entities_logic.py


import uuid
from typing import Dict, Any, List # –î–æ–±–∞–≤–ª—è–µ–º List
from sqlalchemy.ext.asyncio import AsyncSession



from game_server.Logic.InfrastructureLogic.DataAccessLogic.manager.discord_api_route.ORM_EntitiesDiscord import StateEntitiesDiscordManager
from game_server.services.logging.logging_setup import logger


class StateEntitiesDiscordLogic:
    """
    –ö–ª–∞—Å—Å-–º–æ—Å—Ç–∏–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏, —Å–≤—è–∑—ã–≤–∞—é—â–µ–π FastAPI —Ä–æ—É—Ç—ã
    —Å CRUD-–æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ StateEntitiesDiscordManager.
    –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–Ω–µ–¥—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
    """
    
    def __init__(self, db_session: AsyncSession): # üî•üî• –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º __init__
        self.db_session = db_session
        self.manager = StateEntitiesDiscordManager(db_session) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∑–¥–µ—Å—å

    # ---------------------------------------------------------------------
    # –¢–µ–ø–µ—Ä—å –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç self.db_session –∏ self.manager
    # –£–î–ê–õ–Ø–ï–ú @staticmethod –∏ –≤—ã–∑–æ–≤—ã async with get_db_session()
    # ---------------------------------------------------------------------

    async def get_all_entities_for_guild(self, guild_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `state_entities_discord` –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–∏–ª—å–¥–∏–∏.
        """
        try:
            return await self.manager.get_all_entities_for_guild(guild_id) # –ò—Å–ø–æ–ª—å–∑—É–µ–º self.manager
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}: {e}", exc_info=True)
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"}

    async def get_entity_by_primary_key(self, guild_id: int, world_id: str, access_code: int) -> Dict:
        """
        –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `state_entities_discord` –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É.
        """
        try:
            try:
                world_id_val = uuid.UUID(world_id)
            except ValueError:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç world_id: {world_id}")
                return {"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç world_id"}

            return await self.manager.get_entity_by_pk(guild_id, world_id_val, access_code)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ü–ö (Guild: {guild_id}, World: {world_id}, Access: {access_code}): {e}", exc_info=True)
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"}

    async def update_entity_by_primary_key(self, guild_id: int, world_id: str, access_code: int, entity_data: dict) -> Dict:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ `state_entities_discord` –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É.
        """
        try:
            try:
                world_id_val = uuid.UUID(world_id)
            except ValueError:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç world_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {world_id}")
                return {"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç world_id"}

            return await self.manager.update_entity_by_pk(guild_id, world_id_val, access_code, entity_data)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ü–ö (Guild: {guild_id}, World: {world_id}, Access: {access_code}): {e}", exc_info=True)
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"}

    async def delete_entity_by_primary_key(self, guild_id: int, world_id: str, access_code: int) -> Dict:
        """
        –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `state_entities_discord` –ø–æ –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É.
        """
        try:
            try:
                world_id_val = uuid.UUID(world_id)
            except ValueError:
                logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç world_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {world_id}")
                return {"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç world_id"}

            return await self.manager.delete_entity_by_pk(guild_id, world_id_val, access_code)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ü–ö (Guild: {guild_id}, World: {world_id}, Access: {access_code}): {e}", exc_info=True)
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"}

    async def create_roles_discord(self, roles_batch: List[Dict]) -> Dict:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π `state_entities_discord` (UPSERT).
        """
        if not roles_batch or not all(isinstance(role, dict) for role in roles_batch):
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è create_roles_discord.")
            return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π"}

        formatted_roles = []
        for role in roles_batch:
            try:
                guild_id_val = int(role["guild_id"])
                world_id_val = uuid.UUID(str(role["world_id"]))
                access_code_val = int(role["access_code"])

                other_fields = {k: v for k, v in role.items() if k not in ["guild_id", "world_id", "access_code"]}

                formatted_roles.append({
                    "guild_id": guild_id_val,
                    "world_id": world_id_val,
                    "access_code": access_code_val,
                    **other_fields
                })
            except (ValueError, KeyError) as e:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞–ø–∏—Å—å –∏–∑-–∑–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {role}. –û—à–∏–±–∫–∞: {e}")
                continue

        if not formatted_roles:
            logger.warning("–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–ª—è—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (create_roles_discord).")
            return {"error": "–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ä–æ–ª—è—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è."}

        try:
            return await self.manager.create_roles_batch(formatted_roles)
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}", exc_info=True)
            return {"error": f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {str(e)}"}
