# game_server\Logic\ORM_LOGIC\managers\orm_entity_properties.py

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from game_server.Logic.InfrastructureLogic.DataAccessLogic.db_instance import get_db_session
from game_server.database.models.models import EntityStateMap, StateEntity




class EntityStateMapManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å `entity_state_map` —á–µ—Ä–µ–∑ ORM."""

    def __init__(self, db_session: AsyncSession):
        self.db_session = db_session

    async def create_state(self, entity_access_key: str, state_data: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏."""
        state = EntityStateMap(entity_access_key=entity_access_key, **state_data)
        self.db_session.add(state)
        await self.db_session.commit()
        return {"status": "success", "message": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ `{state_data['access_code']}` –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ `{entity_access_key}`"}

    async def get_states(self, entity_access_key: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å—É—â–Ω–æ—Å—Ç–∏."""
        query = select(EntityStateMap).where(EntityStateMap.entity_access_key == entity_access_key)
        result = await self.db_session.execute(query)
        rows = result.scalars().all()
        return {"status": "found", "data": [row.__dict__ for row in rows]} if rows else {"status": "error", "message": "–°–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"}

    async def update_state(self, entity_access_key: str, state_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏."""
        query = select(EntityStateMap).where(EntityStateMap.entity_access_key == entity_access_key)
        result = await self.db_session.execute(query)
        state = result.scalar()

        if state:
            for key, value in state_data.items():
                setattr(state, key, value)

            await self.db_session.commit()
            return {"status": "success", "message": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ `{state_data['access_code']}` –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è `{entity_access_key}`"}
        return {"status": "error", "message": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

    async def delete_state(self, entity_access_key: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏."""
        query = select(EntityStateMap).where(EntityStateMap.entity_access_key == entity_access_key)
        result = await self.db_session.execute(query)
        state = result.scalar()

        if state:
            await self.db_session.delete(state)
            await self.db_session.commit()
            return {"status": "success", "message": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ `{entity_access_key}` —É–¥–∞–ª–µ–Ω–æ"}
        return {"status": "error", "message": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}




class StateEntitiesManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å `state_entities` —á–µ—Ä–µ–∑ ORM."""

    @staticmethod
    async def get_all_states():
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π (—Å–æ—Å—Ç–æ—è–Ω–∏–π)."""
        async for db_session in get_db_session():  # üî• –ò–∑–º–µ–Ω—è–µ–º `async with` –Ω–∞ `async for`
            query = select(StateEntity)
            result = await db_session.execute(query)
            states = result.scalars().all()
            return {"status": "success", "data": [state.__dict__ for state in states]}


    @staticmethod
    async def create_state(state_data: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
        async with get_db_session() as db_session:  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            state = StateEntity(**state_data)
            db_session.add(state)
            await db_session.commit()
            return {"status": "success", "message": f"–°–æ—Å—Ç–æ—è–Ω–∏–µ `{state_data['code_name']}` –¥–æ–±–∞–≤–ª–µ–Ω–æ"}


    @staticmethod
    async def get_state_by_access_code(access_code: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ `access_code`."""
        async with get_db_session() as db_session:  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            query = select(StateEntity).where(StateEntity.access_code == access_code)
            result = await db_session.execute(query)
            state = result.scalar()
            return {"status": "success", "data": state.__dict__} if state else {"status": "error", "message": "–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}


    @staticmethod
    async def update_state_status(access_code: int, is_active: bool):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç `is_active` —Å—Ç–∞—Ç—É—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        async with get_db_session() as db_session:  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            query = select(StateEntity).where(StateEntity.access_code == access_code)
            result = await db_session.execute(query)
            state = result.scalar()

            if state:
                state.is_active = is_active
                await db_session.commit()
                return {"status": "success", "message": f"–°—Ç–∞—Ç—É—Å `{state.code_name}` –æ–±–Ω–æ–≤–ª—ë–Ω: {'–∞–∫—Ç–∏–≤–µ–Ω' if is_active else '–≤—ã–∫–ª—é—á–µ–Ω'}"}
            return {"status": "error", "message": "–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}


