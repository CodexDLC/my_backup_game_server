# game_server\Logic\ORM_LOGIC\managers\orm_discord_bindings.py
import datetime
from typing import List
import uuid
from sqlalchemy.dialects.postgresql import insert
from sqlalchemy import delete
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from game_server.database.models.models import StateEntityDiscord
from game_server.services.logging.logging_setup import logger


class StateEntitiesDiscordManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å `state_entities_discord` —á–µ—Ä–µ–∑ ORM."""

    def __init__(self, db_session: AsyncSession):
        self.db_session = db_session

    # 1. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π (UPSERT)
    async def create_roles_batch(self, roles_data: list[dict]) -> dict:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É `state_entities_discord` (Upsert).
        –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º (guild_id, world_id, access_code) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞.
        """
        if not roles_data or not all(isinstance(data, dict) for data in roles_data):
            logger.warning("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏ —Ä–æ–ª–µ–π: –æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π.")
            return {"status": "error", "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π"}

        # SQLAlchemy —Å–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç dict –≤ –º–æ–¥–µ–ª—å.
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ–º role_id=None, –∏ –∫–æ–ª–æ–Ω–∫–∞ nullable=True, —Ç–æ –≤—Å—ë OK.
        roles_to_upsert = roles_data # –ó–¥–µ—Å—å roles_data —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã StateEntitiesDiscordLogic

        if not roles_to_upsert:
            logger.warning("–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return {"status": "success", "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."}

        try:
            # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú ON CONFLICT DO UPDATE (UPSERT)
            stmt = insert(StateEntityDiscord).values(roles_to_upsert)
            
            on_conflict_stmt = stmt.on_conflict_do_update(
                index_elements=['guild_id', 'world_id', 'access_code'], # –ü–æ –∫–∞–∫–∏–º —Å—Ç–æ–ª–±—Ü–∞–º –∏—Å–∫–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç (–ü–ö)
                set_={
                    'role_name': stmt.excluded.role_name, 
                    'role_id': stmt.excluded.role_id,     
                    'permissions': stmt.excluded.permissions, 
                    'updated_at': datetime.now(datetime.timezone.utc) 
                }
            )
            
            await self.db_session.execute(on_conflict_stmt)
            await self.db_session.commit()
            
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(roles_to_upsert)} —Ä–æ–ª–µ–π –≤ –ë–î.")
            return {"status": "success", "message": f"–î–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(roles_to_upsert)} —Ä–æ–ª–µ–π"}
        except Exception as e:
            await self.db_session.rollback() 
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –≤ –ë–î: {e}", exc_info=True)
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}"}

    # –ú–µ—Ç–æ–¥ create_entities_batch (–µ—Å–ª–∏ –æ–Ω –±—ã–ª –¥—É–±–ª–∏–∫–∞—Ç–æ–º) –£–î–ê–õ–Ø–ï–¢–°–Ø

    # –ú–µ—Ç–æ–¥ create_entity (–¥–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏) –æ—Å—Ç–∞–µ—Ç—Å—è, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    # —Å UPSERT, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —á–∞—Å—Ç–æ. –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ –µ–¥–∏–Ω–∏—á–Ω—ã–µ –≤—Å—Ç–∞–≤–∫–∏.
    async def create_entity(self, guild_id: int, entity_data: dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É `state_entities_discord`."""
        entity = StateEntityDiscord(guild_id=guild_id, **entity_data)
        try:
            self.db_session.add(entity)
            await self.db_session.commit()
            return {"status": "success", "message": f"–†–æ–ª—å `{entity_data.get('role_name', 'N/A')}` –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –≥–∏–ª—å–¥–∏–∏ `{guild_id}`"}
        except Exception as e:
            await self.db_session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –ë–î: {e}", exc_info=True)
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {str(e)}"}


    # 2. –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –∑–∞–ø–∏—Å–µ–π –ø–æ guild_id (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞)
    async def get_all_entities_for_guild(self, guild_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ guild_id."""
        query = select(StateEntityDiscord).where(StateEntityDiscord.guild_id == guild_id)
        result = await self.db_session.execute(query)
        rows = result.scalars().all()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SQLAlchemy –æ–±—ä–µ–∫—Ç—ã –≤ —á–∏—Å—Ç—ã–µ —Å–ª–æ–≤–∞—Ä–∏
        data = []
        for row in rows:
            row_dict = {
                "guild_id": row.guild_id,
                "world_id": str(row.world_id) if row.world_id else None, # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å UUID –≤ —Å—Ç—Ä–æ–∫—É
                "access_code": row.access_code,
                "role_name": row.role_name,
                "role_id": row.role_id,
                "permissions": row.permissions,
                "created_at": row.created_at.isoformat() if row.created_at else None,
                "updated_at": row.updated_at.isoformat() if row.updated_at else None,
            }
            data.append(row_dict)

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –í–æ–∑–≤—Ä–∞—â–∞–µ–º "found" –∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç
        # –∏–ª–∏ "not_found" –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ,
        # –Ω–æ –¥–ª—è "get_all" —á–∞—â–µ –≤—Å–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏ 200 OK.
        # –í–∞—à —Ä–æ—É—Ç —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç "else: return []" –∫–∞–∫ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
        # –ü–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–µ—Ä–Ω—É—Ç—å status: "found" –∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
        # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "found", –µ—Å–ª–∏ data –Ω–µ –ø—É—Å—Ç–∞, –∏–Ω–∞—á–µ "not_found"
        if data:
            return {"status": "found", "data": data}
        else:
            return {"status": "not_found", "data": []}


    # 3. –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –û–î–ù–û–ô –∑–∞–ø–∏—Å—å—é –ø–æ –ü–ï–†–í–ò–ß–ù–û–ú–£ –ö–õ–Æ–ß–£
    async def get_entity_by_pk(self, guild_id: int, world_id: uuid.UUID, access_code: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É."""
        query = select(StateEntityDiscord).where(
            StateEntityDiscord.guild_id == guild_id,
            StateEntityDiscord.world_id == world_id,
            StateEntityDiscord.access_code == access_code
        )
        result = await self.db_session.execute(query)
        row = result.scalar_one_or_none()
        if row:
            row_dict = {
                "guild_id": row.guild_id,
                "world_id": str(row.world_id) if row.world_id else None,
                "access_code": row.access_code,
                "role_name": row.role_name,
                "role_id": row.role_id,
                "permissions": row.permissions,
                "created_at": row.created_at.isoformat() if row.created_at else None,
                "updated_at": row.updated_at.isoformat() if row.updated_at else None,
            }
            return {"status": "found", "data": row_dict}
        return {"status": "error", "message": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}

    async def update_entity_by_pk(self, guild_id: int, world_id: uuid.UUID, access_code: int, entity_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É."""
        try:
            query = select(StateEntityDiscord).where(
                StateEntityDiscord.guild_id == guild_id,
                StateEntityDiscord.world_id == world_id,
                StateEntityDiscord.access_code == access_code
            )
            result = await self.db_session.execute(query)
            entity = result.scalar_one_or_none()

            if entity:
                for key, value in entity_data.items():
                    setattr(entity, key, value)
                await self.db_session.commit()
                return {"status": "success", "message": f"–ó–∞–ø–∏—Å—å –¥–ª—è –≥–∏–ª—å–¥–∏–∏ `{guild_id}` (World: {world_id}, Access: {access_code}) –æ–±–Ω–æ–≤–ª–µ–Ω–∞."}
            return {"status": "error", "message": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        except Exception as e:
            await self.db_session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ –ü–ö: {e}", exc_info=True)
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"}

    async def delete_entity_by_pk(self, guild_id: int, world_id: uuid.UUID, access_code: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É."""
        try:
            query = select(StateEntityDiscord).where(
                StateEntityDiscord.guild_id == guild_id,
                StateEntityDiscord.world_id == world_id,
                StateEntityDiscord.access_code == access_code
            )
            result = await self.db_session.execute(query)
            entity = result.scalar_one_or_none()

            if entity:
                await self.db_session.delete(entity)
                await self.db_session.commit()
                return {"status": "success", "message": f"–ó–∞–ø–∏—Å—å –¥–ª—è –≥–∏–ª—å–¥–∏–∏ `{guild_id}` (World: {world_id}, Access: {access_code}) —É–¥–∞–ª–µ–Ω–∞."}
            return {"status": "error", "message": "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        except Exception as e:
            await self.db_session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–æ –ü–ö: {e}", exc_info=True)
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"}

    # 4. –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ Discord role_id
    async def delete_roles_by_discord_ids(self, discord_role_ids: List[int]) -> dict:
        """
        –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã `state_entities_discord` –ø–æ `role_id`.
        –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö `role_id` –≤—Ö–æ–¥–∏—Ç –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.
        """
        if not discord_role_ids:
            logger.info("–ù–µ—Ç ID —Ä–æ–ª–µ–π Discord –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î.")
            return {"status": "success", "message": "–ù–µ—Ç —Ä–æ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î."}

        try:
            stmt = delete(StateEntityDiscord).where(StateEntityDiscord.role_id.in_(discord_role_ids))
            
            result = await self.db_session.execute(stmt)
            await self.db_session.commit()
            
            deleted_rows = result.rowcount
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {deleted_rows} –∑–∞–ø–∏—Å–µ–π —Ä–æ–ª–µ–π –∏–∑ –ë–î.")
            return {"status": "success", "message": f"–£–¥–∞–ª–µ–Ω–æ {deleted_rows} –∑–∞–ø–∏—Å–µ–π —Ä–æ–ª–µ–π –∏–∑ –ë–î."}
        except Exception as e:
            await self.db_session.rollback()
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π –∏–∑ –ë–î –ø–æ Discord ID: {e}", exc_info=True)
            return {"status": "error", "message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î: {str(e)}"}
