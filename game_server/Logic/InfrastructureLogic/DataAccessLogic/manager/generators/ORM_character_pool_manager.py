

from typing import Dict, List, Any, Optional
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from sqlalchemy import update, delete
from sqlalchemy.dialects.postgresql import insert as pg_insert



from game_server.database.models.models import CharacterPool


class CharacterPoolRepository:
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–¥ —Å—É—â–Ω–æ—Å—Ç—å—é CharacterPool.
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Ä–æ–≤–Ω–µ DataAccess.
    """

    def __init__(self, session: AsyncSession):
        self.session = session

    async def create(self, character_data: Dict[str, Any]) -> CharacterPool:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å CharacterPool –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        # –£–¥–∞–ª—è–µ–º character_pool_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å –∏ —Ä–∞–≤–µ–Ω None,
        # —á—Ç–æ–±—ã –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
        # –ò–ª–∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.
        if 'character_pool_id' in character_data and character_data['character_pool_id'] is None:
            del character_data['character_pool_id']
            
        new_character = CharacterPool(**character_data)
        self.session.add(new_character)
        await self.session.flush() # –ò—Å–ø–æ–ª—å–∑—É–µ–º flush –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–µ—Ä–µ–¥ commit
        await self.session.refresh(new_character) # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î (–≤–∫–ª—é—á–∞—è ID)
        # await self.session.commit() # Commit –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ flush + refresh –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                                   # –û–±—ã—á–Ω–æ commit –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π.
                                   # –ï—Å–ª–∏ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—Ç–æ–º–∞—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π —Å commit, —Ç–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ.
        return new_character

    async def upsert(self, character_data: Dict[str, Any]) -> CharacterPool:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å CharacterPool, –∏—Å–ø–æ–ª—å–∑—É—è upsert (INSERT ON CONFLICT DO UPDATE).
        """
        insert_stmt = pg_insert(CharacterPool).values(**character_data)

        # –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
        update_fields = {
            "name": insert_stmt.excluded.name,
            "surname": insert_stmt.excluded.surname,
            "gender": insert_stmt.excluded.gender,
            "base_stats": insert_stmt.excluded.base_stats,
            "initial_skill_levels": insert_stmt.excluded.initial_skill_levels,
            "creature_type_id": insert_stmt.excluded.creature_type_id,
            "personality_id": insert_stmt.excluded.personality_id,
            "background_story_id": insert_stmt.excluded.background_story_id,
            "initial_role_name": insert_stmt.excluded.initial_role_name,
            "visual_appearance_data": insert_stmt.excluded.visual_appearance_data,
            # üî•üî•üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ú–µ–Ω—è–µ–º "initial_inventory" –Ω–∞ "initial_inventory_id"
            "initial_inventory_id": insert_stmt.excluded.initial_inventory_id,
            "status": insert_stmt.excluded.status,
            "is_unique": insert_stmt.excluded.is_unique,
            "rarity_score": insert_stmt.excluded.rarity_score,
            "last_used_at": insert_stmt.excluded.last_used_at,
            "death_timestamp": insert_stmt.excluded.death_timestamp
        }
        # –î–æ–±–∞–≤–ª—è–µ–º last_accessed –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –º–æ–¥–µ–ª–∏ –∏ –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
        if hasattr(insert_stmt.excluded, 'last_accessed'):
             update_fields["last_accessed"] = insert_stmt.excluded.last_accessed

        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[CharacterPool.character_pool_id], # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ ID
            set_=update_fields
        ).returning(CharacterPool)

        result = await self.session.execute(on_conflict_stmt)
        updated_or_inserted_character = result.scalar_one()
        await self.session.flush()
        await self.session.refresh(updated_or_inserted_character)
        return updated_or_inserted_character


    async def get_by_id(self, character_pool_id: int) -> Optional[CharacterPool]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å CharacterPool –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
        """
        stmt = select(CharacterPool).where(CharacterPool.character_pool_id == character_pool_id)
        result = await self.session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_many(
        self,
        offset: int = 0,
        limit: int = 100,
        filters: Optional[Dict[str, Any]] = None
    ) -> List[CharacterPool]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π CharacterPool —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, —Å–º–µ—â–µ–Ω–∏—è –∏ –ª–∏–º–∏—Ç–∞.
        """
        stmt = select(CharacterPool)
        if filters:
            for key, value in filters.items():
                if hasattr(CharacterPool, key):
                    stmt = stmt.where(getattr(CharacterPool, key) == value)
        
        stmt = stmt.offset(offset).limit(limit).order_by(CharacterPool.character_pool_id) # –î–æ–±–∞–≤–∏–ª order_by –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        result = await self.session.execute(stmt)
        return list(result.scalars().all())

    async def update(self, character_pool_id: int, update_data: Dict[str, Any]) -> Optional[CharacterPool]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å CharacterPool –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
        """
        if not update_data: # –ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
            return await self.get_by_id(character_pool_id)

        stmt = (
            update(CharacterPool)
            .where(CharacterPool.character_pool_id == character_pool_id)
            .values(**update_data)
            .returning(CharacterPool)
            .execution_options(synchronize_session="fetch") # –∏–ª–∏ False, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        )
        result = await self.session.execute(stmt)
        updated_character = result.scalar_one_or_none()
        # await self.session.commit() # Commit –æ–±—ã—á–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Ä–≤–∏—Å–∞/use case
        if updated_character:
            await self.session.flush()
            await self.session.refresh(updated_character) # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
        return updated_character

    async def delete(self, character_pool_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å CharacterPool –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É.
        """
        stmt = delete(CharacterPool).where(CharacterPool.character_pool_id == character_pool_id)
        result = await self.session.execute(stmt)
        # await self.session.commit() # Commit –æ–±—ã—á–Ω–æ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Ä–≤–∏—Å–∞/use case
        return result.rowcount > 0

    # ---- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø ----
    async def get_all_characters(self) -> List[CharacterPool]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã CharacterPool.

        Returns:
            List[CharacterPool]: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ CharacterPool –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        """
        stmt = select(CharacterPool).order_by(CharacterPool.character_pool_id) # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        result = await self.session.execute(stmt)
        return list(result.scalars().all())
    # ---- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ----
