# game_server/Logic/InfrastructureLogic/celery/task/tasks_character_generation.py

import asyncio
from game_server.Logic.InfrastructureLogic.celery.celery_app import app
from game_server.services.logging.logging_setup import logger

# --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ò–ú–ü–û–†–¢–ê–• ---
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CentralRedisClient
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import central_redis_client

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à "—á–∏—Å—Ç—ã–π" –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Å–µ—Å—Å–∏–∏ –ë–î
from game_server.Logic.InfrastructureLogic.DataAccessLogic.worker_db_utils import get_worker_db_session
from game_server.Logic.DomainLogic.worker_autosession.worker_character_template.character_batch_processor import process_character_batch_logic

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from game_server.Logic.ApplicationLogic.coordinator_generator.constant.constant_generator import (
    CHARACTER_GENERATION_REDIS_TASK_KEY_TEMPLATE,
    HIGHEST_QUALITY_LEVEL_NAME
)
from game_server.Logic.ApplicationLogic.coordinator_generator.constant.constant_character import (
    TARGET_POOL_QUALITY_DISTRIBUTION
)


@app.task(
    bind=True,
    name="character_generation.process_character_generation_batch_task",
    max_retries=3,
    default_retry_delay=60,
    autoretry_for=(ConnectionRefusedError, TimeoutError,),
    retry_backoff=True,
    retry_backoff_max=600,
    retry_jitter=True,
    ignore_result=True
)
def process_character_generation_batch_task(self, redis_worker_batch_id: str):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ Celery-–∑–∞–¥–∞—á—É.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É —Å –ø–æ–º–æ—â—å—é asyncio.run().
    """
    log_prefix = f"TASK_ID({redis_worker_batch_id}):"
    try:
        logger.info(f"{log_prefix} –ó–∞–ø—É—Å–∫ Celery-–∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
        asyncio.run(
            _run_async_task_logic(self, redis_worker_batch_id)
        )
        logger.info(f"{log_prefix} –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    except Exception as e:
        error_type = type(e).__name__
        error_message_full = f"{log_prefix} üî• –û–¢–õ–ê–î–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ ({error_type}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ä–∞–±–æ—Ç—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {e}"
        logger.critical(error_message_full, exc_info=True)
        raise self.retry(exc=e, countdown=self.default_retry_delay)


async def _run_async_task_logic(self, redis_worker_batch_id: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á–∏, —Ç–µ–ø–µ—Ä—å –±–µ–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Redis-–∫–ª–∏–µ–Ω—Ç–æ–º."""
    inner_log_prefix = f"TASK_ASYNC_LOGIC_ID({redis_worker_batch_id}):"
    
    try:
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Redis –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ Event Loop üî•
        await central_redis_client.reinitialize_connection()

        async with get_worker_db_session() as db_session:
            await process_character_batch_logic(
                redis_worker_batch_id=redis_worker_batch_id,
                db_session=db_session,
                task_key_template=CHARACTER_GENERATION_REDIS_TASK_KEY_TEMPLATE,
                target_quality_distribution=TARGET_POOL_QUALITY_DISTRIBUTION,
                highest_quality_level_name=HIGHEST_QUALITY_LEVEL_NAME
            )
    except Exception as e:
        logger.error(f"{inner_log_prefix} –û—à–∏–±–∫–∞ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ: {e}", exc_info=True)
        raise e
    finally:
        # –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ GlobalRedisClient —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É–ª–æ–º.
        # –û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
        # –≤ –¥—Ä—É–≥–æ–º Event Loop –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏, –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å close,
        # –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è.
        # –û—Å—Ç–∞–≤–∏–º —ç—Ç–æ –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ aioredis –∏ –µ–≥–æ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
        pass
