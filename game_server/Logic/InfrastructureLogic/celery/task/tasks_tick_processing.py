# game_server/Logic/InfrastructureLogic/celery/task/tasks_tick_processing.py

import asyncio
import logging
from celery import Celery
from typing import Dict, List, Any, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –ª–æ–≥–≥–µ—Ä
from game_server.services.logging.logging_setup import logger as logger_celery

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TickCacheManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞—Ç—á–µ–π –∏–∑ Redis
from game_server.Logic.InfrastructureLogic.app_cache.services.tick_cache_manager import tick_cache_manager

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä Celery App
from game_server.Logic.InfrastructureLogic.celery.celery_app import app 

# üî• –ù–û–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CentralRedisClient üî•
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import central_redis_client

# ÔøΩ –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –õ–û–ì–ò–ö–ò –¢–ò–ö–û–í üî•
# –ó–¥–µ—Å—å –≤—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç–µ –∫–ª–∞—Å—Å—ã/—Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É
# –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∫—Ä–∞—Ñ—Ç–∏–Ω–≥:
# from game_server.Logic.ApplicationLogic.game_logic.tick_handlers import TickLogicHandler 
# –ò–ª–∏ –µ—Å–ª–∏ —É –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞:
# from game_server.Logic.ApplicationLogic.game_logic.training_tick_processor import process_training_tick
# from game_server.Logic.ApplicationLogic.game_logic.exploration_tick_processor import process_exploration_tick
# from game_server.Logic.ApplicationLogic.game_logic.crafting_tick_processor import process_crafting_tick


class MockTickLogicHandler:
    async def handle_instruction(self, character_id: int, task_type: str, instruction_details: str, full_instruction_data: Dict[str, Any]):
        logger_celery.debug(f"Executing real logic for Character ID: {character_id}, Type: {task_type}, Details: '{instruction_details}'")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ —Ç.–¥.
        
        # üî• –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã: –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É üî•
        await asyncio.sleep(1) 
        
        logger_celery.debug(f"‚òëÔ∏è Celery: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Character ID: {character_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–∏–º–∏—Ç–∞—Ü–∏—è 1—Å).")


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é Celery-–∑–∞–¥–∞—á–∏ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π (`def`) üî•
@app.task(bind=True, default_retry_delay=5, max_retries=3)
def process_tick_batch_task(self, category: str, batch_id: str):
    """
    Celery-–∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞—Ç—á–∞ —Ç–∏–∫–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É —Å –ø–æ–º–æ—â—å—é asyncio.run().
    """
    logger_celery.info(f"üöÄ Celery: –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –±–∞—Ç—á–∞ —Ç–∏–∫–æ–≤ '{batch_id}' –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.")
    try:
        asyncio.run(
            _run_async_tick_task_logic(self, category, batch_id)
        )
        logger_celery.info(f"üèÅ Celery: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤ –±–∞—Ç—á–µ '{batch_id}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logger_celery.error(f"‚ùå Celery: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞—Ç—á–∞ —Ç–∏–∫–æ–≤ '{batch_id}' ({category}): {str(e)}", exc_info=True)
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É Celery üî•
        raise self.retry(exc=e)


# üî• –ù–û–í–ê–Ø –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –õ–û–ì–ò–ö–ò –¢–ò–ö–û–í üî•
async def _run_async_tick_task_logic(self, category: str, batch_id: str):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–∫–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
    –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π Redis-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ Event Loop.
    """
    try:
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ Redis –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ Event Loop üî•
        await central_redis_client.reinitialize_connection()

        instructions_batch = await tick_cache_manager.get_batch_by_id(category, batch_id)

        if not instructions_batch:
            logger_celery.error(f"‚ùå Celery: –ë–∞—Ç—á '{batch_id}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∏—Å—Ç–µ–∫ –ø–æ TTL –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.")
            return

        logger_celery.info(f"‚úÖ Celery: –ë–∞—Ç—á '{batch_id}' ({category}) –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ Redis. –°–æ–¥–µ—Ä–∂–∏—Ç {len(instructions_batch)} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–∏–∫–∏
        logic_handler = MockTickLogicHandler() 

        for instruction in instructions_batch:
            character_id = instruction.get('character_id')
            task_type = instruction.get('task_type')
            instruction_details = instruction.get('instruction_details')
            
            logger_celery.info(f"‚öôÔ∏è Celery: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Character ID: {character_id}, Type: {task_type}, Details: '{instruction_details}'")

            # üî•üî•üî• –í–´–ó–û–í –í–ê–®–ï–ô –†–ï–ê–õ–¨–ù–û–ô –õ–û–ì–ò–ö–ò –¢–ò–ö–û–í üî•üî•üî•
            await logic_handler.handle_instruction(character_id, task_type, instruction_details, instruction)

            logger_celery.debug(f"‚òëÔ∏è Celery: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Character ID: {character_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")

        await tick_cache_manager.remove_batch_by_id(category, batch_id)
        logger_celery.info(f"üóëÔ∏è Celery: –ë–∞—Ç—á '{batch_id}' —É–¥–∞–ª–µ–Ω –∏–∑ Redis –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    except Exception as e:
        logger_celery.error(f"‚ùå Celery: –û—à–∏–±–∫–∞ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ —Ç–∏–∫–æ–≤: {str(e)}", exc_info=True)
        raise e # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –≤–Ω–µ—à–Ω–∏–π except –≤ process_tick_batch_task –º–æ–≥ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
