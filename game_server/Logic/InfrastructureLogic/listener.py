
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.services.logging.logging_setup import logger


import json

from game_server.settings import REDIS_CHANNELS

class RedisListener:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ Redis-–∫–∞–Ω–∞–ª—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""

    def __init__(self):
        self.redis_client = CentralRedisClient().redis  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç Redis –Ω–∞–ø—Ä—è–º—É—é
        

    async def start_listening(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π."""
        pubsub = self.redis_client.pubsub()

        try:
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –ª–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–∫ info
            logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã: {REDIS_CHANNELS}")
            await pubsub.subscribe(*REDIS_CHANNELS.values())
            logger.info(f"üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã: {', '.join(REDIS_CHANNELS.values())}")

            async for message in pubsub.listen():
                msg_type = message.get("type")
                if msg_type == "message":
                    await self.process_message(message["channel"], message["data"])
                elif msg_type == "subscribe":
                    # –ó–¥–µ—Å—å –≤–º–µ—Å—Ç–æ warning –≤—ã–≤–æ–¥–∏–º info –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                    channel = message.get("channel")
                    if isinstance(channel, bytes):
                        channel = channel.decode()
                    logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: {channel}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ: {e}")

    async def process_message(self, channel, data):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∫–∞–Ω–∞–ª–∞–º."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø, —á—Ç–æ–±—ã –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–π—Ç—ã
        channel = channel.decode() if isinstance(channel, bytes) else channel
        if isinstance(data, bytes):
            data = data.decode()
        # –ï—Å–ª–∏ data —É–∂–µ —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –¥–∞–∂–µ –¥–∏–∫—Ç ‚Äì –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –ª–∏–±–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        elif not isinstance(data, (str, dict)):
            data = str(data)

        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ `{data}` –∏–∑ `{channel}`")

        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        handlers = {
            REDIS_CHANNELS["coordinator"]: self.process_message_coordinator,
            REDIS_CHANNELS["worker"]: self.process_message_worker,
            REDIS_CHANNELS["tasks"]: self.process_message_tasks,
            REDIS_CHANNELS["alerts"]: self.process_message_alerts,
            REDIS_CHANNELS["system"]: self.process_message_system,
        }

        handler = handlers.get(channel)
        if handler:
            await handler(data)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: {channel}")


        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö —Å –∫–∞–Ω–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    async def process_message_coordinator(self, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ listener."""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç —Å–∞–º–æ–≥–æ listener ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
        if data in ["new_tasks", "shutdown"]:  # –î–æ–±–∞–≤—å –Ω—É–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            logger.info(f"üîÑ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ `{data}` –æ—Ç listener")
            return

        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
        await self.redis_client.set("coordinator_status", data)
        logger.info(f"üõë –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞ `{data}` (–±–µ–∑ JSON, –±–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π)")



    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤
    async def process_message_worker(self, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤: –µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç 'check_report', –ø–µ—Ä–µ–¥–∞—ë—Ç –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É."""
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É
        data = data.decode() if isinstance(data, bytes) else data

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 'check_report', –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É
        if data == "check_report":
            await self.redis_client.publish(
                REDIS_CHANNELS["coordinator"],
                json.dumps({"command": "check_report"})
            )
            logger.info("üì© –ü–æ–ª—É—á–µ–Ω–æ 'check_report' –æ—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É.")
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤: {data}")


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ tasks
    async def process_message_tasks(self, data):
        """–ß–∏—Ç–∞–µ–º `tasks`, –ø–æ–ª—É—á–∞–µ–º `new_tasks`, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –ø–µ—Ä–µ–¥–∞—ë–º –≤ `coordinator` –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."""
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö –≤ —Å—Ç—Ä–æ–∫—É
        data = data.decode() if isinstance(data, bytes) else data

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –∏–∑ Redis
        coordinator_status = await self.redis_client.get("coordinator_status")
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –µ–≥–æ; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "sleeping"
        coordinator_status = coordinator_status.decode() if coordinator_status else "sleeping"

        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ "new_tasks"
        if data == "new_tasks":
            # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä "—Å–ø–∏—Ç" –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø–æ—Ä—Ç–æ–≤, –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É
            if coordinator_status in ["sleeping", "checking_reports"]:
                await self.redis_client.publish(REDIS_CHANNELS["coordinator"], "new_tasks")
                logger.info(f"üöÄ –ü–æ–ª—É—á–µ–Ω–æ `new_tasks`, —Å—Ç–∞—Ç—É—Å `{coordinator_status}`, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É.")
            else:
                # –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —É–∂–µ –∑–∞–Ω—è—Ç, –ø—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–∞–∫—Ç, –Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.info(f"‚è≥ `new_tasks` –ø—Ä–∏—à–ª–æ, –Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —É–∂–µ `{coordinator_status}`, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.")
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç `tasks`: {data}")


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def process_message_system(self, data):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –µ—Å–ª–∏ 'shutdown', –ø–µ—Ä–µ–¥–∞—ë—Ç –µ–≥–æ –∫–ª—é—á–µ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º, –Ω–æ –ù–ï alerts."""
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∏—Ö
        data = data.decode() if isinstance(data, bytes) else data

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ "shutdown"
        if data == "shutdown":
            shutdown_message = json.dumps({"command": "shutdown"})

            # –†–∞—Å—Å—ã–ª–∞–µ–º –∫–æ–º–∞–Ω–¥—É 'shutdown' –ø–æ –∫–ª—é—á–µ–≤—ã–º –∫–∞–Ω–∞–ª–∞–º (–Ω–µ –≤–∫–ª—é—á–∞—è alerts)
            for channel in ["coordinator", "tasks", "worker"]:
                await self.redis_client.publish(REDIS_CHANNELS[channel], shutdown_message)

            logger.info("üõë –ü–æ–ª—É—á–µ–Ω–æ 'shutdown' –∏–∑ system_channel! –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É, –≤–æ—Ä–∫–µ—Ä–∞–º –∏ —Ç–∞—Å–∫–∞–º.")
        else:
            # –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ system_channel: {data}")




    async def process_message_alerts(self, data):
        logger.info(f"üõë –ó–∞–≥–ª—É—à–∫–∞ –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è alerts: {data}")  # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ






if __name__ == "__main__":
    import asyncio
    listener = RedisListener()
    
    async def main():
        await listener.start_listening()
        logger.info("üöÄ –°–ª—É—à–∞—Ç–µ–ª—å Redis –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    asyncio.run(main())  # üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä —Å RedisListener
