import logging
import asyncio
from typing import Dict, Any

from sqlalchemy.ext.asyncio import AsyncSession # –û—Å—Ç–∞–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ db_session –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è
from arq import ArqRedis # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è ctx['redis']

from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

# –ò–ú–ü–û–†–¢ –ò–ù–¢–ï–†–§–ï–ô–°–û–í –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏)
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_task_queue_cache import ITaskQueueCacheManager # –ò–ó–ú–ï–ù–ï–ù–û
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient # –ò–ó–ú–ï–ù–ï–ù–û
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_reference_data_reader import IReferenceDataReader # –ò–ó–ú–ï–ù–ï–ù–û

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç RepositoryManager –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager # –î–û–ë–ê–í–õ–ï–ù–û

from game_server.config.provider import config


async def arq_process_exploration_task(
    ctx: Dict[str, Any],
    batch_id: str
) -> None:
    log_prefix = f"EXPLORATION_TASK_ID({batch_id}):"
    logger.info(f"‚úÖ [WORKER] –ü–æ–ª—É—á–µ–Ω–∞ ARQ-–∑–∞–¥–∞—á–∞ –Ω–∞ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï. Batch ID: {batch_id}. –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã...")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ARQ
    app_managers = ctx.get('app_managers')
    arq_redis_pool: ArqRedis = ctx['redis']
    db_session: AsyncSession = ctx['db_session'] # db_session –≤—Å–µ –µ—â–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    repository_manager: RepositoryManager = ctx['repository_manager'] # –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º RepositoryManager

    if not app_managers:
        logger.critical(f"{log_prefix} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: 'app_managers' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ARQ –≤–æ—Ä–∫–µ—Ä–∞.")
        raise RuntimeError("'app_managers' not initialized in ARQ worker context.")

    task_queue_cache_manager: ITaskQueueCacheManager = app_managers.get('task_queue_cache_manager')
    central_redis_client: CentralRedisClient = app_managers.get('central_redis_client')
    reference_data_reader: IReferenceDataReader = app_managers.get('reference_data_reader')

    if (
        task_queue_cache_manager is None or
        central_redis_client is None or
        reference_data_reader is None or
        repository_manager is None # –î–û–ë–ê–í–õ–ï–ù–û
    ):
        logger.critical(f"{log_prefix} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏–∑ app_managers/ctx) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ ARQ-–∫–æ–Ω—Ç–µ–∫—Å—Ç!")
        raise RuntimeError("Required app managers are None in ARQ worker context.")

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è —ç—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ DomainLogic:
    # from game_server.Logic.DomainLogic.some_exploration_logic import ExplorationService
    # exploration_service = ExplorationService(repository_manager=repository_manager, app_cache_managers=app_managers)
    # await exploration_service.process_exploration_data(batch_id)

    await asyncio.sleep(1) # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    logger.info(f"üèÅ [WORKER] ARQ-–∑–∞–¥–∞—á–∞ –Ω–∞ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï (Batch ID: {batch_id}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def arq_process_training_task(
    ctx: Dict[str, Any],
    batch_id: str
) -> None:
    log_prefix = f"TRAINING_TASK_ID({batch_id}):"
    logger.info(f"‚úÖ [WORKER] –ü–æ–ª—É—á–µ–Ω–∞ ARQ-–∑–∞–¥–∞—á–∞ –Ω–∞ –¢–†–ï–ù–ò–†–û–í–ö–£. Batch ID: {batch_id}. –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã...")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ARQ
    app_managers = ctx.get('app_managers')
    arq_redis_pool: ArqRedis = ctx['redis']
    db_session: AsyncSession = ctx['db_session'] # db_session –≤—Å–µ –µ—â–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    repository_manager: RepositoryManager = ctx['repository_manager'] # –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º RepositoryManager

    if not app_managers:
        logger.critical(f"{log_prefix} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: 'app_managers' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ARQ –≤–æ—Ä–∫–µ—Ä–∞.")
        raise RuntimeError("'app_managers' not initialized in ARQ worker context.")

    task_queue_cache_manager: ITaskQueueCacheManager = app_managers.get('task_queue_cache_manager')
    central_redis_client: CentralRedisClient = app_managers.get('central_redis_client')
    reference_data_reader: IReferenceDataReader = app_managers.get('reference_data_reader')

    if (
        task_queue_cache_manager is None or
        central_redis_client is None or
        reference_data_reader is None or
        repository_manager is None # –î–û–ë–ê–í–õ–ï–ù–û
    ):
        logger.critical(f"{log_prefix} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏–∑ app_managers/ctx) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ ARQ-–∫–æ–Ω—Ç–µ–∫—Å—Ç!")
        raise RuntimeError("Required app managers are None in ARQ worker context.")

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è —ç—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    # from game_server.Logic.DomainLogic.some_training_logic import TrainingService
    # training_service = TrainingService(repository_manager=repository_manager, app_cache_managers=app_managers)
    # await training_service.process_training_data(batch_id)

    await asyncio.sleep(1) # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    logger.info(f"üèÅ [WORKER] ARQ-–∑–∞–¥–∞—á–∞ –Ω–∞ –¢–†–ï–ù–ò–†–û–í–ö–£ (Batch ID: {batch_id}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

async def arq_process_crafting_task(
    ctx: Dict[str, Any],
    batch_id: str
) -> None:
    log_prefix = f"CRAFTING_TASK_ID({batch_id}):"
    logger.info(f"‚úÖ [WORKER] –ü–æ–ª—É—á–µ–Ω–∞ ARQ-–∑–∞–¥–∞—á–∞ –Ω–∞ –ö–†–ê–§–¢. Batch ID: {batch_id}. –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã...")
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ARQ
    app_managers = ctx.get('app_managers')
    arq_redis_pool: ArqRedis = ctx['redis']
    db_session: AsyncSession = ctx['db_session'] # db_session –≤—Å–µ –µ—â–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    repository_manager: RepositoryManager = ctx['repository_manager'] # –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º RepositoryManager

    if not app_managers:
        logger.critical(f"{log_prefix} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: 'app_managers' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ ARQ –≤–æ—Ä–∫–µ—Ä–∞.")
        raise RuntimeError("'app_managers' not initialized in ARQ worker context.")

    task_queue_cache_manager: ITaskQueueCacheManager = app_managers.get('task_queue_cache_manager')
    central_redis_client: CentralRedisClient = app_managers.get('central_redis_client')
    reference_data_reader: IReferenceDataReader = app_managers.get('reference_data_reader')
    
    if (
        task_queue_cache_manager is None or
        central_redis_client is None or
        reference_data_reader is None or
        repository_manager is None # –î–û–ë–ê–í–õ–ï–ù–û
    ):
        logger.critical(f"{log_prefix} –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∏–∑ app_managers/ctx) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ ARQ-–∫–æ–Ω—Ç–µ–∫—Å—Ç!")
        raise RuntimeError("Required app managers are None in ARQ worker context.")

    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à–∞ —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è —ç—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
    # from game_server.Logic.DomainLogic.some_crafting_logic import CraftingService
    # crafting_service = CraftingService(repository_manager=repository_manager, app_cache_managers=app_managers)
    # await crafting_service.process_crafting_data(batch_id)

    await asyncio.sleep(1) # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
    logger.info(f"üèÅ [WORKER] ARQ-–∑–∞–¥–∞—á–∞ –Ω–∞ –ö–†–ê–§–¢ (Batch ID: {batch_id}) –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")