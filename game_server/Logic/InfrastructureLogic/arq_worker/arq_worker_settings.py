from arq.worker import Worker
from arq.connections import RedisSettings
import asyncio

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
from game_server.Logic.InfrastructureLogic.db_instance import AsyncSessionLocal
from game_server.Logic.InfrastructureLogic.app_post.session_managers.worker_db_utils import get_worker_db_session

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∏—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
from game_server.Logic.InfrastructureLogic.app_cache.app_cache_initializer import (
    initialize_app_cache_managers,
    shutdown_app_cache_managers,
    get_initialized_app_cache_managers
)
from game_server.Logic.InfrastructureLogic.app_post.app_post_initializer import (
    initialize_app_post_managers,
    get_repository_manager_instance,
    shutdown_app_post_managers
)
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –Ω–∞–ø—Ä—è–º—É—é –∏–∑ settings_core
from game_server.config.settings_core import REDIS_PASSWORD, REDIS_POOL_SIZE, REDIS_URL, REDIS_CACHE_URL
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MessageBus (–¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏)
from game_server.Logic.InfrastructureLogic.messaging.message_bus import RedisMessageBus

# –ò–ú–ü–û–†–¢–ò–†–£–ï–ú CONFIG PROVIDER
from game_server.config.provider import config


# –ü–æ–ª–Ω—ã–µ –ø—É—Ç–∏ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∑–∞–¥–∞—á (–∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
TASKS = [
    config.constants.arq.ARQ_TASK_GENERATE_CHARACTER_BATCH,
    config.constants.arq.ARQ_TASK_PROCESS_ITEM_GENERATION_BATCH,
    config.constants.arq.ARQ_TASK_PROCESS_EXPLORATION,
    config.constants.arq.ARQ_TASK_PROCESS_TRAINING,
    config.constants.arq.ARQ_TASK_PROCESS_CRAFTING,
]

logger.info(f"DEBUG: REDIS_URL (RAW from settings_core): {REDIS_URL}")
logger.info(f"DEBUG: REDIS_CACHE_URL (RAW from settings_core): {REDIS_CACHE_URL}")


class WorkerSettings: # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–ª–∞—Å—Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –æ–±—Ä–∞—Ç–Ω–æ –≤ WorkerSettings
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ARQ –≤–æ—Ä–∫–µ—Ä–∞.
    """
    redis_settings = RedisSettings.from_dsn(REDIS_CACHE_URL)

    functions = TASKS

    cron_jobs = []

    @staticmethod
    async def on_startup(ctx: dict):
        logger.info("üîß ARQ Worker startup: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ PostgreSQL (RepositoryManager)
        logger.info("üîß ARQ Worker startup: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ PostgreSQL (RepositoryManager)...")
        app_post_init_successful = await initialize_app_post_managers(async_session_factory=AsyncSessionLocal)
        if not app_post_init_successful:
            logger.critical("üö® ARQ Worker startup: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ PostgreSQL. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            raise RuntimeError("Failed to initialize app post managers on worker startup.")
        ctx['repository_manager'] = get_repository_manager_instance()
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã PostgreSQL —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤ (CentralRedisClient –≤–Ω—É—Ç—Ä–∏)
        logger.info("üîß ARQ Worker startup: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤ (DB 0)...")
        cache_init_successful = await initialize_app_cache_managers(async_session_factory=AsyncSessionLocal)
        if not cache_init_successful:
            logger.critical("üö® ARQ Worker startup: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            raise RuntimeError("Failed to initialize app cache managers on worker startup.")
        ctx['app_managers'] = get_initialized_app_cache_managers()
        logger.info("‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤ (–∏–∑ app_cache_initializer) —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MessageBus
        logger.info("üîß ARQ Worker startup: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MessageBus...")
        ctx["message_bus"] = RedisMessageBus(redis_pool=ctx['redis'])
        logger.info("‚úÖ MessageBus —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –∑–∞–¥–∞—á–∞—Ö)
        ctx['logger'] = logger
        logger.info("‚úÖ –õ–æ–≥–≥–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç ARQ –≤–æ—Ä–∫–µ—Ä–∞.")

        # 5. –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–ª—É—á–∞—Ç—å –∏—Ö –∏–∑ ctx)
        logger.info("üîß ARQ Worker startup: –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏...")
        ctx["periodic_task"] = asyncio.create_task(
            WorkerSettings.run_periodic_task(ctx) # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞
        )
        logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞.")
        
        logger.info("‚úÖ ARQ Worker startup: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

    @staticmethod
    async def on_job_start(ctx: dict):
        logger.debug(f"‚öôÔ∏è ARQ Worker: –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î –¥–ª—è –∑–∞–¥–∞—á–∏ {ctx.get('job_id')}.")
        try:
            session_obj = get_worker_db_session(ctx['repository_manager'])
            ctx["db_session_context"] = session_obj
            ctx["db_session"] = await session_obj.__aenter__()
            logger.debug(f"‚úÖ ARQ Worker: –°–µ—Å—Å–∏—è –ë–î –¥–ª—è –∑–∞–¥–∞—á–∏ {ctx.get('job_id')} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
        except Exception as e:
            logger.error(f"‚ùå ARQ Worker: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –ë–î –¥–ª—è –∑–∞–¥–∞—á–∏ {ctx.get('job_id')}: {e}", exc_info=True)
            raise

    @staticmethod
    async def on_job_end(ctx: dict):
        logger.debug(f"‚öôÔ∏è ARQ Worker: –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î –¥–ª—è –∑–∞–¥–∞—á–∏ {ctx.get('job_id')}.")
        db_session_context = ctx.get("db_session_context")
        if db_session_context:
            try:
                await db_session_context.__aexit__(None, None, None)
                logger.debug(f"‚úÖ ARQ Worker: –°–µ—Å—Å–∏—è –ë–î –¥–ª—è –∑–∞–¥–∞—á–∏ {ctx.get('job_id')} –∑–∞–∫—Ä—ã—Ç–∞.")
            except Exception as e:
                logger.error(f"‚ùå ARQ Worker: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –ë–î –¥–ª—è –∑–∞–¥–∞—á–∏ {ctx.get('job_id')}: {e}", exc_info=True)
        else:
            logger.warning(f"‚ö†Ô∏è ARQ Worker: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–µ—Å—Å–∏—è –ë–î –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {ctx.get('job_id')}.")

    @staticmethod
    async def run_periodic_task(ctx: dict):
        logger = ctx.get("logger")
        from game_server.Logic.ApplicationLogic.start_orcestrator.coordinator_run.auto_tick_module.tick_AutoSession_Watcher import collect_and_dispatch_sessions
        
        while True:
            try:
                if logger:
                    logger.info("‚è±Ô∏è –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏")
                
                await collect_and_dispatch_sessions(
                    repository_manager=ctx['repository_manager'],
                    message_bus=ctx["message_bus"],
                    app_cache_managers=ctx['app_managers']
                )
                
                if logger:
                    logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                
                await asyncio.sleep(config.settings.runtime.PERIODIC_TASK_INTERVAL_SECONDS)
                
            except asyncio.CancelledError:
                if logger:
                    logger.info("üõë –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
            except Exception as e:
                if logger:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ: {e}", exc_info=True)
                await asyncio.sleep(config.settings.runtime.PERIODIC_TASK_ERROR_INTERVAL_SECONDS)

    @staticmethod
    async def on_shutdown(ctx: dict):
        logger = ctx.get("logger")
        if logger:
            logger.info("üõë ARQ Worker shutdown: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        periodic_task = ctx.get("periodic_task")
        if periodic_task:
            periodic_task.cancel()
            try:
                await periodic_task
            except asyncio.CancelledError:
                pass
            if logger:
                logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        
        await shutdown_app_cache_managers()

        await shutdown_app_post_managers()

        from game_server.Logic.InfrastructureLogic.app_post.sql_config.sqlalchemy_settings import engine
        if engine:
            await engine.dispose()
            if logger:
                logger.info("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π SQLAlchemy (–¥–≤–∏–∂–æ–∫) –∑–∞–∫—Ä—ã—Ç.")

        if logger:
            logger.info("‚úÖ ARQ Worker shutdown: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
