# game_server/Logic/InfrastructureLogic/arq_worker/arq_worker_settings.py

import asyncio
import logging
from arq.connections import RedisSettings
from typing import Dict, Any, Callable
from sqlalchemy.ext.asyncio import AsyncSession 

from game_server.core.di_container import initialize_di_container, shutdown_di_container

from game_server.config.constants.arq import TASKS
from game_server.config.settings_core import REDIS_CACHE_URL
from game_server.config.logging.logging_setup import app_logger as logger
from game_server.config.provider import config

# –ò–ú–ü–û–†–¢–´ –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –î–õ–Ø DI
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.core_world.interfaces_core_world import IGameLocationRepository
from game_server.Logic.InfrastructureLogic.app_mongo.repository_groups.world_state.interfaces_world_state_mongo import ILocationStateRepository, IWorldStateRepository
from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data.reference_data_reader import ReferenceDataReader
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_1lvl.interfaces_meta_data_1lvl import IEquipmentTemplateRepository, ICharacterPoolRepository
from game_server.Logic.InfrastructureLogic.app_cache.services.task_queue.redis_batch_store import RedisBatchStore
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.item_generator.item_batch_processor import ItemBatchProcessor
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.character_generator.character_batch_processor import CharacterBatchProcessor
from game_server.Logic.ApplicationLogic.world_orchestrator.workers.world_map_generator.world_map_generator import WorldMapGenerator


import inject


class WorkerSettings:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è ARQ –≤–æ—Ä–∫–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–µ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
    –¢–µ–ø–µ—Ä—å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –∑–∞–¥–∞—á –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ ctx.
    """
    redis_settings = RedisSettings.from_dsn(REDIS_CACHE_URL)
    functions = TASKS
    cron_jobs = []
    
    # ctx –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DI
    ctx = {}

    @staticmethod
    async def on_startup(ctx: dict):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –≤–æ—Ä–∫–µ—Ä–∞.
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø–æ–º–µ—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ ctx.
        """
        logger.info("üîß ARQ Worker startup: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ARQ...")
        try:
            await initialize_di_container()
            
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ inject
            # –∏ –ø–æ–º–µ—â–∞–µ–º –∏—Ö –≤ ctx.
            ctx["logger"] = inject.instance(logging.Logger)
            ctx["redis_reader"] = inject.instance(ReferenceDataReader)
            ctx["redis_batch_store"] = inject.instance(RedisBatchStore)
            
            # –§–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
            ctx["pg_location_repo_factory"] = inject.instance(Callable[[AsyncSession], IGameLocationRepository])
            ctx["equipment_template_repo_factory"] = inject.instance(Callable[[AsyncSession], IEquipmentTemplateRepository])
            ctx["character_pool_repo_factory"] = inject.instance(Callable[[AsyncSession], ICharacterPoolRepository])
            
            # Mongo —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (–æ–±—ã—á–Ω–æ –Ω–µ —Ç—Ä–µ–±—É—é—Ç —Å–µ—Å—Å–∏–∏)
            ctx["mongo_world_repo"] = inject.instance(IWorldStateRepository)
            ctx["location_state_repo"] = inject.instance(ILocationStateRepository)

            # –≠–∫–∑–µ–º–ø–ª—è—Ä—ã –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è –∏ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä—è–º–æ –≤ –∑–∞–¥–∞—á–∞—Ö
            # (–ï—Å–ª–∏ –æ–Ω–∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä—É—é—Ç—Å—è –≤ –∑–∞–¥–∞—á–∏, —Ç–æ –∏—Ö –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ—â–∞—Ç—å –≤ ctx)
            # –ï—Å–ª–∏ ItemBatchProcessor, CharacterBatchProcessor, WorldMapGenerator —Å–æ–∑–¥–∞—é—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ ARQ-–∑–∞–¥–∞—á,
            # –∏ –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—Ñ–∞–±—Ä–∏–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤, —Ä–∏–¥–µ—Ä—ã) –±–µ—Ä—É—Ç—Å—è –∏–∑ ctx, —Ç–æ –∏—Ö —Å–∞–º–∏—Ö –Ω–µ –Ω–∞–¥–æ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å.
            # –ï—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –≤ autoparams —Ä–∞–Ω–µ–µ, –∑–Ω–∞—á–∏—Ç, –æ–Ω–∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ ARQ-–∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏—Ö.
            # –ï—Å–ª–∏ –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Å–∏–Ω–≥–ª—Ç–æ–Ω—ã, –∏—Ö –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞.

            WorkerSettings.ctx.update(ctx)
            ctx["logger"].info("‚úÖ ARQ Worker startup: DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏ –ø–æ–º–µ—â–µ–Ω—ã –≤ ctx.")

        except Exception as e:
            logger.critical(f"üö® ARQ Worker startup: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
            await WorkerSettings.on_shutdown(ctx) 
            raise

    @staticmethod
    async def on_job_start(ctx: dict):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ–π.
        –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ –ë–î –£–î–ê–õ–ï–ù–ê, —Ç–∞–∫ –∫–∞–∫ @transactional –±–µ—Ä–µ—Ç —ç—Ç–æ –Ω–∞ —Å–µ–±—è.
        """
        current_logger = ctx.get('logger', logging.getLogger(__name__))
        current_logger.debug(f"‚öôÔ∏è ARQ Worker: –ù–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏ {ctx.get('job_id')}.")
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –£–¥–∞–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π –ë–î
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é
        # ctx["db_session_context"] = session_obj
        # ctx["db_session"] = await session_obj.__aenter__()

    @staticmethod
    async def on_job_end(ctx: dict):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏.
        –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–π –ë–î –£–î–ê–õ–ï–ù–ê.
        """
        current_logger = ctx.get('logger', logging.getLogger(__name__))
        current_logger.debug(f"‚öôÔ∏è ARQ Worker: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {ctx.get('job_id')}.")
        # üî• –ò–ó–ú–ï–ù–ï–ù–û: –£–¥–∞–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
        # db_session_context = ctx.get("db_session_context")
        # if db_session_context:
        #     try:
        #         await db_session_context.__aexit__(None, None, None)
        #     except Exception as e:
        #         current_logger.error(f"‚ùå ARQ Worker: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –ë–î: {e}", exc_info=True)

    @staticmethod
    async def run_periodic_task(ctx: dict):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
        # –ü–æ—Å–∫–æ–ª—å–∫—É ARQ-–∑–∞–¥–∞—á–∏ —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ ctx,
        # collect_and_dispatch_sessions, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è,
        # –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–∏–±–æ –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞–±–∏–Ω–∂–µ–Ω–∞ –∫–∞–∫ —Å–∏–Ω–≥–ª—Ç–æ–Ω, –ª–∏–±–æ
        # –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ ctx, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç—Å—é–¥–∞.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –±—ã–ª–æ, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ collect_and_dispatch_sessions
        # —Å–∞–º–∞ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç —Å–≤–æ–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ autoparams.
        from game_server.Logic.ApplicationLogic.world_orchestrator.workers.autosession_watcher.tick_AutoSession_Watcher import collect_and_dispatch_sessions
        
        periodic_task_instance = inject.instance(collect_and_dispatch_sessions)

        while True:
            try:
                ctx["logger"].info("‚è±Ô∏è –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏...")
                await periodic_task_instance()
                ctx["logger"].info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
                await asyncio.sleep(config.settings.runtime.PERIODIC_TASK_INTERVAL_SECONDS)
            except asyncio.CancelledError:
                ctx["logger"].info("üõë –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                break
            except Exception as e:
                ctx["logger"].error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–µ: {e}", exc_info=True)
                await asyncio.sleep(config.settings.runtime.PERIODIC_TASK_ERROR_INTERVAL_SECONDS)

    @staticmethod
    async def on_shutdown(ctx: dict):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Ä–∫–µ—Ä–∞."""
        logger.info("üõë ARQ Worker shutdown: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        periodic_task = ctx.get("periodic_task")
        if periodic_task:
            periodic_task.cancel()
            try:
                await periodic_task
            except asyncio.CancelledError:
                pass
            logger.info("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        
        await shutdown_di_container()
        
        logger.info("‚úÖ ARQ Worker shutdown: –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É.")