import asyncio
import json
from game_server.Logic.InfrastructureLogic.tick_infra.coordinator.handler.Clean_Processor_handler import (
    cleanup_available_workers, 
    cleanup_batch_results, 
    cleanup_batch_status,
    cleanup_processed_batches, 
    cleanup_successful_handlers, 
    cleanup_tick_processed, 
    cleanup_tick_status,  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    extract_active_handlers, 
    process_batch_report
)
from game_server.Logic.InfrastructureLogic.tick_infra.tick_utils.tick_logger import logger  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä

from game_server.app_cache.redis_client import RedisClient  
from game_server.Logic.DataAccessLogic.db_instance import get_db_session  


class CleanProcessor:
    def __init__(self):
        self.redis_client = RedisClient()  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º `self.redis_client`
        self.db_session = None

    async def connect(self):
        self.db_session = await get_db_session().__anext__()
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

    async def cleanup(self):
        """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Redis –∏ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—á–∏—Å—Ç–∫–∏...")

        # ‚úÖ 1. –ò–∑–≤–ª–µ–∫–∞–µ–º `active_handlers`
        batch_ids, handler_names, statuses = await extract_active_handlers(self.redis_client)

        # ‚úÖ 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º `finish_handlers_tick`
        batch_status_list, failed_tasks_list = await process_batch_report(self.redis_client)

        # ‚úÖ 3. –ß–∏—Å—Ç–∏–º `active_handlers`, —É–¥–∞–ª—è—è `batch_id`, –∏–º–µ—é—â–∏–π —Å—Ç–∞—Ç—É—Å `"success"`
        await cleanup_successful_handlers(self.redis_client, batch_status_list, batch_ids)

        # ‚úÖ 4. –ß–∏—Å—Ç–∏–º `available_workers_archive`
        await cleanup_available_workers(self.redis_client, batch_status_list, failed_tasks_list, batch_ids)

        # ‚úÖ 5. –ß–∏—Å—Ç–∏–º `batch_results`
        await cleanup_batch_results(self.redis_client, batch_status_list, failed_tasks_list, batch_ids)

        # ‚úÖ 6. –ß–∏—Å—Ç–∏–º `tick_processed`, —É–¥–∞–ª—è—è `"done"`, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π `"success"`
        await cleanup_tick_processed(self.redis_client, batch_status_list)

        # ‚úÖ 7. **–í –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å** –æ—á–∏—â–∞–µ–º `processed_batches`, —É–¥–∞–ª—è—è `"success"`
        await cleanup_processed_batches(self.redis_client, batch_status_list)

        # ‚úÖ 8. **–í –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—á–µ—Ä–µ–¥—å** –æ—á–∏—â–∞–µ–º `batch_status`, —É–¥–∞–ª—è—è `"success"`
        await cleanup_batch_status(self.redis_client, batch_status_list)

        # ‚úÖ 9. **–ó–∞–≤–µ—Ä—à–∞–µ–º –æ—á–∏—Å—Ç–∫—É `tick_status`**
        await cleanup_tick_status(self.redis_client)  # ‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ

        logger.info("üèÅ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à—ë–Ω!")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        await self.set_status_coordinator("finish_report", False)
        logger.info("üèÅ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    async def set_status_coordinator(self, key: str, value: bool):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –≤ Redis."""
        await self.redis_client.set(key, str(value))
        logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å '{key}' –æ–±–Ω–æ–≤–ª—ë–Ω: {value}")

async def main():
    cleanup = CleanProcessor()
    await cleanup.connect()
    await cleanup.cleanup()  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ `cleanup()` –≤–º–µ—Å—Ç–æ `process_tick_data()`

if __name__ == "__main__":
    asyncio.run(main())


