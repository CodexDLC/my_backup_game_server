






import asyncio
import os

from sqlalchemy import func, select
from game_server.Logic.DataAccessLogic.db_instance import AsyncSessionLocal
from game_server.Logic.InfrastructureLogic.tick_infra.tick_utils.tick_logger import logger
from game_server.Logic.InfrastructureLogic.tick_infra.coordinator.tick_coordinator_listener import REDIS_CHANNELS
from game_server.app_cache.redis_client import RedisClient
from game_server.database.models.models import AutoSessions 


class AutoSessionWatcher:
    def __init__(self):
        self.db = AsyncSessionLocal
        self.redis = RedisClient()
        self._active = False
        self._task = None
        logger.info("üîß AutoSessionWatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def periodic_check(self,):
        """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ auto_sessions"""
        while self._active:
            try:
                logger.debug("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á...")
                if await self._has_pending_tasks():
                    logger.info("üî• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–¥–∞—á–∏, –æ—Ç–ø—Ä–∞–≤–∫–∞ `run_collector` –≤ Redis...")
                    await self.redis.publish(REDIS_CHANNELS["coordinator"], "run_collector")
                    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ `run_collector` –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
                else:
                    logger.debug("‚ö° –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ Watcher:", exc_info=True)

            logger.debug("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...")
            await asyncio.sleep(30)  # üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        if self._task and not self._task.done():
            logger.warning("‚ö†Ô∏è Watcher —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return
              
        self._active = True  # ‚úÖ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ AutoSessionWatcher...")
        self._task = asyncio.create_task(self.periodic_check())  # ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        logger.info("‚úÖ AutoSessionWatcher –∑–∞–ø—É—â–µ–Ω!")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç watcher"""
        logger.warning("‚ö†Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AutoSessionWatcher...")
        self._active = False
        if self._task:
            self._task.cancel()  # ‚ùå –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            logger.info("‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        logger.info("‚ùå AutoSessionWatcher –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def _has_pending_tasks(self) -> bool:
        logger.debug("üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–¥–∞—á –≤ –∞–≤—Ç–æ-—Å–µ—Å—Å–∏—è—Ö —á–µ—Ä–µ–∑ SQLAlchemy...")
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                select(AutoSessions).where(AutoSessions.next_tick_at <= func.now())
            )
            records = result.scalars().all()
        logger.info(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {records}")
        return bool(records)
