import asyncio
import json
from game_server.Logic.DataAccessLogic.db_instance import get_db_session
from game_server.Logic.InfrastructureLogic.tick_infra.tick_utils.tick_logger import logger
from game_server.app_cache.redis_client import RedisClient



class ReportProcessor:
    def __init__(self, redis=None, coordinator=None):
        """
        :param redis: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        :param coordinator: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π Coordinator
        """
        self.redis = redis or RedisClient()
        self.coordinator = coordinator
        self._using_external_redis = redis is not None
        self.db_session = None

    async def __aenter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        await self.connect()
        return self

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        await self.close()

    async def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î"""
        if self.db_session is None:
            self.db_session = await get_db_session().__anext__()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    async def close(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.db_session:
            await self.db_session.close()
            self.db_session = None
            
        if not self._using_external_redis:
            await self.redis.close()

    async def process_report(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        try:
            logger.info("üöÄ [REPORT] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—á–µ—Ç–∞")
            
            async with self:
                batch_data = await self._fetch_batch_data()
                await self._handle_failed_tasks(batch_data)
                await self._update_batch_statuses(batch_data)
                await self._notify_coordinator()
                
            logger.info("üèÅ [REPORT] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå [REPORT] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            await self._handle_failure()
            raise

    async def _fetch_batch_data(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±–∞—Ç—á–∞—Ö"""
        raw_data = await self.redis.hgetall("finish_handlers_tick")
        return {
            batch_id: json.loads(data) 
            for batch_id, data in raw_data.items()
        }

    async def _handle_failed_tasks(self, batch_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–¥–∞—á"""
        for batch_id, data in batch_data.items():
            if data.get("failed_tasks"):
                failed_tasks = json.loads(data["failed_tasks"])
                if failed_tasks:
                    await self.redis.sadd("tick_processing_failed", *failed_tasks)
                    await self.redis.hset("batch_status", batch_id, "failed")
                    logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã failed-–∑–∞–¥–∞—á–∏: {failed_tasks}")

    async def _update_batch_statuses(self, batch_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –±–∞—Ç—á–µ–π"""
        updates = [
            self.redis.hset("batch_status", batch_id, data["status"])
            for batch_id, data in batch_data.items()
        ]
        await asyncio.gather(*updates)
        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è {len(updates)} –±–∞—Ç—á–µ–π")

    async def _notify_coordinator(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        if self.coordinator:
            await self.coordinator.handle_command("clean")
        else:
            await self.redis.publish("coordinator_channel", json.dumps({
                "command": "clean",
                "source": "report_processor"
            }))
        logger.info("üì¢ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏")

    async def _handle_failure(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ–µ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
        if self.coordinator:
            await self.coordinator.handle_command("process_failed")
        else:
            await self.redis.publish("coordinator_channel", "process_failed")