import asyncio
from game_server.Logic.InfrastructureLogic.tick_infra.tick_utils.tick_logger import logger
from game_server.app_cache.redis_client import RedisClient
from game_server.Logic.InfrastructureLogic.tick_infra.coordinator.handler.task_processor_handler import process_tasks



class TaskProcessor:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤ Coordinator"""
    
    def __init__(self, coordinator=None, redis=None):
        """
        :param coordinator: –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π Coordinator
        :param redis: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ - —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        """
        self.coordinator = coordinator
        self.redis = redis or RedisClient()
        self._using_external_redis = redis is not None

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
        try:
            logger.info("üöÄ [START] TaskProcessor –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—á–µ—Ä–µ–¥—å...")
            
            if await self._should_process():
                await self._full_processing_cycle()
            else:
                logger.info("üí§ –ù–µ—Ç –∑–∞–¥–∞—á, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ TaskProcessor: {str(e)}")
            await self._notify_failure()
        finally:
            await self._cleanup_resources()

    async def _should_process(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        batch_status_all = await self.redis.hgetall("batch_status")
        return any(status == "initiation" for status in batch_status_all.values())

    async def _full_processing_cycle(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á"""
        logger.info("‚úÖ –ó–∞–¥–∞—á–∏ –Ω–∞–π–¥–µ–Ω—ã! –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        await self._set_coordinator_status("new_tasks", True)
        await process_tasks(self.redis)
        await self._transition_to_next_stage()
        
        logger.info("üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    async def _transition_to_next_stage(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        await self._set_coordinator_status("new_tasks", False)
        
        if self.coordinator:
            await self.coordinator.handle_command("check_report")
        else:
            await self.redis.publish("coordinator_channel", "check_report")

    async def _set_coordinator_status(self, status_name: str, value: bool):
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        await self.redis.set(f"coordinator:{status_name}", "true" if value else "false")

    async def _notify_failure(self):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±–æ–µ"""
        if self.coordinator:
            await self.coordinator.handle_command("process_failed")
        else:
            await self.redis.publish("coordinator_channel", "process_failed")

    async def _cleanup_resources(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if not self._using_external_redis:
            await self.redis.close()