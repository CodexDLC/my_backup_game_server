


from game_server.Logic.InfrastructureLogic.tick_infra.tick_utils.tick_logger import logger

from game_server.Logic.DataAccessLogic.db_in import AsyncDatabase
from game_server.Logic.InfrastructureLogic.tick_infra.collector.handler.tick_collector_handler import (
    categorize_tasks, 
    cleanup_tick_processing_queue, 
    fetch_and_process_tasks, 
    get_ready_characters, 
    send_to_redis, 
    update_tick_info
    )


async def collector_handler(redis_client, tick_id, db: AsyncDatabase):
    """–°–ª–µ–¥–∏—Ç –∑–∞ –∑–∞–¥–∞—á–∞–º–∏, —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î –∏ –ø—Ä–æ–±—É–∂–¥–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä."""
    
    logger.info("üîÑ [auto_tick] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–∞")  # ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π `INFO` –≤ –Ω–∞—á–∞–ª–µ

    try:
        # üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        logger.debug("üîç –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
        active_sessions = await get_ready_characters(db)

        if not active_sessions:
            logger.info("‚úÖ –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")  # ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π `INFO`
            return

        logger.debug(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(active_sessions)} –≥–æ—Ç–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")

        # üì§ –ó–∞–ø–∏—Å—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ Redis
        await send_to_redis(active_sessions, redis_client, tick_id)

        # ‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ `next_tick_at` –≤ –ë–î
        logger.debug("‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–∏–∫–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π...")
        for char in active_sessions:
            await update_tick_info(char['character_id'], db)

        # üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        active_sessions.clear()
        logger.debug("üóëÔ∏è `active_sessions` –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")

        # üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á `tick_processing_queue`
        parsed_tasks = await fetch_and_process_tasks(redis_client)

        if not parsed_tasks:
            logger.info("‚úÖ –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, –≤—ã—Ö–æ–¥.")  # ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π `INFO`
            return

        logger.debug(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(parsed_tasks)} –∑–∞–¥–∞—á, –≥–æ—Ç–æ–≤–∏–º –∏—Ö –∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é.")

        # üîé –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á
        task_groups = await categorize_tasks(parsed_tasks, redis_client)

        if not task_groups:
            logger.info("‚úÖ –ù–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–¥–∞—á, –≤—ã—Ö–æ–¥.")  # ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π `INFO`
            return

        logger.debug(f"üóÉÔ∏è –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ {len(task_groups)} `batch_id`, –∑–∞–ø–∏—Å–∞–Ω–æ –≤ Redis.")

        # üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ `tick_processing_queue`, –µ—Å–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã
        await cleanup_tick_processing_queue(redis_client)

        logger.info("üèÅ `collector_handler` —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É.")  # ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π `INFO`

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ `collector_handler`: {e}", exc_info=True)



