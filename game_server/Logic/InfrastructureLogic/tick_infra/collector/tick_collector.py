from contextlib import asynccontextmanager
import os
from datetime import datetime, timezone
from game_server.Logic.InfrastructureLogic.tick_infra.tick_utils.tick_logger import logger

from game_server.Logic.InfrastructureLogic.tick_infra.collector.tick_collector_processor import collector_handler
from game_server.Logic.InfrastructureLogic.tick_infra.tick_utils.task_utils import initialize_server
from game_server.app_cache.redis_client import RedisClient
from game_server.Logic.DataAccessLogic.db_in import AsyncDatabase


class Collector:
    """–ö–æ–ª–ª–µ–∫—Ç–æ—Ä —Å —Ç–≤–æ–∏–º –º–µ—Ç–æ–¥–æ–º run_collector() –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º lifecycle."""
    
    def __init__(self, db_url):
        self.redis_client = None  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–≤–æ–∏–º –∫–æ–¥–æ–º
        self.db = AsyncDatabase(db_url)  # ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
        self.server_start_time = None
        self._is_initialized = False  # –§–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
    async def start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∞–Ω–∞–ª–æ–≥ —Ç–≤–æ–µ–≥–æ initialize())."""
        self.redis_client = RedisClient()    
        await self.db.connect()  # ‚úÖ –ü–æ–¥–∫–ª—é—á–∞–µ–º –ë–î        
        self.server_start_time = datetime.now(timezone.utc)
        await self.redis_client.set("collector_status", "active")
        self._is_initialized = True
        logger.info("‚úÖ Collector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (status=active)")

    async def stop(self):
        """–ê–Ω–∞–ª–æ–≥ —Ç–≤–æ–µ–≥–æ _safe_shutdown()."""
        if self.db:
            await self.db.disconnect()
        if self.redis_client:
            await self.redis_client.close()
        self._is_initialized = False

    @asynccontextmanager
    async def lifecycle(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤—ã–∑–æ–≤ start/stop –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)."""
        try:
            await self.start()
            yield self
        finally:
            await self.stop()

    async def run_collector(self, tick_id: str) -> bool:
        """–¢–≤–æ–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        if not self._is_initialized:
            logger.error("Collector –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            return False

        logger.debug(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è tick_id={tick_id}")
        
        try:
            current_time = datetime.now(timezone.utc)
            logger.debug(f"üïí –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: {self.server_start_time}, —Ç–µ–∫—É—â–µ–µ: {current_time.isoformat()}")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
            await collector_handler(self.redis_client, tick_id, self.db)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
            await self.redis_client.publish(
                os.getenv("REDIS_COORDINATOR_CHANNEL", "coordinator_channel"),
                "new_tasks"
            )
            
            await self.redis_client.set("collector_status", "sleep")
            logger.info(f"‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è tick_id={tick_id} –∑–∞–≤–µ—Ä—à–µ–Ω. Status=sleep")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_collector: {e}", exc_info=True)
            await self.redis_client.set("collector_status", "error")
            return False