import asyncio
from datetime import datetime, timezone
import json
import time
from typing import Awaitable
from game_server.Logic.InfrastructureLogic.tick_infra.tick_utils.tick_logger import logger



# ‚úÖ –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–¥–∞—á

async def set_tick_status(redis_client, character_id, tick_id, status):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ `tick_status`."""
    tick_key = f"tick_status_{character_id}_{tick_id}"
    await redis_client.hset("tick_status", tick_key, status)
    logger.info(f"‚úÖ `tick_status` –æ–±–Ω–æ–≤–ª—ë–Ω: {tick_key} ‚Üí {status}")

async def get_tick_status(redis_client, character_id, tick_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑ `tick_status`."""
    tick_key = f"tick_status_{character_id}_{tick_id}"
    flag = await redis_client.hget("tick_status", tick_key)
    return flag if flag else None


# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á

async def check_for_available_batches(redis_client):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True` –∏–ª–∏ `False`."""
    logger.debug("üîÑ [DEBUG] –ó–∞–ø—Ä–æ—Å `available_workers_cache` –∏–∑ Redis...")
    available_workers_raw = await redis_client.get("available_workers_cache") or "[]"
    available_workers = json.loads(available_workers_raw)

    if not available_workers:
        logger.info("‚úÖ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return False

    logger.debug(f"üì¶ [DEBUG] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞—á–∏: {available_workers}")
    return True


async def check_for_initiation_batches(redis_client):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ `batch_id` —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º `initiation` –≤ `batch_status`."""
    logger.debug("üîÑ [DEBUG] –ó–∞–ø—Ä–æ—Å `batch_status` –∏–∑ Redis...")
    batch_statuses_raw = await redis_client.hgetall("batch_status")

    if not batch_statuses_raw:
        logger.info("‚úÖ `batch_status` –ø—É—Å—Ç, –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö `batch_id`.")
        return False  

    logger.debug(f"üì¶ [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã `batch_id`: {batch_statuses_raw}")

    for batch_id, status in batch_statuses_raw.items():
        if status == "initiation":
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω `batch_id={batch_id}` —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º `initiation`, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É!")
            return True  

    logger.info("‚ö† –ù–µ—Ç `batch_id` —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º `initiation`, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
    return False  


# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞

async def initialize_server(redis_client):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç `server_start_time` –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Redis –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ—Å—Ç–∞—Ä—Ç–µ."""
    server_start_time = int(time.time())  
    await redis_client.set("server_start_time", server_start_time)
    
    logger.info(f"üïí [INIT] –û–±–Ω–æ–≤–∏–ª–∏ `server_start_time`: {server_start_time}")
    
    return server_start_time


# ‚úÖ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á

async def finish_active_tasks(redis_client):
    """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å–µ—Ä–≤–∏—Å–∞."""
    while True:
        active_handlers = await redis_client.hgetall("active_handlers")
        
        if not active_handlers:
            logger.info("‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
            break

        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {len(active_handlers)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
    
        await asyncio.sleep(1)  


# ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ `tick_processing_queue`

async def check_tick_processing_queue(redis_client):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç `tick_processing_queue` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–¥–∞—á–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'I'."""
    raw_tasks = await redis_client.lrange("tick_processing_queue", 0, -1)  

    if not raw_tasks:
        logger.info("üí§ `tick_processing_queue` –ø—É—Å—Ç, —Ä–∞–±–æ—Ç—ã –Ω–µ—Ç.")
        return False  

    logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω–æ `{len(raw_tasks)}` –∑–∞–¥–∞—á –≤ `tick_processing_queue`.")

    for task in raw_tasks:
        task_parts = task.split(":")
        if len(task_parts) < 3:
            logger.warning(f"‚ö† –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–¥–∞—á–∏: `{task}`. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        status_key = f"tick_status_{task_parts[1]}_{task_parts[2]}"  
        status = await redis_client.hget("tick_status", status_key)

        if status == "I":
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ `{task}` —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'I'. –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É!")
            return True  

    logger.info("‚ö† –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–æ–≤—ã–µ (`I`). –ù–µ—Ç —Ä–∞–±–æ—Ç—ã.")
    return False  


async def get_tick_tasks(redis_client):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ `tick_processing_queue`."""
    tasks = await redis_client.lrange("tick_processing_queue", 0, -1)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    return tasks  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á


async def set_status_coordinator(self, status_name: str, value: bool):
    val_str = "true" if value else "false"
    key = f"coordinator:{status_name}"
    await self.redis.set(key, val_str)


async def check_and_run(
    db,  # –û–±—ä–µ–∫—Ç –ë–î —Å –º–µ—Ç–æ–¥–æ–º get_data()
    collector_runner: Awaitable  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Collector (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç tick_id)
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç auto_sessions –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Collector –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    
    Returns:
        bool: –ë—ã–ª–∞ –ª–∏ —Ä–∞–±–æ—Ç–∞ (True = Collector –∑–∞–ø—É—â–µ–Ω)
    """
    logger.debug("üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ auto_sessions...")
    
    current_time = datetime.now(timezone.utc)
    query = "SELECT next_tick_at FROM auto_sessions"
    result = await db.get_data(query)

    if not any(row["next_tick_at"] <= current_time for row in result):
        logger.debug("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
        return False

    logger.debug("üîç –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞! –ó–∞–ø—É—Å–∫–∞–µ–º Collector...")
    tick_id = int(current_time.timestamp())
    await collector_runner(tick_id)  # –ù–∞–ø—Ä–∏–º–µ—Ä: `Collector().lifecycle()`
    return True