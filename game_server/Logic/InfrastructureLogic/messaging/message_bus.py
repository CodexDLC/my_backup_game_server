#game_server\Logic\InfrastructureLogic\messaging\message_bus.py

import asyncio
from typing import Dict, Any, AsyncIterator
from arq.connections import ArqRedis

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–º–µ—Å—Ç–æ json –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º msgpack
import msgpack

from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger
from .message_format import create_message


class RedisMessageBus:
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —à–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –±–∞–∑–µ Redis Streams.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MsgPack –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
    """
    def __init__(self, redis_pool: ArqRedis):
        self.redis = redis_pool
        logger.info("‚úÖ RedisMessageBus (—Å MsgPack) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def publish(self, channel: str, message: Dict[str, Any]):
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª (—Å—Ç—Ä–∏–º) Redis.
        –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç payload —Å –ø–æ–º–æ—â—å—é MsgPack.
        """
        full_message = create_message(payload=message)
        payload_to_publish = full_message.get("payload", {})
        
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º msgpack.packb –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–π—Ç—ã
        # packb = pack to bytes
        packed_payload = msgpack.packb(payload_to_publish, use_bin_type=True)
        
        await self.redis.xadd(channel, {'payload': packed_payload})
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª '{channel}'")

    async def subscribe(self, channel: str, last_id: str = '$') -> AsyncIterator[Dict[str, Any]]:
        """
        –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª (—Å—Ç—Ä–∏–º) –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç payload —Å –ø–æ–º–æ—â—å—é MsgPack.
        """
        logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª '{channel}'...")
        while True:
            try:
                # –û–∂–∏–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—Ç—Ä–∏–º–µ
                messages = await self.redis.xread(
                    streams={channel: last_id},
                    count=1,
                    block=0 # –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤, –∂–¥–µ—Ç –≤–µ—á–Ω–æ
                )
                
                for stream, message_list in messages:
                    for message_id, raw_message in message_list:
                        if b'payload' in raw_message:
                            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º msgpack.unpackb –¥–ª—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –±–∞–π—Ç–æ–≤
                            # unpackb = unpack from bytes
                            payload = msgpack.unpackb(raw_message[b'payload'], raw=False)
                            yield payload
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        last_id = message_id

            except ConnectionError:
                logger.error(f"–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –≤ MessageBus. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                await asyncio.sleep(5)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–µ MessageBus: {e}", exc_info=True)
                await asyncio.sleep(1)