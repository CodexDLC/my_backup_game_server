import asyncio
import json
import logging
import aio_pika
from typing import Optional, Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ RABBITMQ_URL
from game_server.settings import RABBITMQ_URL #

logger = logging.getLogger(__name__)

class RabbitMQClient:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å RabbitMQ.
    –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, –∫–∞–Ω–∞–ª–∞–º–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    def __init__(self):
        self._connection: Optional[aio_pika.Connection] = None
        self._channel: Optional[aio_pika.Channel] = None
        self._is_connected = False
        logger.info("‚úÖ RabbitMQClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def connect(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ."""
        if self._is_connected and self._connection and not self._connection.is_closed:
            logger.info("RabbitMQClient: –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.")
            return

        try:
            self._connection = await aio_pika.connect_robust(
                url=RABBITMQ_URL,
                loop=asyncio.get_running_loop()
            )
            self._channel = await self._connection.channel()
            self._is_connected = True
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ö–æ—Å—Ç/–ø–æ—Ä—Ç –∏–ª–∏ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL üî•
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç –∏–∑ URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            parsed_url = aio_pika.connection.URL(RABBITMQ_URL)
            safe_url = f"amqp://{parsed_url.host}:{parsed_url.port}/" #
            logger.info(f"‚úÖ RabbitMQClient —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {safe_url}") #
        except Exception as e:
            self._is_connected = False
            logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {str(e)}", exc_info=True)
            raise ConnectionError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ RabbitMQ: {str(e)}")

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ."""
        if self._channel:
            await self._channel.close()
            self._channel = None
        if self._connection:
            await self._connection.close()
            self._connection = None
        self._is_connected = False
        logger.info("üëã RabbitMQClient: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")

    async def publish_message(
        self,
        queue_name: str,
        message_body: Dict[str, Any],
        delivery_mode: aio_pika.DeliveryMode = aio_pika.DeliveryMode.PERSISTENT,
        exchange_name: str = ''
    ):
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –æ—á–µ—Ä–µ–¥—å RabbitMQ.
        """
        if not self._is_connected or not self._channel:
            logger.error("‚ùå RabbitMQClient –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        try:
            message_json = json.dumps(message_body).encode('utf-8')
            message = aio_pika.Message(
                body=message_json,
                content_type='application/json',
                delivery_mode=delivery_mode
            )
            
            exchange = self._channel.default_exchange if not exchange_name else await self._channel.get_exchange(exchange_name)

            await exchange.publish(
                message,
                routing_key=queue_name
            )
            logger.debug(f"‚úÖ RabbitMQClient: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å '{queue_name}'.")
        except Exception as e:
            logger.error(f"‚ùå RabbitMQClient: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å '{queue_name}': {e}", exc_info=True)


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
rabbitmq_client = RabbitMQClient()