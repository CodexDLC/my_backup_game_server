# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/npc/monster/elite_monster_repository_impl.py

import logging
from typing import List, Dict, Any, Optional, Tuple
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy import select, update, delete
from sqlalchemy.future import select as fselect
from sqlalchemy.dialects.postgresql import insert as pg_insert

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ EliteMonster
from game_server.database.models.models import EliteMonster

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.npc.monster.interfaces_monster import IEliteMonsterRepository


# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.config.logging.logging_setup import app_logger as logger


class EliteMonsterRepositoryImpl(IEliteMonsterRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é EliteMonster.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create_monster(self, data: Dict[str, Any]) -> EliteMonster: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —ç–ª–∏—Ç–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        new_monster = EliteMonster(**data)
        self._session.add(new_monster)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–≠–ª–∏—Ç–Ω—ã–π –º–æ–Ω—Å—Ç—Ä (ID: {new_monster.monster_instance_id if hasattr(new_monster, 'monster_instance_id') else 'N/A'}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é.")
        return new_monster

    async def get_monster_by_id(self, monster_instance_id: int) -> Optional[EliteMonster]: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        """
        –ü–æ–ª—É—á–∞–µ—Ç —ç–ª–∏—Ç–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –ø–æ –µ–≥–æ ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        result = await self._session.get(EliteMonster, monster_instance_id)
        return result

    async def get_all_monsters(self, is_active: Optional[bool] = None) -> List[EliteMonster]: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —ç–ª–∏—Ç–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ —Å—Ç–∞—Ç—É—Å—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(EliteMonster)
        if is_active is not None:
            stmt = stmt.where(EliteMonster.is_active == is_active)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def get_monster_by_name(self, display_name: str) -> Optional[EliteMonster]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —ç–ª–∏—Ç–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –ø–æ –µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(EliteMonster).where(EliteMonster.display_name == display_name)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def update_monster(self, monster_instance_id: int, updates: Dict[str, Any]) -> Optional[EliteMonster]: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–∏—Ç–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –ø–æ –µ–≥–æ ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = update(EliteMonster).where(EliteMonster.monster_instance_id == monster_instance_id).values(**updates).returning(EliteMonster)
        result = await self._session.execute(stmt)
        updated_monster = result.scalars().first()
        if updated_monster:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–≠–ª–∏—Ç–Ω—ã–π –º–æ–Ω—Å—Ç—Ä (ID: {monster_instance_id}) –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–≠–ª–∏—Ç–Ω—ã–π –º–æ–Ω—Å—Ç—Ä —Å ID {monster_instance_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_monster

    async def delete_monster(self, monster_instance_id: int) -> bool: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        """
        –£–¥–∞–ª—è–µ—Ç —ç–ª–∏—Ç–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –ø–æ –µ–≥–æ ID —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = delete(EliteMonster).where(EliteMonster.monster_instance_id == monster_instance_id)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–≠–ª–∏—Ç–Ω—ã–π –º–æ–Ω—Å—Ç—Ä (ID: {monster_instance_id}) –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–≠–ª–∏—Ç–Ω—ã–π –º–æ–Ω—Å—Ç—Ä —Å ID {monster_instance_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def upsert_many(self, data_list: List[Dict[str, Any]]) -> Tuple[int, int]:
        """
        –ú–∞—Å—Å–æ–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —ç–ª–∏—Ç–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        if not data_list:
            logger.info("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è EliteMonster upsert_many. –ù–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ.")
            return 0, 0

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
        # –ò—Å–∫–ª—é—á–∞–µ–º 'monster_instance_id', —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ PK —Å autoincrement
        updatable_fields = [
            "monster_template_id", "display_name", "current_location",
            "last_player_killed_id", "killed_players_count", "current_status",
            "killed_by_info_json", "unique_modifiers_json", "is_active",
            "spawn_priority", "last_seen_at" # created_at –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º
        ]

        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è set_ –Ω–∞ –æ—Å–Ω–æ–≤–µ excluded –ø–æ–ª–µ–π
        set_clause = {field: getattr(pg_insert(EliteMonster).excluded, field) for field in updatable_fields}

        insert_stmt = pg_insert(EliteMonster).values(data_list)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[EliteMonster.monster_instance_id], # –ò—Å–ø–æ–ª—å–∑—É–µ–º PK –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
            set_=set_clause
        ).returning(EliteMonster.monster_instance_id) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º PK, —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ

        result = await self._session.execute(on_conflict_stmt)

        # SQLAlchemy –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç rowcount, –∫–æ—Ç–æ—Ä—ã–π –¥–ª—è upsert –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–æ–≤—Å–µ–º —Ç–æ—á–Ω—ã–º –ø–æ insert/update.
        # –û–¥–Ω–∞–∫–æ, –¥–ª—è do_update –æ–Ω –æ–±—ã—á–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö/–≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫.
        total_affected = result.rowcount # –≠—Ç–æ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫

        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç inserted/updated —Ç—Ä–µ–±—É–µ—Ç –ª–∏–±–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏, –ª–∏–±–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ –±–∞–∑–µ.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –∑–¥–µ—Å—å –º—ã –Ω–µ –º–æ–∂–µ–º –ª–µ–≥–∫–æ —Ä–∞–∑–ª–∏—á–∏—Ç—å insert –∏ update –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        # –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (–∑–∞—Ç—Ä–æ–Ω—É—Ç–æ, 0), –∏–ª–∏ –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ.
        inserted_count = total_affected # –ü—Ä–æ—Å—Ç–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è
        updated_count = 0 # –ü—Ä–æ—Å—Ç–∞—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏—è

        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {total_affected} —ç–ª–∏—Ç–Ω—ã—Ö –º–æ–Ω—Å—Ç—Ä–æ–≤ –≤ —Å–µ—Å—Å–∏–∏.")
        return inserted_count, updated_count
