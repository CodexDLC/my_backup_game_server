# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/meta_data_1lvl/equipment_template_repository_impl.py

import logging
from typing import List, Dict, Any, Optional
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy.future import select as fselect
from sqlalchemy import update, delete
from sqlalchemy.dialects.postgresql import insert as pg_insert
from sqlalchemy import func # –î–æ–±–∞–≤–ª–µ–Ω func –¥–ª—è count

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ EquipmentTemplate
from game_server.database.models.models import EquipmentTemplate

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_1lvl.interfaces_meta_data_1lvl import IEquipmentTemplateRepository

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.config.logging.logging_setup import app_logger as logger


class EquipmentTemplateRepositoryImpl(IEquipmentTemplateRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ EquipmentTemplate –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π).
    –†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å IEquipmentTemplateRepository.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.debug(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create(self, data: Dict[str, Any]) -> EquipmentTemplate:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –ø—Ä–µ–¥–º–µ—Ç–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        new_template = EquipmentTemplate(**data)
        self._session.add(new_template)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–®–∞–±–ª–æ–Ω –ø—Ä–µ–¥–º–µ—Ç–∞ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è '{new_template.item_code}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é.")
        return new_template

    async def get_by_id(self, id: int) -> Optional[EquipmentTemplate]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –µ–≥–æ —á–∏—Å–ª–æ–≤–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É (id) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(EquipmentTemplate).where(EquipmentTemplate.id == id) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è 'id'
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_by_item_code(self, item_code: str) -> Optional[EquipmentTemplate]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –µ–≥–æ item_code –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(EquipmentTemplate).where(EquipmentTemplate.item_code == item_code)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_all_item_codes(self) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ item_code —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(EquipmentTemplate.item_code)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def get_all(self) -> List[EquipmentTemplate]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥—É get_all –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        """
        stmt = fselect(EquipmentTemplate)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def get_all_templates(self) -> List[EquipmentTemplate]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        (–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –±—ã–ª –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω. –û—Å—Ç–∞–≤–ª—è–µ–º.)
        """
        return await self.get_all() # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º get_all, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏

    async def update(self, item_code: str, updates: Dict[str, Any]) -> Optional[EquipmentTemplate]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω –ø–æ –µ–≥–æ item_code –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = update(EquipmentTemplate).where(EquipmentTemplate.item_code == item_code).values(**updates).returning(EquipmentTemplate)
        result = await self._session.execute(stmt)
        updated_template = result.scalars().first()
        if updated_template:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–®–∞–±–ª–æ–Ω (item_code: {item_code}) –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–®–∞–±–ª–æ–Ω —Å item_code {item_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_template

    async def delete(self, id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –µ–≥–æ —á–∏—Å–ª–æ–≤–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É (id) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = delete(EquipmentTemplate).where(EquipmentTemplate.id == id) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è 'id'
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–®–∞–±–ª–æ–Ω (ID: {id}) –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–®–∞–±–ª–æ–Ω —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def delete_by_item_code(self, item_code: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –µ–≥–æ item_code –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = delete(EquipmentTemplate).where(EquipmentTemplate.item_code == item_code)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–®–∞–±–ª–æ–Ω (item_code: {item_code}) –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–®–∞–±–ª–æ–Ω —Å item_code {item_code} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def delete_by_item_code_batch(self, item_codes: List[str]) -> int:
        """
        –ú–∞—Å—Å–æ–≤–æ —É–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –ø–æ —Å–ø–∏—Å–∫—É item_code –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        if not item_codes:
            logger.info("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ item_codes –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è. –ù–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ.")
            return 0

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä in_() –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        stmt = delete(EquipmentTemplate).where(EquipmentTemplate.item_code.in_(item_codes))
        result = await self._session.execute(stmt)
        deleted_count = result.rowcount
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –≤ —Å–µ—Å—Å–∏–∏.")
        return deleted_count

    async def upsert(self, data: Dict[str, Any]) -> EquipmentTemplate:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —Å –¥–∞–Ω–Ω—ã–º item_code —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
        –æ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è; –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.
        """
        item_code = data.get("item_code")
        if not item_code:
            raise ValueError("Item code must be provided for upsert operation.")

        insert_stmt = pg_insert(EquipmentTemplate).values(**data)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[EquipmentTemplate.item_code],
            set_={
                "display_name": insert_stmt.excluded.display_name,
                "category": insert_stmt.excluded.category,
                "sub_category": insert_stmt.excluded.sub_category,
                "equip_slot": insert_stmt.excluded.equip_slot,
                "inventory_size": insert_stmt.excluded.inventory_size,
                "material_code": insert_stmt.excluded.material_code,
                "suffix_code": insert_stmt.excluded.suffix_code,
                "base_modifiers_json": insert_stmt.excluded.base_modifiers_json,
                "quality_tier": insert_stmt.excluded.quality_tier,
                "rarity_level": insert_stmt.excluded.rarity_level,
                "icon_url": insert_stmt.excluded.icon_url,
                "description": insert_stmt.excluded.description,
            }
        ).returning(EquipmentTemplate)

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        upserted_template = result.scalar_one_or_none()
        if not upserted_template:
            raise RuntimeError("UPSERT —à–∞–±–ª–æ–Ω–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")
        logger.info(f"–®–∞–±–ª–æ–Ω '{item_code}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_template

    async def upsert_many(self, data_list: List[Dict[str, Any]]) -> int:
        """
        –ú–∞—Å—Å–æ–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —Å –¥–∞–Ω–Ω—ã–º item_code —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è; –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.
        """
        if not data_list:
            logger.info("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è upsert_many. –ù–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ.")
            return 0

        updatable_fields = {
            k: pg_insert(EquipmentTemplate).excluded[k]
            for k in EquipmentTemplate.__table__.columns.keys()
            if k not in ['item_code']
        }

        insert_stmt = pg_insert(EquipmentTemplate).values(data_list)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[EquipmentTemplate.item_code],
            set_=updatable_fields
        )

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        upserted_count = result.rowcount
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {upserted_count} —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_count
