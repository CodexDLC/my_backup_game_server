# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/meta_data_1lvl/character_pool_repository_impl.py

import logging
from typing import Dict, List, Any, Optional, Union, Tuple
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy.future import select as fselect
from sqlalchemy import update, delete
from sqlalchemy.dialects.postgresql import insert as pg_insert
from sqlalchemy import func as sql_func

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_1lvl.interfaces_meta_data_1lvl import ICharacterPoolRepository
from game_server.database.models.models import CharacterPool


# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.config.logging.logging_setup import app_logger as logger


class CharacterPoolRepositoryImpl(ICharacterPoolRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–¥ —Å—É—â–Ω–æ—Å—Ç—å—é CharacterPool.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create(self, character_data: Dict[str, Any]) -> CharacterPool:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å CharacterPool –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        if 'character_pool_id' in character_data and character_data['character_pool_id'] is None:
            del character_data['character_pool_id']

        new_character = CharacterPool(**character_data)
        self._session.add(new_character)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–ó–∞–ø–∏—Å—å CharacterPool (ID: {new_character.character_pool_id if hasattr(new_character, 'character_pool_id') else 'N/A'}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é.")
        return new_character

    async def upsert(self, character_data: Dict[str, Any]) -> CharacterPool:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å CharacterPool, –∏—Å–ø–æ–ª—å–∑—É—è upsert (INSERT ON CONFLICT DO UPDATE) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        insert_stmt = pg_insert(CharacterPool).values(**character_data)

        updatable_fields = {
            k: insert_stmt.excluded[k]
            for k in CharacterPool.__table__.columns.keys()
            if k != 'character_pool_id'
        }

        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[CharacterPool.character_pool_id],
            set_=updatable_fields
        ).returning(CharacterPool)

        result = await self._session.execute(on_conflict_stmt)
        updated_or_inserted_character = result.scalar_one_or_none()
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        if not updated_or_inserted_character:
            raise RuntimeError("UPSERT CharacterPool –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")
        logger.info(f"–ó–∞–ø–∏—Å—å CharacterPool (ID: {updated_or_inserted_character.character_pool_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
        return updated_or_inserted_character

    async def upsert_many(self, data_list: List[Dict[str, Any]]) -> int:
        """
        –ú–∞—Å—Å–æ–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ CharacterPool –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫.
        """
        if not data_list:
            return 0

        insert_stmt = pg_insert(CharacterPool).values(data_list)

        updatable_fields = {
            k: insert_stmt.excluded[k]
            for k in CharacterPool.__table__.columns.keys()
            if k not in ['character_pool_id']
        }

        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[CharacterPool.character_pool_id],
            set_=updatable_fields
        )

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        affected_rows = result.rowcount
        logger.info(f"–ú–∞—Å—Å–æ–≤—ã–π upsert CharacterPool –∑–∞—Ç—Ä–æ–Ω—É–ª {affected_rows} —Å—Ç—Ä–æ–∫ –≤ —Å–µ—Å—Å–∏–∏.")
        return affected_rows

    async def get_by_id(self, id: int) -> Optional[CharacterPool]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å CharacterPool –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(CharacterPool).where(CharacterPool.character_pool_id == id)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_many(
        self,
        offset: int = 0,
        limit: int = 100,
        filters: Optional[Dict[str, Any]] = None
    ) -> List[CharacterPool]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π CharacterPool —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, —Å–º–µ—â–µ–Ω–∏—è –∏ –ª–∏–º–∏—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(CharacterPool)
        if filters:
            for key, value in filters.items():
                if hasattr(CharacterPool, key):
                    stmt = stmt.where(getattr(CharacterPool, key) == value)

        stmt = stmt.offset(offset).limit(limit).order_by(CharacterPool.character_pool_id)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update(self, id: int, update_data: Dict[str, Any]) -> Optional[CharacterPool]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å CharacterPool –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        if not update_data:
            return await self.get_by_id(id)

        stmt = (
            update(CharacterPool)
            .where(CharacterPool.character_pool_id == id)
            .values(**update_data)
            .returning(CharacterPool)
        )
        result = await self._session.execute(stmt)
        updated_character = result.scalar_one_or_none()
        if updated_character:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–ó–∞–ø–∏—Å—å CharacterPool (ID: {id}) –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–ó–∞–ø–∏—Å—å CharacterPool (ID: {id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_character

    async def delete(self, id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å CharacterPool –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = delete(CharacterPool).where(CharacterPool.character_pool_id == id)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–ó–∞–ø–∏—Å—å CharacterPool (ID: {id}) –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–ó–∞–ø–∏—Å—å CharacterPool (ID: {id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def get_all(self) -> List[CharacterPool]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã CharacterPool –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        """
        return await self.get_all_characters()

    async def find_one_available_and_lock(self) -> Optional[CharacterPool]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –æ–¥–Ω—É –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–ª—è –≤—ã–¥–∞—á–∏ –∑–∞–ø–∏—Å—å –≤ –ø—É–ª–µ –∏ –∞—Ç–æ–º–∞—Ä–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –µ–µ
        –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = (
            fselect(CharacterPool)
            .where(CharacterPool.status == 'available')
            .limit(1)
            .with_for_update(skip_locked=True)
        )
        result = await self._session.execute(stmt)
        return result.scalars().first()

    async def delete_character(self, character: CharacterPool) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç CharacterPool –∏–∑ —Å–µ—Å—Å–∏–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        if not character:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç CharacterPool.")
            return False
        await self._session.delete(character)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–û–±—ä–µ–∫—Ç CharacterPool (ID: {character.character_pool_id if hasattr(character, 'character_pool_id') else 'N/A'}) –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
        return True

    async def get_all_characters(self) -> List[CharacterPool]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã CharacterPool –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(CharacterPool).order_by(CharacterPool.character_pool_id)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def get_random_sample(self, limit: int) -> List[Tuple[int, int]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –≤—ã–±–æ—Ä–∫—É (ID, rarity_score) –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = (
            fselect(CharacterPool.character_pool_id, CharacterPool.rarity_score)
            .where(CharacterPool.status == 'available')
            .order_by(sql_func.random())
            .limit(limit)
        )
        result = await self._session.execute(stmt)
        return result.fetchall()

    async def get_full_template_by_id(self, pool_id: int) -> Optional[CharacterPool]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(CharacterPool).where(CharacterPool.character_pool_id == pool_id)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def delete_template_by_id(self, pool_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞."""
        stmt = delete(CharacterPool).where(CharacterPool.character_pool_id == pool_id)
        result = await self._session.execute(stmt)
        # –í —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–µ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º rowcount, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
        return result.rowcount > 0
