# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/game_shards/game_shard_repository_impl.py

import logging
from typing import List, Optional, Dict, Any, Type
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.ext.asyncio import async_sessionmaker # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º async_sessionmaker (–¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–±—Ä–∏–∫–∏)
from sqlalchemy import select, update, delete, func, text
from sqlalchemy.exc import IntegrityError, NoResultFound
from sqlalchemy.dialects.postgresql import insert as pg_insert


from game_server.Logic.InfrastructureLogic.app_post.repository_groups.game_shards.interfaces_game_shards import IGameShardRepository
from game_server.database.models.models import GameShard 

from game_server.config.logging.logging_setup import app_logger as logger


class GameShardRepositoryImpl(IGameShardRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é GameShard.
    –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQLAlchemy ORM.
    """
    def __init__(self, db_session_factory: Type[AsyncSession]): # –¢–µ–ø–µ—Ä—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
        self._db_session_factory = db_session_factory

    async def _get_session(self) -> AsyncSession:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–∑ —Ñ–∞–±—Ä–∏–∫–∏."""
        return self._db_session_factory()
        
    async def create_shard(
        self,
        shard_name: str,
        discord_guild_id: int,
        max_players: int,
        is_admin_enabled: bool = False,
        is_system_active: bool = False
    ) -> GameShard:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —à–∞—Ä–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        async with await self._get_session() as session: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
            new_shard = GameShard(
                shard_name=shard_name,
                discord_guild_id=discord_guild_id,
                max_players=max_players,
                is_admin_enabled=is_admin_enabled,
                is_system_active=is_system_active
            )
            session.add(new_shard)
            try:
                await session.flush()
                await session.commit()
                logger.info(f"–®–∞—Ä–¥ '{new_shard.shard_name}' (Guild ID: {new_shard.discord_guild_id}) —Å–æ–∑–¥–∞–Ω.")
                return new_shard
            except IntegrityError as e:
                await session.rollback()
                logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞—Ä–¥–∞ '{shard_name}': {e.orig}", exc_info=True)
                raise ValueError(f"–®–∞—Ä–¥ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –∏–ª–∏ ID –≥–∏–ª—å–¥–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            except Exception as e:
                await session.rollback()
                logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —à–∞—Ä–¥–∞ '{shard_name}': {e}", exc_info=True)
                raise

    async def upsert_shard(self, shard_data: Dict[str, Any]) -> GameShard:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å —à–∞—Ä–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç discord_guild_id –∫–∞–∫ –∫–ª—é—á –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞.
        """
        discord_guild_id = shard_data.get("discord_guild_id")
        if not discord_guild_id:
            raise ValueError("discord_guild_id must be provided for upsert_shard operation.")

        async with await self._get_session() as session: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
            try:
                updatable_fields = [
                    "shard_name",
                    "max_players",
                    "is_system_active",
                    "is_admin_enabled",
                    "current_players"
                ]
                
                values_to_insert = {k: v for k, v in shard_data.items() if k not in ["id", "created_at", "updated_at"]}

                if "discord_guild_id" not in values_to_insert:
                    values_to_insert["discord_guild_id"] = discord_guild_id

                insert_stmt = pg_insert(GameShard).values(**values_to_insert)

                set_clause = {}
                for field in updatable_fields:
                    if field in insert_stmt.excluded:
                        set_clause[field] = getattr(insert_stmt.excluded, field)

                upsert_stmt = insert_stmt.on_conflict_do_update(
                    index_elements=[GameShard.discord_guild_id],
                    set_=set_clause
                ).returning(GameShard)

                result = await session.execute(upsert_stmt) # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: session.execute
                upserted_shard = result.scalar_one_or_none()
                
                if not upserted_shard:
                    await session.rollback()
                    raise RuntimeError(f"UPSERT GameShard –¥–ª—è Guild ID {discord_guild_id} –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")

                await session.commit()
                logger.info(f"GameShard '{upserted_shard.shard_name}' (ID: {upserted_shard.discord_guild_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω.")
                return upserted_shard

            except IntegrityError as e:
                await session.rollback() # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: session.rollback
                logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ UPSERT GameShard '{discord_guild_id}': {e.orig}", exc_info=True)
                raise ValueError(f"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ GameShard: {e.orig}")
            except Exception as e:
                await session.rollback() # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: session.rollback
                logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ UPSERT GameShard '{discord_guild_id}': {e}", exc_info=True)
                raise


    async def get_shard_by_guild_id(self, discord_guild_id: int) -> Optional[GameShard]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —à–∞—Ä–¥ –ø–æ –µ–≥–æ Discord Guild ID.
        """
        async with await self._get_session() as session: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
            stmt = select(GameShard).where(GameShard.discord_guild_id == discord_guild_id)
            result = await session.execute(stmt)
            return result.scalars().first()

    async def get_shard_by_name(self, shard_name: str) -> Optional[GameShard]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —à–∞—Ä–¥ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏.
        """
        async with await self._get_session() as session: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
            stmt = select(GameShard).where(GameShard.shard_name == shard_name)
            result = await session.execute(stmt)
            return result.scalars().first()

    async def get_all_shards(self) -> List[GameShard]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —à–∞—Ä–¥–æ–≤.
        """
        async with await self._get_session() as session: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
            stmt = select(GameShard)
            result = await session.execute(stmt)
            return list(result.scalars().all())

    async def get_active_available_shards(self, max_players_from_settings: int) -> List[GameShard]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞—Ä–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.
        max_players_from_settings - –æ–±—â–∏–π –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        """
        async with await self._get_session() as session: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
            stmt = select(GameShard).where(
                GameShard.is_admin_enabled == True,
                GameShard.is_system_active == True,
                GameShard.current_players < max_players_from_settings
            ).order_by(GameShard.current_players.asc())
            result = await session.execute(stmt)
            return list(result.scalars().all())

    async def update_shard_state(
        self,
        shard_id: int,
        updates: Dict[str, Any]
    ) -> Optional[GameShard]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞—Ä–¥–∞ –ø–æ –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID.
        –ü–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –≤–∫–ª—é—á–∞—Ç—å is_admin_enabled, is_system_active, current_players, invite_link.
        """
        async with await self._get_session() as session: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
            stmt = update(GameShard).where(GameShard.id == shard_id).values(**updates).returning(GameShard)
            result = await session.execute(stmt)
            await session.commit()
            logger.info(f"–®–∞—Ä–¥ (ID: {shard_id}) –æ–±–Ω–æ–≤–ª–µ–Ω.")
            return result.scalars().first()

    async def increment_current_players(self, discord_guild_id: int) -> Optional[GameShard]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫ current_players –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞.
        """
        async with await self._get_session() as session: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
            stmt = update(GameShard).where(GameShard.discord_guild_id == discord_guild_id).values(
                current_players=GameShard.current_players + 1
            ).returning(GameShard)
            result = await session.execute(stmt)
            await session.commit()
            logger.info(f"–°—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} —É–≤–µ–ª–∏—á–µ–Ω.")
            return result.scalars().first()

    async def decrement_current_players(self, discord_guild_id: int) -> Optional[GameShard]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫ current_players –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞.
        """
        async with await self._get_session() as session: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
            stmt = update(GameShard).where(GameShard.discord_guild_id == discord_guild_id).values(
                current_players=GameShard.current_players - 1
            ).returning(GameShard)
            result = await session.execute(stmt)
            await session.commit()
            logger.info(f"–°—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} —É–º–µ–Ω—å—à–µ–Ω.")
            return result.scalars().first()

    async def update_current_players_sync(self, discord_guild_id: int, actual_count: int) -> Optional[GameShard]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ current_players –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞ –¥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –µ–∂–µ—Å—É—Ç–æ—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
        """
        async with await self._get_session() as session: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
            stmt = update(GameShard).where(GameShard.discord_guild_id == discord_guild_id).values(
                current_players=actual_count
            ).returning(GameShard)
            result = await session.execute(stmt)
            await session.commit()
            logger.info(f"–°—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–æ {actual_count}.")
            return result.scalars().first()

    async def delete_shard(self, shard_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å —à–∞—Ä–¥–∞ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID.
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!
        """
        async with await self._get_session() as session: # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é
            stmt = delete(GameShard).where(GameShard.id == shard_id)
            result = await session.execute(stmt)
            if result.rowcount > 0:
                await session.commit()
                logger.info(f"–®–∞—Ä–¥ (ID: {shard_id}) —É–¥–∞–ª–µ–Ω.")
                return True
            else:
                await session.rollback()
                logger.warning(f"–®–∞—Ä–¥ (ID: {shard_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return False
