# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/game_shards/game_shard_repository_impl.py

import logging
from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy import select, update, delete, func
from sqlalchemy.dialects.postgresql import insert as pg_insert


from game_server.Logic.InfrastructureLogic.app_post.repository_groups.game_shards.interfaces_game_shards import IGameShardRepository
from game_server.database.models.models import GameShard

from game_server.config.logging.logging_setup import app_logger as logger


class GameShardRepositoryImpl(IGameShardRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é GameShard.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create_shard(
        self,
        shard_name: str,
        discord_guild_id: int,
        max_players: int,
        is_admin_enabled: bool = False,
        is_system_active: bool = False
    ) -> GameShard:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —à–∞—Ä–¥–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        new_shard = GameShard(
            shard_name=shard_name,
            discord_guild_id=discord_guild_id,
            max_players=max_players,
            is_admin_enabled=is_admin_enabled,
            is_system_active=is_system_active
        )
        self._session.add(new_shard)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–®–∞—Ä–¥ '{new_shard.shard_name}' (Guild ID: {new_shard.discord_guild_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é.")
        return new_shard

    async def upsert_shard(self, shard_data: Dict[str, Any]) -> GameShard:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å —à–∞—Ä–¥–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        discord_guild_id = shard_data.get("discord_guild_id")
        if not discord_guild_id:
            raise ValueError("discord_guild_id must be provided for upsert_shard operation.")

        updatable_fields = [
            "shard_name",
            "max_players",
            "is_system_active",
            "is_admin_enabled",
            "current_players"
        ]

        values_to_insert = {k: v for k, v in shard_data.items() if k not in ["id", "created_at", "updated_at"]}

        if "discord_guild_id" not in values_to_insert:
            values_to_insert["discord_guild_id"] = discord_guild_id

        insert_stmt = pg_insert(GameShard).values(**values_to_insert)

        set_clause = {}
        for field in updatable_fields:
            if field in insert_stmt.excluded:
                set_clause[field] = getattr(insert_stmt.excluded, field)

        upsert_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[GameShard.discord_guild_id],
            set_=set_clause
        ).returning(GameShard)

        result = await self._session.execute(upsert_stmt)
        upserted_shard = result.scalar_one_or_none()

        if not upserted_shard:
            # –ï—Å–ª–∏ upsert –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π, –Ω–æ rollback –±—É–¥–µ—Ç –≤—ã—à–µ
            raise RuntimeError(f"UPSERT GameShard –¥–ª—è Guild ID {discord_guild_id} –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")

        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"GameShard '{upserted_shard.shard_name}' (ID: {upserted_shard.discord_guild_id}) –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_shard


    async def get_shard_by_guild_id(self, discord_guild_id: int) -> Optional[GameShard]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —à–∞—Ä–¥ –ø–æ –µ–≥–æ Discord Guild ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = select(GameShard).where(GameShard.discord_guild_id == discord_guild_id)
        result = await self._session.execute(stmt)
        return result.scalars().first()

    async def get_shard_by_name(self, shard_name: str) -> Optional[GameShard]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —à–∞—Ä–¥ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = select(GameShard).where(GameShard.shard_name == shard_name)
        result = await self._session.execute(stmt)
        return result.scalars().first()

    async def get_all_shards(self) -> List[GameShard]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ —à–∞—Ä–¥–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = select(GameShard)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def get_all_active_shards(self) -> List[GameShard]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞—Ä–¥–æ–≤ (–±–µ–∑ —É—á–µ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = select(GameShard).where(
            GameShard.is_admin_enabled == True,
            GameShard.is_system_active == True,
        )
        result = await self._session.execute(stmt)
        shards = result.scalars().all()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ {len(shards)} –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞—Ä–¥–æ–≤ –≤ —Å–µ—Å—Å–∏–∏.")
        return list(shards)


    async def get_active_available_shards(self, max_players_from_settings: int) -> List[GameShard]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞—Ä–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤, –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = select(GameShard).where(
            GameShard.is_admin_enabled == True,
            GameShard.is_system_active == True,
            GameShard.current_players < max_players_from_settings
        ).order_by(GameShard.current_players.asc())
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update_shard_state(
        self,
        shard_id: int,
        updates: Dict[str, Any]
    ) -> Optional[GameShard]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–∞—Ä–¥–∞ –ø–æ –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = update(GameShard).where(GameShard.id == shard_id).values(**updates).returning(GameShard)
        result = await self._session.execute(stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–®–∞—Ä–¥ (ID: {shard_id}) –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return result.scalars().first()

    async def increment_current_players(self, discord_guild_id: int) -> Optional[GameShard]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫ current_players –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = update(GameShard).where(GameShard.discord_guild_id == discord_guild_id).values(
            current_players=GameShard.current_players + 1
        ).returning(GameShard)
        result = await self._session.execute(stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–°—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} —É–≤–µ–ª–∏—á–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return result.scalars().first()

    async def decrement_current_players(self, discord_guild_id: int) -> Optional[GameShard]:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫ current_players –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = update(GameShard).where(GameShard.discord_guild_id == discord_guild_id).values(
            current_players=GameShard.current_players - 1
        ).returning(GameShard)
        result = await self._session.execute(stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–°—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} —É–º–µ–Ω—å—à–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return result.scalars().first()

    async def update_current_players_sync(self, discord_guild_id: int, actual_count: int) -> Optional[GameShard]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ current_players –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞ –¥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = update(GameShard).where(GameShard.discord_guild_id == discord_guild_id).values(
            current_players=actual_count
        ).returning(GameShard)
        result = await self._session.execute(stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–°—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–æ {actual_count} –≤ —Å–µ—Å—Å–∏–∏.")
        return result.scalars().first()

    async def delete_shard(self, shard_id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å —à–∞—Ä–¥–∞ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = delete(GameShard).where(GameShard.id == shard_id)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–®–∞—Ä–¥ (ID: {shard_id}) –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–®–∞—Ä–¥ (ID: {shard_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False
