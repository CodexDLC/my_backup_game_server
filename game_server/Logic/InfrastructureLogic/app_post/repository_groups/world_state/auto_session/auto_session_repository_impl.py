# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/world_state/auto_session/auto_session_repository_impl.py

import logging
from datetime import datetime, timezone, timedelta
from typing import Dict, Any, Optional, List
from sqlalchemy import select, update, delete
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –º–æ–¥–µ–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —Ç–∞–∫
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.auto_session.interfaces_auto_session import IAutoSessionRepository
from game_server.database.models.models import AutoSession

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.config.logging.logging_setup import app_logger as logger


class AutoSessionRepositoryImpl(IAutoSessionRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å `AutoSession` —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π UTC.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create_session(
            self,
            character_id: int,
            active_category: str,
            interval_minutes: int = 6
    ) -> AutoSession:
        """–°–æ–∑–¥–∞—ë—Ç —Å–µ—Å—Å–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤ UTC –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        now_utc = datetime.now(timezone.utc)
        next_tick_at = now_utc + timedelta(minutes=interval_minutes)

        session_obj = AutoSession(
            character_id=character_id,
            active_category=active_category,
            next_tick_at=next_tick_at,
            last_tick_at=now_utc
        )

        self._session.add(session_obj)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} (–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {active_category}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é.")
        return session_obj

    async def get_session(self, character_id: int) -> Optional[AutoSession]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ UTC –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = select(AutoSession).where(AutoSession.character_id == character_id)
        result = await self._session.execute(stmt)
        session_obj = result.scalar_one_or_none()

        if not session_obj:
            logger.debug(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return None
        return session_obj

    async def update_session(
            self,
            character_id: int,
            update_data: Dict[str, Any]
    ) -> Optional[AutoSession]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–µ—Å—Å–∏—é —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –∫ UTC –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        if 'next_tick_at' in update_data and isinstance(update_data['next_tick_at'], datetime):
            update_data['next_tick_at'] = update_data['next_tick_at'].astimezone(timezone.utc)
        if 'last_tick_at' in update_data and isinstance(update_data['last_tick_at'], datetime):
            update_data['last_tick_at'] = update_data['last_tick_at'].astimezone(timezone.utc)

        stmt = (
            update(AutoSession)
            .where(AutoSession.character_id == character_id)
            .values(**update_data)
            .returning(AutoSession)
        )

        result = await self._session.execute(stmt)
        updated_session = result.scalars().first()

        if updated_session:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–°–µ—Å—Å–∏—è {character_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
            return updated_session
        else:
            logger.warning(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return None

    async def delete_session(self, character_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = (
            delete(AutoSession)
            .where(AutoSession.character_id == character_id)
        )

        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–°–µ—Å—Å–∏—è {character_id} –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–°–µ—Å—Å–∏—è {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def get_ready_sessions(self) -> List[AutoSession]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Å—Å–∏–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ (next_tick_at <= —Ç–µ–∫—É—â–µ–µ UTC) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        now_utc = datetime.now(timezone.utc)
        stmt = (
            select(AutoSession)
            .where(AutoSession.next_tick_at <= now_utc)
        )
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update_character_tick_time(
            self,
            character_id: int,
            interval_minutes: int = 6
    ) -> Optional[AutoSession]:
        """
        –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–∏–∫–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç last_tick_at –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è UTC –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç next_tick_at.
        """
        now_utc = datetime.now(timezone.utc)
        next_tick_at = now_utc + timedelta(minutes=interval_minutes)

        stmt = (
            update(AutoSession)
            .where(AutoSession.character_id == character_id)
            .values(
                last_tick_at=now_utc,
                next_tick_at=next_tick_at
            ).returning(AutoSession)
        )

        result = await self._session.execute(stmt)
        updated_session = result.scalars().first()

        if updated_session:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–í—Ä–µ–º—è —Ç–∏–∫–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {character_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–µ—Å—Å–∏–∏.")
            return updated_session
        else:
            logger.warning(f"–°–µ—Å—Å–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–∏–∫–∞.")
            return None
