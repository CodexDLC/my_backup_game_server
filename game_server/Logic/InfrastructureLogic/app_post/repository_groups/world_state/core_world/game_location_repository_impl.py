# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/world_state/core_world/game_location_repository_impl.py

import logging
import uuid
from typing import Optional, Dict, Any, List
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy import select, update, delete, func
from sqlalchemy.dialects.postgresql import insert as pg_insert

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.core_world.interfaces_core_world import IGameLocationRepository
from game_server.database.models.models import GameLocation

from game_server.config.logging.logging_setup import app_logger as logger


class GameLocationRepositoryImpl(IGameLocationRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é GameLocation.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create(self, data: Dict[str, Any]) -> GameLocation:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ª–æ–∫–∞—Ü–∏–∏ –º–∏—Ä–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        new_location = GameLocation(**data)
        self._session.add(new_location)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logger.info(f"–õ–æ–∫–∞—Ü–∏—è '{data.get('name', 'N/A')}' (type: {data.get('specific_category', 'N/A')}, skeleton: {data.get('skeleton_template_id', 'N/A')}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é.")
        return new_location

    async def get_by_id(self, location_id: uuid.UUID) -> Optional[GameLocation]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞—Ü–∏—é –ø–æ –µ—ë UUID ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = select(GameLocation).where(GameLocation.id == location_id)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_by_access_key(self, access_key: str) -> Optional[GameLocation]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞—Ü–∏—é –ø–æ –µ—ë access_key –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = select(GameLocation).where(GameLocation.access_key == access_key)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_all(self) -> List[GameLocation]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: select(GameLocation) –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        # –ï—Å–ª–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ —è–≤–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫, –µ—ë –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
        stmt = select(GameLocation)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def get_locations_by_skeleton_template(self, skeleton_template_id: str) -> List[GameLocation]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ª–æ–∫–∞—Ü–∏–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É —Å–∫–µ–ª–µ—Ç–∞ –º–∏—Ä–∞, –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = select(GameLocation).where(GameLocation.skeleton_template_id == skeleton_template_id)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def get_children_locations(self, parent_access_key: str) -> List[GameLocation]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ access_key –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º GameLocation.parent_id
        stmt = select(GameLocation).where(GameLocation.parent_id == parent_access_key)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update(self, access_key: str, updates: Dict[str, Any]) -> Optional[GameLocation]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –µ—ë access_key –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = update(GameLocation).where(GameLocation.access_key == access_key).values(**updates).returning(GameLocation)
        result = await self._session.execute(stmt)
        updated_location = result.scalars().first()
        if updated_location:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–õ–æ–∫–∞—Ü–∏—è '{access_key}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–õ–æ–∫–∞—Ü–∏—è —Å access_key '{access_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_location

    async def delete(self, access_key: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ª–æ–∫–∞—Ü–∏—é –ø–æ –µ—ë access_key –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = delete(GameLocation).where(GameLocation.access_key == access_key)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–õ–æ–∫–∞—Ü–∏—è '{access_key}' –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–õ–æ–∫–∞—Ü–∏—è '{access_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def upsert(self, data: Dict[str, Any]) -> GameLocation:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è UPSERT –ø–æ access_key –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        access_key = data.get("access_key")
        if not access_key:
            raise ValueError("Access key must be provided for upsert operation.")

        insert_stmt = pg_insert(GameLocation).values(**data)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[GameLocation.access_key], # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ access_key
            set_={
                "name": insert_stmt.excluded.name,
                "description": insert_stmt.excluded.description,
                "skeleton_template_id": insert_stmt.excluded.skeleton_template_id, # üî• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û
                "specific_category": insert_stmt.excluded.specific_category, # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï
                "parent_id": insert_stmt.excluded.parent_id, # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï
                "unified_display_type": insert_stmt.excluded.unified_display_type, # üî• –ù–û–í–û–ï
                "presentation": insert_stmt.excluded.presentation, # üî• –ù–û–í–û–ï
                "entry_point_location_id": insert_stmt.excluded.entry_point_location_id, # üî• –ù–û–í–û–ï
                "flavor_text_options": insert_stmt.excluded.flavor_text_options, # üî• –ù–û–í–û–ï
                "tags": insert_stmt.excluded.tags, # üî• –ù–û–í–û–ï
                # is_peaceful –∏ visibility —É–¥–∞–ª–µ–Ω—ã
            }
        ).returning(GameLocation)

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit

        upserted_location = result.scalar_one_or_none()
        if not upserted_location:
            raise RuntimeError("UPSERT –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")
        logger.info(f"–õ–æ–∫–∞—Ü–∏—è '{access_key}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_location

    async def upsert_many(self, data_list: List[Dict[str, Any]]) -> int:
        """
        –ú–∞—Å—Å–æ–≤–æ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–π –≤ PostgreSQL –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        if not data_list:
            logger.info("–°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è UPSERT –ø—É—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é.")
            return 0

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è UPSERT
        # –≠—Ç–∏ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç–∞–º –≤–∞—à–µ–π ORM-–º–æ–¥–µ–ª–∏ GameLocation
        updatable_fields = [
            "name",
            "description",
            "skeleton_template_id", # üî• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û
            "specific_category",    # üî• –ò–∑–º–µ–Ω–µ–Ω–æ —Å "location_type"
            "parent_id",            # üî• –ò–∑–º–µ–Ω–µ–Ω–æ —Å "parent_access_key"
            "unified_display_type", # üî• –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "presentation",         # üî• –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "entry_point_location_id", # üî• –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "flavor_text_options",  # üî• –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "tags",                 # üî• –ù–æ–≤–æ–µ –ø–æ–ª–µ
            "created_at",           # –î–æ–±–∞–≤—å—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å
            "updated_at"            # –î–æ–±–∞–≤—å—Ç–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª—è—Ç—å
            # "is_peaceful" –∏ "visibility" —É–¥–∞–ª–µ–Ω—ã
        ]
        set_clause = {field: getattr(pg_insert(GameLocation).excluded, field) for field in updatable_fields}

        insert_stmt = pg_insert(GameLocation).values(data_list)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[GameLocation.access_key], # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ access_key
            set_=set_clause
        )

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        upserted_count = result.rowcount
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {upserted_count} –ª–æ–∫–∞—Ü–∏–π –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_count
