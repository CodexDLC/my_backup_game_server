# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/world_state/state_entity_repository_impl.py

import logging
from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy import select, update, delete, func
from sqlalchemy.dialects.postgresql import insert as pg_insert

from game_server.database.models.models import StateEntity
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.world_state.core_world.interfaces_core_world import IStateEntityRepository
from game_server.config.logging.logging_setup import app_logger as logger


class StateEntityRepositoryImpl(IStateEntityRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é StateEntity.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É IStateEntityRepository, –∏—Å–ø–æ–ª—å–∑—É—è 'access_code' –∫–∞–∫ PK.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create(self, entity_data: Dict[str, Any]) -> StateEntity:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—É—â–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É 'create'.
        """
        new_entity = StateEntity(**entity_data)
        self._session.add(new_entity)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–°—É—â–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ (access_code: {new_entity.access_code}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é.")
        return new_entity

    async def get_by_id(self, entity_id: int) -> Optional[StateEntity]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ –ø–æ –µ—ë ID.
        (–û–°–¢–û–†–û–ñ–ù–û: ORM-–º–æ–¥–µ–ª—å StateEntity –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'access_code' (str) –∫–∞–∫ PK, –∞ –Ω–µ 'id' (int).
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ, –Ω–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—É. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None, —Ç.–∫. –Ω–µ—Ç int PK.)
        """
        logger.warning(f"–í—ã–∑–≤–∞–Ω get_by_id({entity_id}) –¥–ª—è StateEntity, –Ω–æ ORM-–º–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 'access_code' (str) –∫–∞–∫ PK. "
                        f"–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è StateEntity. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_by_access_code –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ.")
        raise NotImplementedError(f"–ü–æ–∏—Å–∫ StateEntity –ø–æ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–º—É ID '{entity_id}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ PK - 'access_code' (—Å—Ç—Ä–æ–∫–∞).")

    async def get_by_access_code(self, access_code: str) -> Optional[StateEntity]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ –ø–æ –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É access_code (PK) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É 'get_by_access_code'.
        """
        stmt = select(StateEntity).where(StateEntity.access_code == access_code)
        result = await self._session.execute(stmt)
        return result.scalars().first()

    async def get_all(self) -> List[StateEntity]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É 'get_all'.
        """
        stmt = select(StateEntity)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update(self, access_code: str, updates: Dict[str, Any]) -> Optional[StateEntity]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ –ø–æ –µ—ë access_code –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É 'update'.
        """
        stmt = update(StateEntity).where(StateEntity.access_code == access_code).values(**updates).returning(StateEntity)
        result = await self._session.execute(stmt)
        updated_entity = result.scalars().first()
        if updated_entity:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–°—É—â–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ (access_code: {access_code}) –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–°—É—â–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ (access_code: {access_code}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_entity

    async def delete(self, access_code: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ –ø–æ –µ—ë access_code –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É 'delete'.
        """
        stmt = delete(StateEntity).where(StateEntity.access_code == access_code)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–°—É—â–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ (access_code: {access_code}) –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–°—É—â–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ (access_code: {access_code}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def upsert(self, entity_data: Dict[str, Any]) -> Optional[StateEntity]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∏—Ä–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç access_code –∫–∞–∫ PK –¥–ª—è ON CONFLICT.
        –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–º—É –º–µ—Ç–æ–¥—É 'upsert'.
        """
        access_code = entity_data.get("access_code")
        if not access_code:
            raise ValueError("Access code must be provided for upsert operation.")

        updatable_fields = [
            "code_name",
            "ui_type",
            "description",
            "is_active",
        ]

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–∏–ª—å—Ç—Ä—É–µ–º entity_data, —á—Ç–æ–±—ã –ò–°–ö–õ–Æ–ß–ò–¢–¨ 'id', 'created_at' –ò 'updated_at' –∏–∑ values().
        # created_at –∏ updated_at –∏–º–µ—é—Ç default/onupdate –≤ –º–æ–¥–µ–ª–∏, –∞ id - —ç—Ç–æ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–π PK.
        values_to_insert = {k: v for k, v in entity_data.items() if k not in ["created_at", "updated_at", "id"]}

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ 'access_code' –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤ values, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –µ–≥–æ –Ω–µ—Ç
        if "access_code" not in values_to_insert:
            values_to_insert["access_code"] = access_code

        insert_stmt = pg_insert(StateEntity).values(**values_to_insert)

        set_clause = {}
        for field in updatable_fields:
            if field in insert_stmt.excluded:
                set_clause[field] = getattr(insert_stmt.excluded, field)

        upsert_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[StateEntity.access_code], # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ access_code
            set_=set_clause # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π set_clause
        ).returning(StateEntity)

        result = await self._session.execute(upsert_stmt)
        upserted_entity = result.scalar_one_or_none()
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        if not upserted_entity:
            raise RuntimeError("UPSERT StateEntity –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")
        logger.info(f"StateEntity '{access_code}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_entity
