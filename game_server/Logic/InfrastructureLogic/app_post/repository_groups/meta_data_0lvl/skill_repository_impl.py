# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/meta_data_0lvl/skill_repository_impl.py

import logging
from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy.future import select as fselect
from sqlalchemy import delete, update
from sqlalchemy.dialects.postgresql import insert as pg_insert

from game_server.database.models.models import Skills

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_0lvl.interfaces_meta_data_0lvl import ISkillRepository

from game_server.config.logging.logging_setup import app_logger as logger


class SkillRepositoryImpl(ISkillRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ Skill –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π).
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create(self, data: Dict[str, Any]) -> Skills:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –Ω–∞–≤—ã–∫ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        new_skill = Skills(**data)
        self._session.add(new_skill)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–ù–∞–≤—ã–∫ '{new_skill.name}' (Key: {new_skill.skill_key}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é.")
        return new_skill

    async def get_by_id(self, id: str) -> Optional[Skills]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø–æ –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∫–ª—é—á—É (–∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è PK) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        return await self.get_skill_by_key(id) # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –º–µ—Ç–æ–¥

    async def get_by_key(self, skill_key: str) -> Optional[Skills]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø–æ –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∫–ª—é—á—É –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Skills).where(Skills.skill_key == skill_key)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_skill_by_id(self, skill_id: int) -> Optional[Skills]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø–æ –µ–≥–æ ID (skill_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è PK) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Skills).where(Skills.skill_id == skill_id)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_all(self) -> List[Skills]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        return await self.get_all_skills() # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –º–µ—Ç–æ–¥

    async def get_all_skills(self) -> List[Skills]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Skills)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update(self, id: str, updates: Dict[str, Any]) -> Optional[Skills]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –Ω–∞–≤—ã–∫ –ø–æ –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∫–ª—é—á—É (skill_key) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = update(Skills).where(Skills.skill_key == id).values(**updates).returning(Skills)
        result = await self._session.execute(stmt)
        updated_skill = result.scalars().first()
        if updated_skill:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–ù–∞–≤—ã–∫ '{id}' –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–ù–∞–≤—ã–∫ —Å –∫–ª—é—á–æ–º '{id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_skill

    async def delete(self, id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –Ω–∞–≤—ã–∫ –ø–æ –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∫–ª—é—á—É (skill_key) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        return await self.delete_skill(id) # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –º–µ—Ç–æ–¥

    async def delete_skill(self, skill_key: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –Ω–∞–≤—ã–∫ –ø–æ –µ–≥–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É –∫–ª—é—á—É –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = delete(Skills).where(Skills.skill_key == skill_key)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–ù–∞–≤—ã–∫ '{skill_key}' –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–ù–∞–≤—ã–∫ '{skill_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def upsert(self, data: Dict[str, Any]) -> Skills:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å Skill, –∏—Å–ø–æ–ª—å–∑—É—è upsert (INSERT ON CONFLICT DO UPDATE) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        return await self.upsert_skill(data) # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –º–µ—Ç–æ–¥

    async def upsert_skill(self, skill_data: Dict[str, Any]) -> Skills:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å Skill, –∏—Å–ø–æ–ª—å–∑—É—è upsert (INSERT ON CONFLICT DO UPDATE) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        skill_key = skill_data.get("skill_key")
        if not skill_key:
            raise ValueError("Skill key must be provided for upsert operation.")

        insert_stmt = pg_insert(Skills).values(**skill_data)

        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[Skills.skill_key],
            set_={
                "name": insert_stmt.excluded.name,
                "description": insert_stmt.excluded.description,
                "stat_influence": insert_stmt.excluded.stat_influence,
                "is_magic": insert_stmt.excluded.is_magic,
                "rarity_weight": insert_stmt.excluded.rarity_weight,
                "category_tag": insert_stmt.excluded.category_tag,
                "role_preference_tag": insert_stmt.excluded.role_preference_tag,
                "limit_group_tag": insert_stmt.excluded.limit_group_tag,
                "max_level": insert_stmt.excluded.max_level,
            }
        ).returning(Skills)

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit

        upserted_skill = result.scalar_one_or_none()
        if not upserted_skill:
            raise RuntimeError("UPSERT –Ω–∞–≤—ã–∫–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")
        logger.info(f"–ù–∞–≤—ã–∫ '{upserted_skill.name}' (Key: {upserted_skill.skill_key}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_skill

    async def upsert_many(self, data_list: List[Dict[str, Any]]) -> int:
        """–ú–∞—Å—Å–æ–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞–≤—ã–∫–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        if not data_list:
            logger.info("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Skills upsert_many. –ù–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ.")
            return 0

        updatable_fields = [
            "name", "description", "stat_influence", "is_magic",
            "rarity_weight", "category_tag", "role_preference_tag",
            "limit_group_tag", "max_level",
        ]
        set_clause = {field: getattr(pg_insert(Skills).excluded, field) for field in updatable_fields}

        insert_stmt = pg_insert(Skills).values(data_list)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[Skills.skill_key],
            set_=set_clause
        )

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        upserted_count = result.rowcount
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {upserted_count} –Ω–∞–≤—ã–∫–æ–≤ –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_count
