# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/meta_data_0lvl/ability_repository_impl.py

import logging
from typing import List, Optional, Dict, Any, Union
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy.future import select as fselect
from sqlalchemy import update, delete
from sqlalchemy.dialects.postgresql import insert as pg_insert
from sqlalchemy.orm import selectinload

from game_server.database.models.models import Ability

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_0lvl.interfaces_meta_data_0lvl import IAbilityRepository

from game_server.config.logging.logging_setup import app_logger as logger


class AbilityRepositoryImpl(IAbilityRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ Ability –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π).
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create(self, data: Dict[str, Any]) -> Ability:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        new_ability = Ability(**data)
        self._session.add(new_ability)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å '{new_ability.name}' (key: {new_ability.ability_key}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é.")
        return new_ability

    async def get_by_id(self, id: int) -> Optional[Ability]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –µ—ë ID (ability_id) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Ability).where(Ability.ability_id == id)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_by_key(self, key: str) -> Optional[Ability]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É (ability_key) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Ability).where(Ability.ability_key == key)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_all(self) -> List[Ability]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Ability)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update(self, id: int, updates: Dict[str, Any]) -> Optional[Ability]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –µ—ë ID (ability_id) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = update(Ability).where(Ability.ability_id == id).values(**updates).returning(Ability)
        result = await self._session.execute(stmt)
        updated_ability = result.scalars().first()
        if updated_ability:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (ID: {id}) –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_ability

    async def delete(self, id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –µ—ë ID (ability_id) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = delete(Ability).where(Ability.ability_id == id)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (ID: {id}) –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def upsert(self, data: Dict[str, Any]) -> Ability:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è UPSERT (–∫–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ ability_key) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        ability_key = data.get("ability_key")
        if not ability_key:
            raise ValueError("Ability key must be provided for upsert operation.")

        insert_stmt = pg_insert(Ability).values(**data)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[Ability.ability_key],
            set_={
                "name": insert_stmt.excluded.name,
                "description": insert_stmt.excluded.description,
                "ability_type": insert_stmt.excluded.ability_type,
                "required_skill_key": insert_stmt.excluded.required_skill_key,
                "required_skill_level": insert_stmt.excluded.required_skill_level,
                "required_stats": insert_stmt.excluded.required_stats,
                "required_items": insert_stmt.excluded.required_items,
                "cost_type": insert_stmt.excluded.cost_type,
                "cost_amount": insert_stmt.excluded.cost_amount,
                "cooldown_seconds": insert_stmt.excluded.cooldown_seconds,
                "cast_time_ms": insert_stmt.excluded.cast_time_ms,
                "effect_data": insert_stmt.excluded.effect_data,
                "animation_key": insert_stmt.excluded.animation_key,
                "sfx_key": insert_stmt.excluded.sfx_key,
                "vfx_key": insert_stmt.excluded.vfx_key,
            }
        ).returning(Ability)

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit

        upserted_ability = result.scalar_one_or_none()
        if not upserted_ability:
            raise RuntimeError("UPSERT —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")
        logger.info(f"–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å '{ability_key}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_ability

    async def upsert_many(self, data_list: List[Dict[str, Any]]) -> int:
        """–ú–∞—Å—Å–æ–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        if not data_list:
            logger.info("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Ability upsert_many. –ù–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ.")
            return 0

        updatable_fields = [
            "name", "description", "ability_type", "required_skill_key",
            "required_skill_level", "required_stats", "required_items",
            "cost_type", "cost_amount", "cooldown_seconds", "cast_time_ms",
            "effect_data", "animation_key", "sfx_key", "vfx_key",
        ]
        set_clause = {field: getattr(pg_insert(Ability).excluded, field) for field in updatable_fields}

        insert_stmt = pg_insert(Ability).values(data_list)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[Ability.ability_key],
            set_=set_clause
        )

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        upserted_count = result.rowcount
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {upserted_count} —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_count

    async def get_ability_with_skill_requirement(self, ability_key: str) -> Optional[Ability]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ –µ—ë –∫–ª—é—á—É —Å –∂–∞–¥–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Ability).where(Ability.ability_key == ability_key).options(
            selectinload(Ability.skill_requirement)
        )
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()
