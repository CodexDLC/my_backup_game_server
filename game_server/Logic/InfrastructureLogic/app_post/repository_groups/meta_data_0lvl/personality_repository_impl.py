# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/meta_data_0lvl/personality_repository_impl.py

import logging
from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy.future import select as fselect
from sqlalchemy import delete, update
from sqlalchemy.dialects.postgresql import insert as pg_insert

from game_server.database.models.models import Personality

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_0lvl.interfaces_meta_data_0lvl import IPersonalityRepository

from game_server.config.logging.logging_setup import app_logger as logger


class PersonalityRepositoryImpl(IPersonalityRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ Personality –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π).
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create(self, data: Dict[str, Any]) -> Personality:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        new_personality = Personality(**data)
        self._session.add(new_personality)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–õ–∏—á–Ω–æ—Å—Ç—å '{new_personality.name}' (ID: {new_personality.personality_id}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é.")
        return new_personality

    async def get_by_id(self, id: int) -> Optional[Personality]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ –µ—ë ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Personality).where(Personality.personality_id == id)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_by_name(self, name: str) -> Optional[Personality]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ –µ—ë –Ω–∞–∑–≤–∞–Ω–∏—é –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Personality).where(Personality.name == name)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_all(self) -> List[Personality]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Personality)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update(self, id: int, updates: Dict[str, Any]) -> Optional[Personality]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ –µ—ë ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = update(Personality).where(Personality.personality_id == id).values(**updates).returning(Personality)
        result = await self._session.execute(stmt)
        updated_personality = result.scalars().first()
        if updated_personality:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–õ–∏—á–Ω–æ—Å—Ç—å (ID: {id}) –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–õ–∏—á–Ω–æ—Å—Ç—å —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_personality

    async def delete(self, id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ –µ—ë ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = delete(Personality).where(Personality.personality_id == id)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–õ–∏—á–Ω–æ—Å—Ç—å (ID: {id}) –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–õ–∏—á–Ω–æ—Å—Ç—å —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def upsert(self, data: Dict[str, Any]) -> Personality:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å Personality, –∏—Å–ø–æ–ª—å–∑—É—è upsert (INSERT ON CONFLICT DO UPDATE) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –ö–æ–Ω—Ñ–ª–∏–∫—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ 'name' (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ).
        """
        name = data.get("name") # –ò—Å–ø–æ–ª—å–∑—É–µ–º name, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
        if not name:
            raise ValueError("Name must be provided for upsert operation.")

        insert_stmt = pg_insert(Personality).values(**data)

        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[Personality.name], # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏ (name)
            set_={
                "description": insert_stmt.excluded.description,
                "personality_group": insert_stmt.excluded.personality_group,
                "behavior_tags": insert_stmt.excluded.behavior_tags,
                "dialogue_modifiers": insert_stmt.excluded.dialogue_modifiers,
                "combat_ai_directives": insert_stmt.excluded.combat_ai_directives,
                "quest_interaction_preferences": insert_stmt.excluded.quest_interaction_preferences,
                "trait_associations": insert_stmt.excluded.trait_associations,
                "applicable_game_roles": insert_stmt.excluded.applicable_game_roles,
                "rarity_weight": insert_stmt.excluded.rarity_weight,
                "ai_priority_level": insert_stmt.excluded.ai_priority_level,
            }
        ).returning(Personality)

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit

        upserted_personality = result.scalar_one_or_none()
        if not upserted_personality:
            raise RuntimeError("UPSERT –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")
        logger.info(f"–õ–∏—á–Ω–æ—Å—Ç—å '{upserted_personality.name}' (Key: {name}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_personality

    async def upsert_many(self, data_list: List[Dict[str, Any]]) -> int:
        """–ú–∞—Å—Å–æ–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏—á–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        if not data_list:
            logger.info("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Personality upsert_many. –ù–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ.")
            return 0

        updatable_fields = [
            "name", "description", "personality_group", "behavior_tags",
            "dialogue_modifiers", "combat_ai_directives", "quest_interaction_preferences",
            "trait_associations", "applicable_game_roles", "rarity_weight",
            "ai_priority_level",
        ]
        set_clause = {field: getattr(pg_insert(Personality).excluded, field) for field in updatable_fields}

        insert_stmt = pg_insert(Personality).values(data_list)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[Personality.name], # –ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏
            set_=set_clause
        )

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        upserted_count = result.rowcount
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {upserted_count} –ª–∏—á–Ω–æ—Å—Ç–µ–π –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_count
