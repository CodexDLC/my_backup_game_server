# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/meta_data_0lvl/static_item_template_repository_impl.py

import logging
from typing import List, Dict, Any, Optional
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy.future import select as fselect
from sqlalchemy import update, delete
from sqlalchemy.dialects.postgresql import insert as pg_insert

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_0lvl.interfaces_meta_data_0lvl import IStaticItemTemplateRepository
from game_server.database.models.models import StaticItemTemplate

from game_server.config.logging.logging_setup import app_logger as logger


class StaticItemTemplateRepositoryImpl(IStaticItemTemplateRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ StaticItemTemplate –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π).
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create(self, data: Dict[str, Any]) -> StaticItemTemplate:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        new_template = StaticItemTemplate(**data)
        self._session.add(new_template)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–®–∞–±–ª–æ–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ '{new_template.item_code}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é.")
        return new_template

    async def get_by_id(self, id: int) -> Optional[StaticItemTemplate]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –µ–≥–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(StaticItemTemplate).where(StaticItemTemplate.template_id == id)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_by_item_code(self, item_code: str) -> Optional[StaticItemTemplate]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –µ–≥–æ item_code –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(StaticItemTemplate).where(StaticItemTemplate.item_code == item_code)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_all(self) -> List[StaticItemTemplate]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(StaticItemTemplate)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update(self, id: int, updates: Dict[str, Any]) -> Optional[StaticItemTemplate]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω –ø–æ –µ–≥–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = update(StaticItemTemplate).where(StaticItemTemplate.template_id == id).values(**updates).returning(StaticItemTemplate)
        result = await self._session.execute(stmt)
        updated_template = result.scalars().first()
        if updated_template:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–®–∞–±–ª–æ–Ω (ID: {id}) –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–®–∞–±–ª–æ–Ω —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_template

    async def delete(self, id: int) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –ø–æ –µ–≥–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = delete(StaticItemTemplate).where(StaticItemTemplate.template_id == id)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–®–∞–±–ª–æ–Ω (ID: {id}) –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–®–∞–±–ª–æ–Ω —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def delete_by_item_code_batch(self, item_codes: List[str]) -> int:
        """
        –ú–∞—Å—Å–æ–≤–æ —É–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –ø–æ —Å–ø–∏—Å–∫—É item_code –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        if not item_codes:
            return 0
        stmt = delete(StaticItemTemplate).where(StaticItemTemplate.item_code.in_(item_codes))
        result = await self._session.execute(stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {result.rowcount} —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ item_code –≤ —Å–µ—Å—Å–∏–∏.")
        return result.rowcount

    async def upsert(self, data: Dict[str, Any]) -> StaticItemTemplate:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏. –ï—Å–ª–∏ —à–∞–±–ª–æ–Ω —Å –¥–∞–Ω–Ω—ã–º item_code —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
        –æ–Ω –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è; –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.
        """
        item_code = data.get("item_code")
        if not item_code:
            raise ValueError("Item code must be provided for upsert operation.")

        insert_stmt = pg_insert(StaticItemTemplate).values(**data)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[StaticItemTemplate.item_code],
            set_={
                "display_name": insert_stmt.excluded.display_name,
                "category": insert_stmt.excluded.category,
                "sub_category": insert_stmt.excluded.sub_category,
                "inventory_size": insert_stmt.excluded.inventory_size,
                "stackable": insert_stmt.excluded.stackable,
                "max_stack_size": insert_stmt.excluded.max_stack_size,
                "base_value": insert_stmt.excluded.base_value,
                "icon_url": insert_stmt.excluded.icon_url,
                "description": insert_stmt.excluded.description,
                "properties_json": insert_stmt.excluded.properties_json,
            }
        ).returning(StaticItemTemplate)

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit

        upserted_template = result.scalar_one_or_none()
        if not upserted_template:
            raise RuntimeError("UPSERT —à–∞–±–ª–æ–Ω–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")
        logger.info(f"–®–∞–±–ª–æ–Ω '{item_code}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_template

    async def upsert_many(self, data_list: List[Dict[str, Any]]) -> int:
        """–ú–∞—Å—Å–æ–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–±–ª–æ–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        if not data_list:
            logger.info("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è StaticItemTemplate upsert_many. –ù–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ.")
            return 0

        updatable_fields = [
            "display_name", "category", "sub_category", "inventory_size",
            "stackable", "max_stack_size", "base_value", "icon_url",
            "description", "properties_json",
        ]
        set_clause = {field: getattr(pg_insert(StaticItemTemplate).excluded, field) for field in updatable_fields}

        insert_stmt = pg_insert(StaticItemTemplate).values(data_list)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[StaticItemTemplate.item_code],
            set_=set_clause
        )

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        upserted_count = result.rowcount
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {upserted_count} —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_count
