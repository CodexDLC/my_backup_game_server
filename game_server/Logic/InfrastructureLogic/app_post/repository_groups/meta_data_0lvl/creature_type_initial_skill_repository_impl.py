# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/meta_data_0lvl/creature_type_initial_skill_repository_impl.py

import logging
from typing import List, Optional, Dict, Any, Tuple
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy.future import select as fselect
from sqlalchemy import delete, update
from sqlalchemy.dialects.postgresql import insert as pg_insert

from game_server.database.models.models import CreatureTypeInitialSkill

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_0lvl.interfaces_meta_data_0lvl import ICreatureTypeInitialSkillRepository

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.config.logging.logging_setup import app_logger as logger


class CreatureTypeInitialSkillRepositoryImpl(ICreatureTypeInitialSkillRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ CreatureTypeInitialSkill –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π).
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create(self, data: Dict[str, Any]) -> CreatureTypeInitialSkill:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å CreatureTypeInitialSkill –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        new_skill = CreatureTypeInitialSkill(**data)
        self._session.add(new_skill)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π CreatureTypeInitialSkill: {new_skill.creature_type_id}, {new_skill.skill_key} –≤ —Å–µ—Å—Å–∏–∏.")
        return new_skill

    async def get_by_id(self, id: Tuple[int, str]) -> Optional[CreatureTypeInitialSkill]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å CreatureTypeInitialSkill –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É PK (creature_type_id, skill_key) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        creature_type_id, skill_key = id
        stmt = fselect(CreatureTypeInitialSkill).where(
            CreatureTypeInitialSkill.creature_type_id == creature_type_id,
            CreatureTypeInitialSkill.skill_key == skill_key
        )
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_all(self) -> List[CreatureTypeInitialSkill]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ CreatureTypeInitialSkill –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(CreatureTypeInitialSkill)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update(self, id: Tuple[int, str], updates: Dict[str, Any]) -> Optional[CreatureTypeInitialSkill]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å CreatureTypeInitialSkill –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É PK –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        creature_type_id, skill_key = id
        stmt = update(CreatureTypeInitialSkill).where(
            CreatureTypeInitialSkill.creature_type_id == creature_type_id,
            CreatureTypeInitialSkill.skill_key == skill_key
        ).values(**updates).returning(CreatureTypeInitialSkill)
        result = await self._session.execute(stmt)
        updated_skill = result.scalars().first()
        if updated_skill:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω CreatureTypeInitialSkill —Å ID {id} –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"CreatureTypeInitialSkill —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_skill

    async def delete(self, id: Tuple[int, str]) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å CreatureTypeInitialSkill –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É PK –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –≠—Ç–æ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è.
        """
        creature_type_id, skill_key = id
        stmt = delete(CreatureTypeInitialSkill).where(
            CreatureTypeInitialSkill.creature_type_id == creature_type_id,
            CreatureTypeInitialSkill.skill_key == skill_key
        )
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"CreatureTypeInitialSkill —Å ID {id} –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"CreatureTypeInitialSkill —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def upsert(self, data: Dict[str, Any]) -> CreatureTypeInitialSkill:
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å CreatureTypeInitialSkill, –∏—Å–ø–æ–ª—å–∑—É—è upsert (INSERT ON CONFLICT DO UPDATE) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –º–µ—Ç–æ–¥–∞.
        """
        insert_stmt = pg_insert(CreatureTypeInitialSkill).values(**data)

        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[CreatureTypeInitialSkill.creature_type_id, CreatureTypeInitialSkill.skill_key],
            set_={
                "initial_level": insert_stmt.excluded.initial_level,
                **{k: insert_stmt.excluded[k] for k in data if k not in ['creature_type_id', 'skill_key']}
            }
        ).returning(CreatureTypeInitialSkill)

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit

        upserted_skill = result.scalar_one_or_none()
        if not upserted_skill:
            raise RuntimeError("UPSERT CreatureTypeInitialSkill –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")
        logger.info(f"CreatureTypeInitialSkill —Å ID ({data.get('creature_type_id', 'N/A')}, {data.get('skill_key', 'N/A')}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_skill

    async def upsert_many(self, data_list: List[Dict[str, Any]]) -> int:
        """
        –ú–∞—Å—Å–æ–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ CreatureTypeInitialSkill –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫.
        """
        if not data_list:
            return 0

        insert_stmt = pg_insert(CreatureTypeInitialSkill).values(data_list)

        updatable_fields = {
            k: insert_stmt.excluded[k]
            for k in CreatureTypeInitialSkill.__table__.columns.keys()
            if k not in ['creature_type_id', 'skill_key']
        }

        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[CreatureTypeInitialSkill.creature_type_id, CreatureTypeInitialSkill.skill_key],
            set_=updatable_fields
        )

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        affected_rows = result.rowcount
        logger.info(f"–ú–∞—Å—Å–æ–≤—ã–π upsert CreatureTypeInitialSkill –∑–∞—Ç—Ä–æ–Ω—É–ª {affected_rows} —Å—Ç—Ä–æ–∫ –≤ —Å–µ—Å—Å–∏–∏.")
        return affected_rows

    async def get_initial_skill(self, creature_type_id: int, skill_key: str) -> Optional[CreatureTypeInitialSkill]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª—å–Ω–æ–º –Ω–∞–≤—ã–∫–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–µ—Å—Ç–≤–∞ –∏ –Ω–∞–≤—ã–∫–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥—É–±–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª get_by_id, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
        """
        return await self.get_by_id((creature_type_id, skill_key))

    async def delete_initial_skill(self, creature_type_id: int, skill_key: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –Ω–∞—á–∞–ª—å–Ω–æ–º –Ω–∞–≤—ã–∫–µ –ø–æ creature_type_id –∏ skill_key –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –≠—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —É–¥–æ–±–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ –¥–≤—É–º –∫–ª—é—á–∞–º.
        """
        return await self.delete((creature_type_id, skill_key))

    async def get_initial_skills_for_creature_type(self, creature_type_id: int) -> List[CreatureTypeInitialSkill]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å—É—â–µ—Å—Ç–≤–∞.
        """
        stmt = fselect(CreatureTypeInitialSkill).where(
            CreatureTypeInitialSkill.creature_type_id == creature_type_id
        )
        result = await self._session.execute(stmt)
        return list(result.scalars().all())