# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/meta_data_0lvl/suffix_repository_impl.py

import logging
from typing import List, Dict, Any, Optional
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy.future import select as fselect
from sqlalchemy import update, delete
from sqlalchemy.dialects.postgresql import insert as pg_insert

from game_server.database.models.models import Suffix

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_0lvl.interfaces_meta_data_0lvl import ISuffixRepository

from game_server.config.logging.logging_setup import app_logger as logger


class SuffixRepositoryImpl(ISuffixRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ Suffix –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π).
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create(self, data: Dict[str, Any]) -> Suffix:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        new_suffix = Suffix(**data)
        self._session.add(new_suffix)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–°—É—Ñ—Ñ–∏–∫—Å '{new_suffix.suffix_code}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é.")
        return new_suffix

    async def get_by_id(self, id: str) -> Optional[Suffix]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å –ø–æ –µ–≥–æ –∫–æ–¥—É (suffix_code) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Suffix).where(Suffix.suffix_code == id)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_all(self) -> List[Suffix]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Suffix)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def get_suffixes_by_group(self, group: str) -> List[Suffix]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≥—Ä—É–ø–ø–µ, –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(Suffix).where(Suffix.group == group)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update(self, id: str, updates: Dict[str, Any]) -> Optional[Suffix]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—É—Ñ—Ñ–∏–∫—Å –ø–æ –µ–≥–æ –∫–æ–¥—É (suffix_code) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = update(Suffix).where(Suffix.suffix_code == id).values(**updates).returning(Suffix)
        result = await self._session.execute(stmt)
        updated_suffix = result.scalars().first()
        if updated_suffix:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–°—É—Ñ—Ñ–∏–∫—Å '{id}' –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–°—É—Ñ—Ñ–∏–∫—Å —Å –∫–æ–¥–æ–º '{id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_suffix

    async def delete(self, id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å –ø–æ –µ–≥–æ –∫–æ–¥—É (suffix_code) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = delete(Suffix).where(Suffix.suffix_code == id)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–°—É—Ñ—Ñ–∏–∫—Å '{id}' –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–°—É—Ñ—Ñ–∏–∫—Å —Å –∫–æ–¥–æ–º '{id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def upsert(self, data: Dict[str, Any]) -> Suffix:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å, –∏—Å–ø–æ–ª—å–∑—É—è UPSERT –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        suffix_code = data.get("suffix_code")
        if not suffix_code:
            raise ValueError("Suffix code must be provided for upsert operation.")

        insert_stmt = pg_insert(Suffix).values(**data)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[Suffix.suffix_code],
            set_={
                "fragment": insert_stmt.excluded.fragment,
                "group": insert_stmt.excluded.group,
                "modifiers": insert_stmt.excluded.modifiers,
            }
        ).returning(Suffix)

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit

        upserted_suffix = result.scalar_one_or_none()
        if not upserted_suffix:
            raise RuntimeError("UPSERT —Å—É—Ñ—Ñ–∏–∫—Å–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")
        logger.info(f"–°—É—Ñ—Ñ–∏–∫—Å '{suffix_code}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_suffix

    async def upsert_many(self, data_list: List[Dict[str, Any]]) -> int:
        """–ú–∞—Å—Å–æ–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å—ã –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        if not data_list:
            logger.info("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Suffix upsert_many. –ù–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ.")
            return 0

        updatable_fields = [
            "fragment", "group", "modifiers"
        ]
        set_clause = {field: getattr(pg_insert(Suffix).excluded, field) for field in updatable_fields}

        insert_stmt = pg_insert(Suffix).values(data_list)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[Suffix.suffix_code],
            set_=set_clause
        )

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        upserted_count = result.rowcount
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {upserted_count} —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_count
