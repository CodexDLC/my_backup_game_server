# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/meta_data_0lvl/creature_type_repository_impl.py

import logging
from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy.future import select as fselect
from sqlalchemy import delete, update
from sqlalchemy.dialects.postgresql import insert as pg_insert
from sqlalchemy.orm import selectinload

from game_server.database.models.models import CreatureType, CreatureTypeInitialSkill

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.meta_data_0lvl.interfaces_meta_data_0lvl import ICreatureTypeRepository

from game_server.config.logging.logging_setup import app_logger as logger


class CreatureTypeRepositoryImpl(ICreatureTypeRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ CreatureType –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π).
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create(self, data: Dict[str, Any]) -> CreatureType:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Ç–∏–ø–∞ —Å—É—â–µ—Å—Ç–≤–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        new_creature_type = CreatureType(**data)
        self._session.add(new_creature_type)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–¢–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ '{new_creature_type.name}' (ID: {new_creature_type.creature_type_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é.")
        return new_creature_type

    async def get_by_id(self, id: int) -> Optional[CreatureType]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ –ø–æ –µ–≥–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(CreatureType).where(CreatureType.creature_type_id == id)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_by_name(self, name: str) -> Optional[CreatureType]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏ (name) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(CreatureType).where(CreatureType.name == name)
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_all(self) -> List[CreatureType]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —Å—É—â–µ—Å—Ç–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = fselect(CreatureType)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update(self, id: int, updates: Dict[str, Any]) -> Optional[CreatureType]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ –ø–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = update(CreatureType).where(CreatureType.creature_type_id == id).values(**updates).returning(CreatureType)
        result = await self._session.execute(stmt)
        updated_creature_type = result.scalars().first()
        if updated_creature_type:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–¢–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ (ID: {id}) –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–¢–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ —Å ID {id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_creature_type

    async def delete(self, id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ –ø–æ –µ–≥–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = delete(CreatureType).where(CreatureType.creature_type_id == id)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–¢–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ (ID: {id}) –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–¢–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ (ID: {id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def upsert(self, data: Dict[str, Any]) -> CreatureType:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤–∞, –∏—Å–ø–æ–ª—å–∑—É—è UPSERT –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        creature_type_id = data.get("creature_type_id")
        if creature_type_id is None:
            raise ValueError("Creature type ID must be provided for upsert operation.")

        insert_stmt = pg_insert(CreatureType).values(**data)

        update_cols = {k: insert_stmt.excluded[k] for k in data if k != 'creature_type_id'} # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ PK

        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[CreatureType.creature_type_id],
            set_=update_cols
        ).returning(CreatureType)

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit

        new_creature_type = result.scalar_one_or_none()
        if not new_creature_type:
            raise RuntimeError("UPSERT –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç.")
        logger.info(f"–¢–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ '{new_creature_type.name}' (ID: {new_creature_type.creature_type_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return new_creature_type

    async def upsert_many(self, data_list: List[Dict[str, Any]]) -> int:
        """–ú–∞—Å—Å–æ–≤–æ —Å–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∏–ø—ã —Å—É—â–µ—Å—Ç–≤ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        if not data_list:
            logger.info("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CreatureType upsert_many. –ù–∏—á–µ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ.")
            return 0

        updatable_fields = [
            "name", "description", "category", "subcategory",
            "visual_tags", "rarity_weight", "is_playable",
        ]
        set_clause = {field: getattr(pg_insert(CreatureType).excluded, field) for field in updatable_fields}

        insert_stmt = pg_insert(CreatureType).values(data_list)
        on_conflict_stmt = insert_stmt.on_conflict_do_update(
            index_elements=[CreatureType.creature_type_id],
            set_=set_clause
        )

        result = await self._session.execute(on_conflict_stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        upserted_count = result.rowcount
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –º–∞—Å—Å–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ {upserted_count} —Ç–∏–ø–æ–≤ —Å—É—â–µ—Å—Ç–≤ –≤ —Å–µ—Å—Å–∏–∏.")
        return upserted_count

    async def delete_by_id(self, id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ –ø–æ –µ–≥–æ ID (–¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        return await self.delete(id) # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è

    async def get_filtered_by_category_and_playable(self, category: str, is_playable: bool) -> List[CreatureType]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã —Å—É—â–µ—Å—Ç–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ñ–ª–∞–≥—É is_playable –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = fselect(CreatureType).where(
            CreatureType.category == category,
            CreatureType.is_playable == is_playable
        )
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def get_creature_type_with_initial_skills(self, creature_type_id: int) -> Optional[CreatureType]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø —Å—É—â–µ—Å—Ç–≤–∞ –≤–º–µ—Å—Ç–µ —Å –µ–≥–æ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç selectinload –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        """
        stmt = fselect(CreatureType).where(CreatureType.creature_type_id == creature_type_id).options(
            selectinload(CreatureType.initial_skills).selectinload(CreatureTypeInitialSkill.skill_definition)
        )
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()
