# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/discord/discord_entity_repository_impl.py

import logging
from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy import select, update, delete, func

# –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ DiscordEntity
from game_server.database.models.models import DiscordEntity

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.discord.interfaces_discord import IDiscordEntityRepository

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.config.logging.logging_setup import app_logger as logger


class DiscordEntityRepositoryImpl(IDiscordEntityRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é DiscordEntity.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create_discord_entity(self, entity_data: Dict[str, Any]) -> DiscordEntity:
        new_entity = DiscordEntity(**entity_data)
        self._session.add(new_entity)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–°—É—â–Ω–æ—Å—Ç—å Discord '{new_entity.name}' (ID: {new_entity.id if hasattr(new_entity, 'id') else 'N/A'}, Discord ID: {new_entity.discord_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é.")
        return new_entity

    async def get_discord_entity_by_discord_id(self, guild_id: int, discord_id: int) -> Optional[DiscordEntity]:
        stmt = select(DiscordEntity).where(
            DiscordEntity.guild_id == guild_id,
            DiscordEntity.discord_id == discord_id
        )
        result = await self._session.execute(stmt)
        return result.scalars().first()

    async def get_discord_entity_by_name_and_parent(self, guild_id: int, name: str, parent_id: Optional[int]) -> Optional[DiscordEntity]:
        stmt = select(DiscordEntity).where(
            DiscordEntity.guild_id == guild_id,
            DiscordEntity.name == name,
            DiscordEntity.parent_id == parent_id
        )
        result = await self._session.execute(stmt)
        return result.scalars().first()

    async def get_discord_entities_by_guild_id(self, guild_id: int) -> List[DiscordEntity]:
        stmt = select(DiscordEntity).where(DiscordEntity.guild_id == guild_id)
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def get_discord_entities_by_type(self, guild_id: int, entity_type: str) -> List[DiscordEntity]:
        stmt = select(DiscordEntity).where(
            DiscordEntity.guild_id == guild_id,
            DiscordEntity.entity_type == entity_type
        )
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def update_discord_entity(self, entity_id: int, updates: Dict[str, Any]) -> Optional[DiscordEntity]:
        stmt = update(DiscordEntity).where(DiscordEntity.id == entity_id).values(**updates).returning(DiscordEntity)
        result = await self._session.execute(stmt)
        updated_entity = result.scalars().first()
        if updated_entity:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–°—É—â–Ω–æ—Å—Ç—å Discord ID {entity_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
        return updated_entity

    async def update_discord_entity_by_discord_id(self, guild_id: int, discord_id: int, updates: Dict[str, Any]) -> Optional[DiscordEntity]:
        stmt = update(DiscordEntity).where(
            DiscordEntity.guild_id == guild_id,
            DiscordEntity.discord_id == discord_id
        ).values(**updates).returning(DiscordEntity)
        result = await self._session.execute(stmt)
        updated_entity = result.scalars().first()
        if updated_entity:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–°—É—â–Ω–æ—Å—Ç—å Discord ID {discord_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏.")
        return updated_entity

    async def delete_discord_entity_by_id(self, entity_id: int) -> bool:
        stmt = delete(DiscordEntity).where(DiscordEntity.discord_id == entity_id)
        result = await self._session.execute(stmt)
        if result.rowcount > 0:
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–°—É—â–Ω–æ—Å—Ç—å Discord (ID: {entity_id}) –ø–æ–º–µ—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–°—É—â–Ω–æ—Å—Ç—å Discord (ID: {entity_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def delete_discord_entities_batch(self, guild_id: int, discord_ids: List[int]) -> int:
        if not discord_ids:
            return 0
        stmt = delete(DiscordEntity).where(
            DiscordEntity.guild_id == guild_id,
            DiscordEntity.discord_id.in_(discord_ids)
        )
        result = await self._session.execute(stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ {result.rowcount} —Å—É—â–Ω–æ—Å—Ç–µ–π Discord (Discord IDs: {discord_ids}) –∏–∑ —Å–µ—Å—Å–∏–∏.")
        return result.rowcount

    async def get_total_entities_count(self, guild_id: Optional[int] = None) -> int:
        stmt = select(func.count(DiscordEntity.id))
        if guild_id:
            stmt = stmt.where(DiscordEntity.guild_id == guild_id)
        result = await self._session.execute(stmt)
        return result.scalar_one()
