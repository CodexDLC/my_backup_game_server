# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/accounts/account_game_data_repository.py

import logging
from datetime import datetime, timedelta, timezone
from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy import select, update, func
from sqlalchemy.exc import SQLAlchemyError, IntegrityError

from game_server.database.models.models import AccountGameData
from .interfaces_accounts import IAccountGameDataRepository
from game_server.config.logging.logging_setup import app_logger as logger

class AccountGameDataRepositoryImpl(IAccountGameDataRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é AccountGameData.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create_account_game_data(self, account_id: int, initial_shard_id: Optional[str] = None) -> Optional[AccountGameData]:
        new_game_data = AccountGameData(
            account_id=account_id,
            shard_id=initial_shard_id,
            last_login_game=datetime.now(timezone.utc),
        )
        self._session.add(new_game_data)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"AccountGameData —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é –¥–ª—è account_id: {account_id}.")
        return new_game_data

    async def get_account_game_data(self, account_id: int) -> Optional[AccountGameData]:
        stmt = select(AccountGameData).where(AccountGameData.account_id == account_id)
        result = await self._session.execute(stmt)
        return result.scalars().first()

    async def update_shard_id(self, account_id: int, new_shard_id: Optional[str]) -> Optional[AccountGameData]:
        stmt = update(AccountGameData).where(AccountGameData.account_id == account_id).values(
            shard_id=new_shard_id
        ).returning(AccountGameData)
        result = await self._session.execute(stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"Shard ID –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_shard_id}' –≤ —Å–µ—Å—Å–∏–∏.")
        return result.scalars().first()

    async def update_last_login_game(self, account_id: int) -> Optional[AccountGameData]:
        stmt = update(AccountGameData).where(AccountGameData.account_id == account_id).values(
            last_login_game=datetime.now(timezone.utc)
        ).returning(AccountGameData)
        result = await self._session.execute(stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"last_login_game –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return result.scalars().first()

    async def get_inactive_accounts_with_shard_id(self, days_inactive: int) -> List[AccountGameData]:
        inactive_threshold = datetime.now(timezone.utc) - timedelta(days=days_inactive)
        stmt = select(AccountGameData).where(
            AccountGameData.last_login_game < inactive_threshold,
            AccountGameData.shard_id.isnot(None)
        )
        result = await self._session.execute(stmt)
        return list(result.scalars().all())

    async def clear_shard_id_for_accounts(self, account_ids: List[int]) -> int:
        if not account_ids:
            return 0
        stmt = update(AccountGameData).where(AccountGameData.account_id.in_(account_ids)).values(
            shard_id=None
        )
        result = await self._session.execute(stmt)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"Shard ID –æ—á–∏—â–µ–Ω –¥–ª—è {result.rowcount} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–µ—Å—Å–∏–∏.")
        return result.rowcount

    async def count_players_on_shard(self, shard_id: str) -> int:
        stmt = select(func.count(AccountGameData.account_id)).where(
            AccountGameData.shard_id == shard_id
        )
        result = await self._session.execute(stmt)
        return result.scalar_one()

    async def count_players_on_all_shards(self) -> Dict[str, int]:
        stmt = select(AccountGameData.shard_id, func.count(AccountGameData.account_id)).where(
            AccountGameData.shard_id.isnot(None)
        ).group_by(AccountGameData.shard_id)
        result = await self._session.execute(stmt)
        return {row.shard_id: row.count for row in result.all()}
