# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/accounts/account_info_repository_impl.py

from datetime import datetime, timezone
from typing import Optional, Dict, Any, List

from sqlalchemy import select, func, String, update, delete
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy.future import select as fselect
from sqlalchemy.exc import IntegrityError, NoResultFound

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ AccountInfo –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
from game_server.database.models.models import AccountInfo

# –ò–º–ø–æ—Ä—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.accounts.interfaces_accounts import IAccountInfoRepository

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.config.logging.logging_setup import app_logger as logger


class AccountInfoRepositoryImpl(IAccountInfoRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é AccountInfo.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create_account(self, account_data: Dict[str, Any]) -> AccountInfo:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
        if "username" in account_data:
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            existing_by_username = await self.get_account_by_username(account_data["username"])
            if existing_by_username:
                raise ValueError(f"Username '{account_data['username']}' already exists.")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –∏ –Ω–µ None)
        if "email" in account_data and account_data["email"] is not None:
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            existing_by_email = await self.get_account_by_email(account_data["email"])
            if existing_by_email:
                raise ValueError(f"Email '{account_data['email']}' already exists.")

        new_account = AccountInfo(**account_data)
        self._session.add(new_account)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–ê–∫–∫–∞—É–Ω—Ç '{new_account.username}' (ID: {new_account.account_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é.")
        return new_account

    async def get_account_by_id(self, account_id: int) -> Optional[AccountInfo]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ `account_id`."""
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        query = fselect(AccountInfo).where(AccountInfo.account_id == account_id)
        result = await self._session.execute(query)
        return result.scalar_one_or_none()

    async def get_account_by_username(self, username: str) -> Optional[AccountInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        query = fselect(AccountInfo).where(AccountInfo.username == username)
        result = await self._session.execute(query)
        return result.scalar_one_or_none()

    async def get_account_by_email(self, email: str) -> Optional[AccountInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ email."""
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        query = fselect(AccountInfo).where(AccountInfo.email == email)
        result = await self._session.execute(query)
        return result.scalar_one_or_none()

    async def get_account_by_identifier(self, identifier_type: str, identifier_value: str) -> Optional[AccountInfo]:
        """
        –ü–æ–∏—Å–∫ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –≤ `linked_platforms` (JSON).
        """
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        query = fselect(AccountInfo).where(
            func.json_extract_path_text(AccountInfo.linked_platforms, identifier_type) == identifier_value
        )
        result = await self._session.execute(query)
        return result.scalar_one_or_none()

    async def update_account(self, account_id: int, update_data: Dict[str, Any]) -> Optional[AccountInfo]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞.
        """
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        stmt = fselect(AccountInfo).where(AccountInfo.account_id == account_id)
        result = await self._session.execute(stmt)
        account = result.scalar_one_or_none()
        if not account:
            logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.")
            return None

        for key, value in update_data.items():
            if key == "linked_platforms" and isinstance(value, dict):
                current_linked_platforms = account.linked_platforms or {}
                current_linked_platforms.update(value)
                setattr(account, key, current_linked_platforms)
            else:
                setattr(account, key, value)

        account.updated_at = datetime.now(timezone.utc)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return account

    async def delete_account(self, account_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞.
        """
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        stmt = fselect(AccountInfo).where(AccountInfo.account_id == account_id)
        result = await self._session.execute(stmt)
        account_to_delete = result.scalar_one_or_none()
        if not account_to_delete:
            logger.warning(f"–ê–∫–∫–∞—É–Ω—Ç —Å ID {account_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.")
            return False

        await self._session.delete(account_to_delete)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–ê–∫–∫–∞—É–Ω—Ç {account_id} –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
        return True

    async def get_all_guest_usernames(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å "–ì–æ—Å—Ç—å"."""
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        query = fselect(AccountInfo.username).where(AccountInfo.username.like("–ì–æ—Å—Ç—å%"))
        result = await self._session.execute(query)
        return [u for u, in result.scalars().all()]

    async def get_account_by_auth_token(self, auth_token: str) -> Optional[AccountInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ —Ç–æ–∫–µ–Ω—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        query = fselect(AccountInfo).where(AccountInfo.auth_token == auth_token)
        result = await self._session.execute(query)
        return result.scalar_one_or_none()
