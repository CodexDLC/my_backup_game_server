# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/character/special_stat_effect_repository_impl.py

import logging
from typing import Any, Dict, List, Optional
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ SpecialStatEffect –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.character.interfaces_character import ISpecialStatEffectRepository
from game_server.database.models.models import SpecialStatEffect

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.config.logging.logging_setup import app_logger as logger


class SpecialStatEffectRepositoryImpl(ISpecialStatEffectRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é SpecialStatEffect.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self.db_session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def get_effect_by_id(self, effect_id: int) -> Optional[SpecialStatEffect]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –µ–≥–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = select(SpecialStatEffect).where(SpecialStatEffect.effect_id == effect_id)
        result = await self.db_session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_effect_by_keys(self, stat_key: str, affected_property: str, effect_type: str) -> Optional[SpecialStatEffect]:
        """–ü–æ–ª—É—á–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ stat_key, affected_property –∏ effect_type –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = select(SpecialStatEffect).where(
            SpecialStatEffect.stat_key == stat_key,
            SpecialStatEffect.affected_property == affected_property,
            SpecialStatEffect.effect_type == effect_type
        )
        result = await self.db_session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_effects_for_stat(self, stat_key: str) -> List[SpecialStatEffect]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π, –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = select(SpecialStatEffect).where(SpecialStatEffect.stat_key == stat_key)
        result = await self.db_session.execute(stmt)
        return result.scalars().all()

    async def get_effects_for_property(self, affected_property: str) -> List[SpecialStatEffect]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ, –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = select(SpecialStatEffect).where(SpecialStatEffect.affected_property == affected_property)
        result = await self.db_session.execute(stmt)
        return result.scalars().all()

    async def create_effect(self, effect_data: Dict[str, Any]) -> SpecialStatEffect:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        new_effect = SpecialStatEffect(**effect_data)
        self.db_session.add(new_effect)
        await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–≠—Ñ—Ñ–µ–∫—Ç '{effect_data.get('stat_key', 'N/A')}' —Å–æ–∑–¥–∞–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return new_effect

    async def update_effect(self, effect_id: int, updates: Dict[str, Any]) -> Optional[SpecialStatEffect]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = update(SpecialStatEffect).where(SpecialStatEffect.effect_id == effect_id).values(**updates).returning(SpecialStatEffect)
        result = await self.db_session.execute(stmt)
        updated_effect = result.scalars().first()
        if updated_effect:
            await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–≠—Ñ—Ñ–µ–∫—Ç (ID: {effect_id}) –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
            return updated_effect
        else:
            logger.warning(f"–≠—Ñ—Ñ–µ–∫—Ç —Å ID {effect_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return None

    async def delete_effect(self, effect_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ø–æ –µ–≥–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = delete(SpecialStatEffect).where(SpecialStatEffect.effect_id == effect_id)
        result = await self.db_session.execute(stmt)
        if result.rowcount > 0:
            await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–≠—Ñ—Ñ–µ–∫—Ç (ID: {effect_id}) –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–≠—Ñ—Ñ–µ–∫—Ç —Å ID {effect_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False
