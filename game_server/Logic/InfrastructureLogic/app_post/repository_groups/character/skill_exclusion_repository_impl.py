# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/character/skill_exclusion_repository_impl.py

import logging
from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete

# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ SkillExclusion –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
from game_server.Logic.InfrastructureLogic.app_post.repository_groups.character.interfaces_character import ISkillExclusionRepository
from game_server.database.models.models import SkillExclusion

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.config.logging.logging_setup import app_logger as logger


class SkillExclusionRepositoryImpl(ISkillExclusionRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é SkillExclusion.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self.db_session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def get_exclusion_by_id(self, exclusion_id: int) -> Optional[SkillExclusion]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ –µ–≥–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = select(SkillExclusion).where(SkillExclusion.exclusion_id == exclusion_id)
        result = await self.db_session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_exclusion_by_group_name(self, group_name: str) -> Optional[SkillExclusion]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = select(SkillExclusion).where(SkillExclusion.group_name == group_name)
        result = await self.db_session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_all_exclusions(self) -> List[SkillExclusion]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–∞–≤—ã–∫–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = select(SkillExclusion)
        result = await self.db_session.execute(stmt)
        return result.scalars().all()

    async def create_exclusion(self, exclusion_data: Dict[str, Any]) -> SkillExclusion:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        new_exclusion = SkillExclusion(**exclusion_data)
        self.db_session.add(new_exclusion)
        await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–ü—Ä–∞–≤–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–≥—Ä—É–ø–ø–∞: {exclusion_data.get('group_name', 'N/A')}) —Å–æ–∑–¥–∞–Ω–æ –≤ —Å–µ—Å—Å–∏–∏.")
        return new_exclusion

    async def update_exclusion(self, exclusion_id: int, updates: Dict[str, Any]) -> Optional[SkillExclusion]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = update(SkillExclusion).where(SkillExclusion.exclusion_id == exclusion_id).values(**updates).returning(SkillExclusion)
        result = await self.db_session.execute(stmt)
        updated_exclusion = result.scalars().first()
        if updated_exclusion:
            await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–ü—Ä–∞–≤–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (ID: {exclusion_id}) –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ —Å–µ—Å—Å–∏–∏.")
            return updated_exclusion
        else:
            logger.warning(f"–ü—Ä–∞–≤–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å ID {exclusion_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
            return None

    async def delete_exclusion(self, exclusion_id: int) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–∞–≤–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –µ–≥–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        stmt = delete(SkillExclusion).where(SkillExclusion.exclusion_id == exclusion_id)
        result = await self.db_session.execute(stmt)
        if result.rowcount > 0:
            await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–ü—Ä–∞–≤–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è (ID: {exclusion_id}) –ø–æ–º–µ—á–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–ü—Ä–∞–≤–∏–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å ID {exclusion_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False
