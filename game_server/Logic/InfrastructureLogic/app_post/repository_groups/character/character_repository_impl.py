# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/character/character_repository_impl.py

import logging
from datetime import datetime, timezone
from typing import Optional, Dict, Any, List
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy import select, update
from sqlalchemy.orm import selectinload
from game_server.database.models.models import Character, CharacterSkills

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.character.interfaces_character import ICharacterRepository

from game_server.config.logging.logging_setup import app_logger as logger


class CharacterRepositoryImpl(ICharacterRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é Character.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create_character(self, character_data: Dict[str, Any]) -> Character:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        :param character_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        :return: –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Character.
        """
        new_character = Character(**character_data)
        self._session.add(new_character)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ '{new_character.name if hasattr(new_character, 'name') else 'N/A'}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏—é.")
        return new_character

    async def get_full_character_data_by_id(self, character_id: int) -> Optional[Character]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç '–∂–∞–¥–Ω—É—é' –∑–∞–≥—Ä—É–∑–∫—É (eager loading).
        """
        stmt = (
            select(Character)
            .where(Character.character_id == character_id)
            .options(
                selectinload(Character.special_stats),
                selectinload(Character.character_skills).selectinload(CharacterSkills.skills),
                selectinload(Character.personality),
                selectinload(Character.background_story),
                selectinload(Character.clan)
            )
        )
        result = await self._session.execute(stmt)
        return result.scalar_one_or_none()

    async def get_character_by_id(self, character_id: int) -> Optional[Character]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ ID –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        query = select(Character).where(Character.character_id == character_id)
        result = await self._session.execute(query)
        return result.scalars().first()

    async def get_character_by_name(self, name: str) -> Optional[Character]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        query = select(Character).where(Character.name == name)
        result = await self._session.execute(query)
        return result.scalars().first()

    async def get_characters_by_account_id(self, account_id: int) -> List[Character]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö –∞–∫–∫–∞—É–Ω—Ç—É, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–∞–ª–µ–Ω—ã, –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏."""
        query = select(Character).where(
            (Character.account_id == account_id) &
            (Character.is_deleted == False)
        )
        result = await self._session.execute(query)
        return result.scalars().all()

    async def update_character(self, character_id: int, update_data: Dict[str, Any]) -> Optional[Character]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = update(Character).where(Character.character_id == character_id).values(**update_data).returning(Character)
        result = await self._session.execute(stmt)
        updated_character = result.scalars().first()
        if updated_character:
            updated_character.updated_at = datetime.now(timezone.utc)
            await self._session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {character_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å ID {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_character

    async def soft_delete_character(self, character_id: int) -> bool:
        """
        –õ–æ–≥–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ is_deleted –≤ True) –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        query = select(Character).where(Character.character_id == character_id)
        result = await self._session.execute(query)
        character_to_delete = result.scalars().first()

        if not character_to_delete:
            logger.warning(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å ID {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

        character_to_delete.is_deleted = True
        character_to_delete.updated_at = datetime.now(timezone.utc)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {character_id} –ª–æ–≥–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        return True

    async def get_online_character_by_account_id(self, account_id: int) -> Optional[Character]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'online' –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å 'online' –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
        """
        query = select(Character).where(
            (Character.account_id == account_id) &
            (Character.status == "online") &
            (Character.is_deleted == False)
        )
        result = await self._session.execute(query)
        return result.scalar_one_or_none()
