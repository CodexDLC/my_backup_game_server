# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/character/character_special_repository_impl.py

import logging
from typing import Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy import select, update, delete

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.character.interfaces_character import ICharacterSpecialRepository
from game_server.database.models.models import CharacterSpecial

from game_server.config.logging.logging_setup import app_logger as logger


class CharacterSpecialRepositoryImpl(ICharacterSpecialRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é CharacterSpecial.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self.db_session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create_special_stats(self, character_id: int, stats_data: Dict[str, Any]) -> CharacterSpecial:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç commit/rollback.
        """
        new_stats = CharacterSpecial(character_id=character_id, **stats_data)
        self.db_session.add(new_stats)
        await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ `{character_id}` –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Å–µ—Å—Å–∏—é.")
        return new_stats

    async def get_special_stats(self, character_id: int) -> Optional[CharacterSpecial]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = select(CharacterSpecial).where(CharacterSpecial.character_id == character_id)
        result = await self.db_session.execute(stmt)
        return result.scalar_one_or_none()

    async def update_special_stats(self, character_id: int, updates: Dict[str, Any]) -> Optional[CharacterSpecial]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç commit/rollback.
        """
        stmt = update(CharacterSpecial).where(CharacterSpecial.character_id == character_id).values(**updates).returning(CharacterSpecial)
        result = await self.db_session.execute(stmt)
        updated_stats = result.scalars().first()
        if updated_stats:
            await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ `{character_id}` –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ `{character_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_stats

    async def delete_special_stats(self, character_id: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        –ù–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç commit/rollback.
        """
        stmt = delete(CharacterSpecial).where(CharacterSpecial.character_id == character_id)
        result = await self.db_session.execute(stmt)
        if result.rowcount > 0:
            await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ `{character_id}` –ø–æ–º–µ—á–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ `{character_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False
