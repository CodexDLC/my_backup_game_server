# game_server/Logic/InfrastructureLogic/app_post/repository_groups/character/character_skill_repository_impl.py

import logging
from typing import List, Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete, insert # –î–æ–±–∞–≤–ª–µ–Ω insert

from game_server.database.models.models import CharacterSkills, Skills
from .interfaces_character import ICharacterSkillRepository
from game_server.config.logging.logging_setup import app_logger as logger


class CharacterSkillRepositoryImpl(ICharacterSkillRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è CRUD-–æ–ø–µ—Ä–∞—Ü–∏–π —Å –º–æ–¥–µ–ª—å—é CharacterSkills.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self.db_session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create_skill(self, character_id: int, skill_data: Dict[str, Any]) -> CharacterSkills:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂—É –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        :param character_id: ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        :param skill_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞–≤—ã–∫–∞.
        :return: –°–æ–∑–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç CharacterSkills.
        """
        new_skill = CharacterSkills(character_id=character_id, **skill_data)
        self.db_session.add(new_skill)
        await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–ù–∞–≤—ã–∫ '{skill_data.get('skill_key', 'N/A')}' –¥–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂—É {character_id} –≤ —Å–µ—Å—Å–∏—é.")
        return new_skill

    async def get_skill(self, character_id: int, skill_key: int) -> Optional[CharacterSkills]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = select(CharacterSkills).where(
            CharacterSkills.character_id == character_id,
            CharacterSkills.skill_key == skill_key
        )
        result = await self.db_session.execute(stmt)
        return result.scalar_one_or_none()

    async def update_skill(self, character_id: int, skill_key: int, updates: Dict[str, Any]) -> Optional[CharacterSkills]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = update(CharacterSkills).where(
            CharacterSkills.character_id == character_id,
            CharacterSkills.skill_key == skill_key
        ).values(**updates).returning(CharacterSkills)
        result = await self.db_session.execute(stmt)
        updated_skill = result.scalars().first()
        if updated_skill:
            await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
            logger.info(f"–ù–∞–≤—ã–∫ `{skill_key}` —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ `{character_id}` –æ–±–Ω–æ–≤–ª—ë–Ω –≤ —Å–µ—Å—Å–∏–∏.")
        else:
            logger.warning(f"–ù–∞–≤—ã–∫ `{skill_key}` —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ `{character_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        return updated_skill

    async def delete_skill(self, character_id: int, skill_key: int) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        stmt = delete(CharacterSkills).where(
            CharacterSkills.character_id == character_id,
            CharacterSkills.skill_key == skill_key
        )
        result = await self.db_session.execute(stmt)
        await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
        if result.rowcount > 0:
            logger.info(f"–ù–∞–≤—ã–∫ `{skill_key}` —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ `{character_id}` –ø–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏.")
            return True
        else:
            logger.warning(f"–ù–∞–≤—ã–∫ `{skill_key}` —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ `{character_id}` –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False

    async def bulk_create_skills(self, character_id: int, skills_data: List[Dict[str, Any]]) -> None:
        """
        –ü–∞–∫–µ—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏.
        """
        if not skills_data:
            return # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–≤—ã–∫–æ–≤ –ø—É—Å—Ç

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        skills_to_insert = []
        for skill_info in skills_data:
            skill_record = {
                "character_id": character_id,
                "skill_key": skill_info.get("skill_key"),
                "level": skill_info.get("level", 0),
                "xp": skill_info.get("xp", 0),
                "progress_state": skill_info.get("progress_state", "PLUS")
            }
            skills_to_insert.append(skill_record)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –≤—Å—Ç–∞–≤–∫—É
        stmt = insert(CharacterSkills)
        await self.db_session.execute(stmt, skills_to_insert)
        await self.db_session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–ü–∞–∫–µ—Ç–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ {len(skills_to_insert)} –Ω–∞–≤—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ID {character_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏—é.")
