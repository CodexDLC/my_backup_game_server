# game_server/Logic/InfrastructureLogic/DataAccessLogic/app_post/repository_groups/system/data_version_repository_impl.py

import logging
from typing import Optional, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
from sqlalchemy.future import select as fselect
from sqlalchemy.dialects.postgresql import insert as pg_insert

from game_server.Logic.InfrastructureLogic.app_post.repository_groups.system.interfaces_system import IDataVersionRepository
from game_server.database.models.models import DataVersion

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.config.logging.logging_setup import app_logger as logger


class DataVersionRepositoryImpl(IDataVersionRepository):
    """
    –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä—Å–∏—è–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ DataVersion.
    –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π –∏ –Ω–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    def __init__(self, db_session: AsyncSession):
        self._session = db_session # <--- –°–û–•–†–ê–ù–Ø–ï–ú –ê–ö–¢–ò–í–ù–£–Æ –°–ï–°–°–ò–Æ
        logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–µ–π.")

    async def create_initial_version(self, table_name: str, initial_hash: str) -> DataVersion:
        new_version = DataVersion(table_name=table_name, data_hash=initial_hash)
        self._session.add(new_version)
        await self._session.flush() # flush, –Ω–æ –ù–ï commit
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è '{table_name}': {initial_hash[:8]}... –≤ —Å–µ—Å—Å–∏–∏.")
        return new_version

    async def get_current_version(self, table_name: str) -> Optional[str]:
        stmt = fselect(DataVersion.data_hash).where(DataVersion.table_name == table_name)
        result = await self._session.execute(stmt)
        version_hash = result.scalar_one_or_none()
        return version_hash

    async def update_version(self, table_name: str, new_hash: str) -> DataVersion:
        return await self.upsert_version(table_name, new_hash)

    async def upsert_version(self, table_name: str, new_hash: str) -> DataVersion:
        insert_stmt = pg_insert(DataVersion).values(
            table_name=table_name,
            data_hash=new_hash
        )
        upsert_stmt = insert_stmt.on_conflict_do_update(
            index_elements=['table_name'],
            set_={'data_hash': new_hash}
        ).returning(DataVersion)

        result = await self._session.execute(upsert_stmt)
        updated_entity = result.scalar_one()
        await self._session.flush() # flush, –Ω–æ –ù–ï commit

        logger.debug(f"–í–µ—Ä—Å–∏—è –¥–ª—è '{table_name}' –≤ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞/—Å–æ–∑–¥–∞–Ω–∞: {updated_entity.data_hash[:8]}... –≤ —Å–µ—Å—Å–∏–∏.")
        return updated_entity
