# game_server/Logic/InfrastructureLogic/app_cache/app_cache_initializer.py

import logging
from typing import Optional, Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CentralRedisClient
from .central_redis_client import CentralRedisClient

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
from .services.shard_count.shard_count_cache_manager import ShardCountCacheManager
from .services.task_queue.redis_batch_store import RedisBatchStore
# –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç TaskQueueCacheManager

from .services.character.character_cache_manager import CharacterCacheManager
from .services.item.item_cache_manager import ItemCacheManager
from .services.reference_data.reference_data_cache_manager import ReferenceDataCacheManager
from .services.reference_data.reference_data_reader import ReferenceDataReader
from .services.discord.backend_guild_config_manager import BackendGuildConfigManager
from .interfaces.interfaces_session_cache import ISessionManager
from .services.session.session_manager import RedisSessionManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
from game_server.config.settings_core import REDIS_URL, REDIS_POOL_SIZE, REDIS_PASSWORD

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ—Ç—Ç–µ—Ä –¥–ª—è RepositoryManager, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å—é
from game_server.Logic.InfrastructureLogic.app_post.app_post_initializer import get_repository_manager_instance
from game_server.config.logging.logging_setup import app_logger as logger

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª—è
central_redis_client_instance: Optional[CentralRedisClient] = None
_initialized_managers: Dict[str, Any] = {}


async def initialize_app_cache_managers() -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∫—ç—à–∞. –¢–µ–ø–µ—Ä—å –æ–Ω —Å–∞–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω—É–∂–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏,
    –∫–æ–≥–¥–∞ –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è (—á–µ—Ä–µ–∑ get_repository_manager_instance).
    """
    global central_redis_client_instance

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if _initialized_managers:
        logger.warning("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∫—ç—à–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–æ–ø—É—Å–∫.")
        return True

    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤...")

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CentralRedisClient
        logger.info("üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ CentralRedisClient...")
        central_redis_client_instance = CentralRedisClient(
            redis_url=REDIS_URL,
            max_connections=REDIS_POOL_SIZE,
            redis_password=REDIS_PASSWORD
        )
        await central_redis_client_instance.connect()
        logger.info("‚úÖ CentralRedisClient —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        _initialized_managers["central_redis_client"] = central_redis_client_instance

        if not hasattr(central_redis_client_instance, 'hgetall_msgpack'):
            logger.critical("DEBUG: !!! CENTRAL_REDIS_CLIENT –ù–ï –ò–ú–ï–ï–¢ hgetall_msgpack –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò CACHE MANAGERS !!!")
            raise AttributeError(f"DEBUG: Global CentralRedisClient from module '{central_redis_client_instance.__class__.__module__}' has no attribute 'hgetall_msgpack'")
        logger.critical("--- DEBUG: CentralRedisClient –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ---")
        # üî•üî•üî• –ö–û–ù–ï–¶ –û–¢–õ–ê–î–û–ß–ù–û–ì–û –ö–û–î–ê –í initialize_app_cache_managers üî•üî•üî•


        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å—è—Ç —Ç–æ–ª—å–∫–æ –æ—Ç Redis
        _initialized_managers["redis_batch_store"] = RedisBatchStore(redis_client=central_redis_client_instance)
        # –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TaskQueueCacheManager
        _initialized_managers["character_cache_manager"] = CharacterCacheManager(redis_client=central_redis_client_instance)
        _initialized_managers["item_cache_manager"] = ItemCacheManager(redis_client=central_redis_client_instance)
        _initialized_managers["reference_data_reader"] = ReferenceDataReader(redis_client=central_redis_client_instance)
        _initialized_managers["shard_count_cache_manager"] = ShardCountCacheManager(redis_client=central_redis_client_instance)
        _initialized_managers["session_manager"] = RedisSessionManager(redis_client=central_redis_client_instance)
        _initialized_managers["backend_guild_config_manager"] = BackendGuildConfigManager(redis_client=central_redis_client_instance)
        logger.info("‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∫—ç—à–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ReferenceDataCacheManager...")
        repository_manager = get_repository_manager_instance()
        _initialized_managers["reference_data_cache_manager"] = ReferenceDataCacheManager(
            repository_manager=repository_manager,
            redis_client=central_redis_client_instance
        )
        logger.info("‚úÖ ReferenceDataCacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        
        logger.info("‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        return True
    except Exception as e:
        logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞: {e}", exc_info=True)
        if central_redis_client_instance:
            await central_redis_client_instance.close()
            logger.warning("CentralRedisClient –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        return False


def get_initialized_app_cache_managers() -> Dict[str, Any]:
    if not _initialized_managers:
        logger.error("üö´ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∫—ç—à–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ initialize_app_cache_managers() —Å–Ω–∞—á–∞–ª–∞.")
        raise RuntimeError("App cache managers are not initialized.")
    return _initialized_managers


def get_redis_client() -> CentralRedisClient:
    if central_redis_client_instance is None:
        raise RuntimeError("Redis client is not initialized. Ensure lifespan startup event has run.")
    return central_redis_client_instance


async def shutdown_app_cache_managers() -> None:
    global central_redis_client_instance
    global _initialized_managers

    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤...")
    if central_redis_client_instance:
        await central_redis_client_instance.close()
    
    central_redis_client_instance = None
    _initialized_managers = {}
    logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")

    
def get_session_manager_instance() -> ISessionManager:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä RedisSessionManager.
    """
    try:
        return _initialized_managers["session_manager"]
    except KeyError:
        logger.error("üö´ RedisSessionManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initialize_app_cache_managers() —Å–Ω–∞—á–∞–ª–∞.")
        raise RuntimeError("RedisSessionManager is not initialized.")
