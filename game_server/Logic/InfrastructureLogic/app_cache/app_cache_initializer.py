import logging
from typing import Optional, Callable, Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç CentralRedisClient
from .central_redis_client import CentralRedisClient

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏–∑ –∏—Ö –Ω–æ–≤—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π
from .services.shard_count.shard_count_cache_manager import ShardCountCacheManager # –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å
from .services.task_queue.redis_batch_store import RedisBatchStore # –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å
from .services.task_queue.task_queue_cache_manager import TaskQueueCacheManager # –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å
from .services.character.character_cache_manager import CharacterCacheManager # –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å
from .services.item.item_cache_manager import ItemCacheManager # –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å
# –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ ReferenceDataCacheManager
from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data.reference_data_cache_manager import ReferenceDataCacheManager # –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å
from game_server.Logic.InfrastructureLogic.app_cache.services.reference_data.reference_data_reader import ReferenceDataReader # –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å
from .services.tick.tick_cache_manager import TickCacheManager # –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Redis
from game_server.config.settings_core import REDIS_URL, REDIS_POOL_SIZE, REDIS_PASSWORD

# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç get_repository_manager_instance
from game_server.Logic.InfrastructureLogic.app_post.app_post_initializer import get_repository_manager_instance #


logger = logging.getLogger(__name__)

central_redis_client_instance: Optional[CentralRedisClient] = None

_initialized_managers: Dict[str, Any] = {}

async def initialize_app_cache_managers(async_session_factory: Callable[[], AsyncSession]) -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ–≤–∞—Ä—å.
    –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    global central_redis_client_instance

    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤...")

    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CentralRedisClient (DB 0)
        logger.info("üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ CentralRedisClient –∫ DB 0...")
        central_redis_client_instance = CentralRedisClient(
            redis_url=REDIS_URL,
            max_connections=REDIS_POOL_SIZE,
            redis_password=REDIS_PASSWORD
        )
        await central_redis_client_instance.connect()
        logger.info("‚úÖ CentralRedisClient —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ DB 0.")
        _initialized_managers["central_redis_client"] = central_redis_client_instance

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RedisBatchStore
        _initialized_managers["redis_batch_store"] = RedisBatchStore(redis_client=central_redis_client_instance)
        logger.info("‚úÖ RedisBatchStore –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TaskQueueCacheManager
        _initialized_managers["task_queue_cache_manager"] = TaskQueueCacheManager(redis_client=central_redis_client_instance)
        logger.info("‚úÖ TaskQueueCacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CharacterCacheManager
        _initialized_managers["character_cache_manager"] = CharacterCacheManager(redis_client=central_redis_client_instance)
        logger.info("‚úÖ CharacterCacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ItemCacheManager
        _initialized_managers["item_cache_manager"] = ItemCacheManager(redis_client=central_redis_client_instance)
        logger.info("‚úÖ ItemCacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ReferenceDataCacheManager
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ReferenceDataCacheManager...")
        # –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º RepositoryManager
        repository_manager = get_repository_manager_instance() # <--- –î–û–ë–ê–í–õ–ï–ù–û
        _initialized_managers["reference_data_cache_manager"] = ReferenceDataCacheManager(
            repository_manager=repository_manager, # <--- –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º repository_manager
            redis_client=central_redis_client_instance
        )
        logger.info("‚úÖ ReferenceDataCacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        # 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ReferenceDataReader
        _initialized_managers["reference_data_reader"] = ReferenceDataReader(redis_client=central_redis_client_instance)
        logger.info("‚úÖ ReferenceDataReader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        # 8. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TickCacheManager
        _initialized_managers["tick_cache_manager"] = TickCacheManager(redis_client=central_redis_client_instance)
        logger.info("‚úÖ TickCacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        # 9. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ShardCountCacheManager
        _initialized_managers["shard_count_cache_manager"] = ShardCountCacheManager(redis_client=central_redis_client_instance)
        logger.info("‚úÖ ShardCountCacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        logger.info("‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        return True
    except Exception as e:
        logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞: {e}", exc_info=True)
        if central_redis_client_instance:
            await central_redis_client_instance.close()
            logger.warning("CentralRedisClient –∑–∞–∫—Ä—ã—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.")
        return False

def get_initialized_app_cache_managers() -> Dict[str, Any]:
    if not _initialized_managers:
        logger.error("üö´ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∫—ç—à–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ initialize_app_cache_managers() —Å–Ω–∞—á–∞–ª–∞.")
        raise RuntimeError("App cache managers are not initialized.")

    return _initialized_managers

def get_redis_client() -> "CentralRedisClient":
    if central_redis_client_instance is None:
        raise RuntimeError("Redis client is not initialized. Ensure lifespan startup event has run.")
    return central_redis_client_instance

async def shutdown_app_cache_managers() -> None:
    global central_redis_client_instance
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤...")
    if central_redis_client_instance:
        await central_redis_client_instance.close()
        logger.info("‚úÖ CentralRedisClient –∑–∞–∫—Ä—ã—Ç.")
    else:
        logger.debug("CentralRedisClient –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
    logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")