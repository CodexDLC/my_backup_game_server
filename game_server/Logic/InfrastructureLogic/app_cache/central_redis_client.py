# game_server/Logic/InfrastructureLogic/app_cache/central_redis_client.py

import json
import logging
from typing import Any, Dict, List, Optional, Union
import uuid
import msgpack
import redis.asyncio as redis_asyncio
import datetime # –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ datetime –≤ json_serializer


from game_server.config.settings_core import REDIS_PASSWORD, REDIS_POOL_SIZE, REDIS_URL


class CentralRedisClient:
    """
    –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º Redis-—Å–µ—Ä–≤–µ—Ä–æ–º Backend'–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç redis-py (–≤–µ—Ä—Å–∏–∏ 5+) –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Redis.
    –≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—É–ª–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
    """
    def __init__(
        self,
        redis_url: str = REDIS_URL,
        max_connections: int = REDIS_POOL_SIZE,
        redis_password: str = REDIS_PASSWORD
    ):
        self.logger = logging.getLogger("central_redis_client")
        self._redis_url = redis_url
        self._max_connections = max_connections
        self._redis_password = redis_password
        # self.redis –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π, –≥–¥–µ –æ–∂–∏–¥–∞—é—Ç—Å—è —Å—Ç—Ä–æ–∫–∏ (decode_responses=True)
        self.redis: Optional[redis_asyncio.Redis] = None
        # self.redis_raw –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å—ã—Ä—ã–º–∏ –±–∞–π—Ç–∞–º–∏ (decode_responses=False)
        self.redis_raw: Optional[redis_asyncio.Redis] = None
        self.logger.info("‚ú® CentralRedisClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    async def connect(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–ø—É–ª) —Å Redis.
        """
        if self.redis is None: # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ self.redis, —Ç–∞–∫ –∫–∞–∫ –æ–±–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –≤–º–µ—Å—Ç–µ
            self.logger.info(f"üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º—É Redis: {self._redis_url}...")
            try:
                # –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö set/get)
                self.redis = redis_asyncio.from_url(
                    self._redis_url,
                    password=self._redis_password,
                    decode_responses=True, # –≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ UTF-8
                    socket_timeout=5,
                    socket_connect_timeout=5,
                )
                # –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—ã—Ä—ã–º–∏ –±–∞–π—Ç–∞–º–∏ (–¥–ª—è MsgPack, JSON —Å —Ä—É—á–Ω—ã–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º, Pub/Sub raw)
                self.redis_raw = redis_asyncio.from_url(
                    self._redis_url,
                    password=self._redis_password,
                    decode_responses=False, # –≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –ù–ï –±—É–¥–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–π—Ç—ã
                    socket_timeout=5,
                    socket_connect_timeout=5,
                )

                await self.redis.ping()
                await self.redis_raw.ping()
                self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º—É Redis —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self._redis_url}")
            except Exception as e:
                self.logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Redis: {e}", exc_info=True)
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                self.redis = None 
                self.redis_raw = None
                raise
        else:
            self.logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")

    async def hgetall_json(self, name: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ö—ç—à–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç 'redis_raw' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö –±–∞–π—Ç–æ–≤, –∑–∞—Ç–µ–º –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç JSON.
        """
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
        raw_data: Dict[bytes, bytes] = await self.redis_raw.hgetall(name.encode('utf-8')) # –ö–ª—é—á —Ç–æ–∂–µ –∫–æ–¥–∏—Ä—É–µ–º
        if raw_data:
            result_dict: Dict[str, Any] = {}
            for k_bytes, v_bytes in raw_data.items():
                try:
                    key_str = k_bytes.decode('utf-8', errors='replace') # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á (replace –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–ª—é—á–µ–π)
                    value_str = v_bytes.decode('utf-8', errors='ignore') # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É (–¥–ª—è JSON)
                    result_dict[key_str] = json.loads(value_str)
                except json.JSONDecodeError as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON –¥–ª—è –∫–ª—é—á–∞ '{key_str}' –≤ —Ö—ç—à–µ '{name}': {e}. Raw value: {v_bytes[:50]}...", exc_info=True)
                except UnicodeDecodeError as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Unicode –¥–ª—è –∫–ª—é—á–∞ '{key_str}' –≤ —Ö—ç—à–µ '{name}': {e}. Raw value: {v_bytes[:50]}...", exc_info=True)
                except Exception as e:
                    self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ö—ç—à–∞ '{name}': {e}", exc_info=True)
            return result_dict
        return None

    async def hsetall_json(self, name: str, mapping: Dict[str, Any]):       
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return

        def json_serializer(obj):
            if isinstance(obj, uuid.UUID):
                return str(obj)
            if isinstance(obj, datetime.datetime):
                return obj.isoformat()
            raise TypeError(f"Object of type {obj.__class__.__name__} is not JSON serializable")

        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ JSON-—Å—Ç—Ä–æ–∫—É, –∑–∞—Ç–µ–º –∫–æ–¥–∏—Ä—É–µ–º –≤ UTF-8 –±–∞–π—Ç—ã
        json_mapping_encoded = {k.encode('utf-8'): json.dumps(v, default=json_serializer).encode('utf-8') for k, v in mapping.items()} # –ö–ª—é—á–∏ —Ç–æ–∂–µ –∫–æ–¥–∏—Ä—É–µ–º
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º redis_raw –¥–ª—è hset, —Ç–∞–∫ –∫–∞–∫ –º—ã —Å–∞–º–∏ —É–ø—Ä–∞–≤–ª—è–µ–º –±–∞–π—Ç–∞–º–∏
        await self.redis_raw.hset(name.encode('utf-8'), mapping=json_mapping_encoded) # –ò–º—è —Ö—ç—à–∞ —Ç–æ–∂–µ –∫–æ–¥–∏—Ä—É–µ–º


    async def get_json(self, key: str) -> Optional[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç 'redis_raw' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö –±–∞–π—Ç–æ–≤, –∑–∞—Ç–µ–º –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç JSON.
        """
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
        data_bytes = await self.redis_raw.get(key.encode('utf-8')) # –ö–ª—é—á –∫–æ–¥–∏—Ä—É–µ–º
        if data_bytes:
            try:
                data_str = data_bytes.decode('utf-8', errors='ignore') # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
                return json.loads(data_str)
            except json.JSONDecodeError as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON –≤ get_json –¥–ª—è –∫–ª—é—á–∞ '{key}': {e}. Raw value: {data_bytes[:50]}...", exc_info=True)
                return None
            except UnicodeDecodeError as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Unicode –≤ get_json –¥–ª—è –∫–ª—é—á–∞ '{key}': {e}. Raw value: {data_bytes[:50]}...", exc_info=True)
                return None
        return None

    async def set_json(self, key: str, value: dict, ex: Optional[int] = None):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç 'redis_raw' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–π—Ç–æ–≤.
        """
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON-—Å—Ç—Ä–æ–∫—É, –∑–∞—Ç–µ–º –∫–æ–¥–∏—Ä—É–µ–º –≤ UTF-8 –±–∞–π—Ç—ã
        json_value_bytes = json.dumps(value, default=str).encode('utf-8')
        await self.redis_raw.set(key.encode('utf-8'), json_value_bytes, ex=ex) # –ö–ª—é—á –∫–æ–¥–∏—Ä—É–µ–º

    async def set(self, key: str, value: Any, ex: Optional[int] = None):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∏–ª–∏ –±–∏–Ω–∞—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É."""
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        value_bytes = value.encode('utf-8') if isinstance(value, str) else value
        return await self.redis_raw.set(key.encode('utf-8'), value_bytes, ex=ex)

    async def get(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –µ–≥–æ."""
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
        result_bytes = await self.redis_raw.get(key.encode('utf-8')) # –ö–ª—é—á –∫–æ–¥–∏—Ä—É–µ–º
        if result_bytes is None:
            return None
        return result_bytes.decode('utf-8', errors='ignore')

    async def delete(self, *keys: str) -> int:
        """–£–¥–∞–ª—è–µ—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π."""
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return 0 # –ò—Å–ø–æ–ª—å–∑—É–µ–º redis_raw
        encoded_keys = [k.encode('utf-8') for k in keys] # –ö–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á–∏
        return await self.redis_raw.delete(*encoded_keys) 

    async def expire(self, key: str, ttl: int):
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return # –ò—Å–ø–æ–ª—å–∑—É–µ–º redis_raw
        await self.redis_raw.expire(key.encode('utf-8'), ttl) # –ö–ª—é—á –∫–æ–¥–∏—Ä—É–µ–º

    async def exists(self, *keys: str) -> int:
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return 0 # –ò—Å–ø–æ–ª—å–∑—É–µ–º redis_raw
        encoded_keys = [k.encode('utf-8') for k in keys] # –ö–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á–∏
        return await self.redis_raw.exists(*encoded_keys)

    async def keys(self, pattern: str = "*") -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—É.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç self.redis_raw –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å UnicodeDecodeError.
        """
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return []
        raw_keys = await self.redis_raw.keys(pattern.encode('utf-8')) # –ü–∞—Ç—Ç–µ—Ä–Ω —Ç–æ–∂–µ –∫–æ–¥–∏—Ä—É–µ–º
        return [k.decode('utf-8', errors='ignore') for k in raw_keys]
        
    async def mget(self, keys: List[str]) -> List[Optional[str]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç self.redis_raw –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –≤—Ä—É—á–Ω—É—é.
        """
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return []
        encoded_keys = [k.encode('utf-8') for k in keys]
        raw_values = await self.redis_raw.mget(encoded_keys)      
        return [v.decode('utf-8', errors='ignore') if v is not None else None for v in raw_values]
    
    async def scan_iter(self, pattern: str = "*", count: Optional[int] = None):
        """
        –ò—Ç–µ—Ä–∏—Ä—É–µ—Ç –ø–æ –∫–ª—é—á–∞–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω—É.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç self.redis_raw –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –≤—Ä—É—á–Ω—É—é.
        """
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        async for key_bytes in self.redis_raw.scan_iter(pattern.encode('utf-8'), count=count): # –ü–∞—Ç—Ç–µ—Ä–Ω –∫–æ–¥–∏—Ä—É–µ–º
            yield key_bytes.decode('utf-8', errors='ignore')

    async def rpush(self, key: str, *values: Any):
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        encoded_values = [v.encode('utf-8') if isinstance(v, str) else v for v in values]
        return await self.redis_raw.rpush(key.encode('utf-8'), *encoded_values)

    async def lrange(self, key: str, start: int, stop: int) -> List[str]:
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return []
        raw_list = await self.redis_raw.lrange(key.encode('utf-8'), start, stop)
        return [item.decode('utf-8', errors='ignore') for item in raw_list]

    async def ltrim(self, key: str, start: int, stop: int):
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        await self.redis_raw.ltrim(key.encode('utf-8'), start, stop)

    async def llen(self, key: str) -> int:
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return 0
        return await self.redis_raw.llen(key.encode('utf-8'))
        
    async def hget(self, name: str, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ö—ç—à–∞ –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –µ–≥–æ."""
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
        result_bytes = await self.redis_raw.hget(name.encode('utf-8'), key.encode('utf-8'))
        if result_bytes is None:
            return None
        return result_bytes.decode('utf-8', errors='ignore')

    async def hset(self, name: str, key: str, value: Any):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ö—ç—à–µ."""
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        value_bytes = value.encode('utf-8') if isinstance(value, str) else value
        return await self.redis_raw.hset(name.encode('utf-8'), key.encode('utf-8'), value_bytes)

    async def hdel(self, name: str, *keys: str):
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        encoded_keys = [k.encode('utf-8') for k in keys]
        return await self.redis_raw.hdel(name.encode('utf-8'), *encoded_keys)

    async def hgetall(self, name: str) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ö—ç—à–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Å—ã—Ä–æ–π –∫–ª–∏–µ–Ω—Ç –∏ –¥–µ–∫–æ–¥–∏—Ä—É—è –≤—Ä—É—á–Ω—É—é.
        """
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return {}
        raw_data: Dict[bytes, bytes] = await self.redis_raw.hgetall(name.encode('utf-8'))
        return {k.decode('utf-8', errors='ignore'): v.decode('utf-8', errors='ignore') for k, v in raw_data.items()}

    async def hincrby(self, name: str, key: str, amount: int = 1) -> int:
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return 0
        return await self.redis_raw.hincrby(name.encode('utf-8'), key.encode('utf-8'), amount)

    async def hmget(self, name: str, keys: List[str]) -> List[Optional[str]]:
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return []
        encoded_keys = [k.encode('utf-8') for k in keys]
        raw_values = await self.redis_raw.hmget(name.encode('utf-8'), encoded_keys)
        return [v.decode('utf-8', errors='ignore') if v is not None else None for v in raw_values]

    async def hincrby_raw(self, name: str, key: Union[str, bytes], amount: int = 1) -> int:
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return 0
        key_bytes = key.encode('utf-8') if isinstance(key, str) else key
        name_bytes = name.encode('utf-8') if isinstance(name, str) else name
        return await self.redis_raw.hincrby(name_bytes, key_bytes, amount)

    def pipeline(self) -> redis_asyncio.client.Pipeline:
        if self.redis is None:
            self.logger.critical("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω.")
            raise RuntimeError("Redis client not connected. Call connect() first.")
        return self.redis.pipeline()

    def pipeline_raw(self) -> redis_asyncio.client.Pipeline:
        if self.redis_raw is None:
            self.logger.critical("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω.")
            raise RuntimeError("Raw Redis client not connected. Call connect() first.")
        return self.redis_raw.pipeline()

    async def publish(self, channel: str, message: Any):
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        message_bytes = message.encode('utf-8') if isinstance(message, str) else message
        return await self.redis_raw.publish(channel.encode('utf-8'), message_bytes)

    async def subscribe(self, channel: str):
        if self.redis_raw is None:
            self.logger.critical("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.")
            raise RuntimeError("Raw Redis client not connected. Call connect() first.")
        pubsub = self.redis_raw.pubsub()
        await pubsub.subscribe(channel.encode('utf-8'))
        return pubsub
    
    async def hsetall_msgpack(self, name: str, mapping: Dict[str, bytes]) -> bool: # üî• –ò–ó–ú–ï–ù–ï–ù–ê –°–ò–ì–ù–ê–¢–£–†–ê: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–µ–π –≤ Redis HASH. –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ MsgPack –±–∞–π—Ç–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.
        """
        if self.redis_raw is None:
            self.logger.error(f"‚ùå Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è hsetall_msgpack (–∫–ª—é—á: {name}). –í–æ–∑–≤—Ä–∞—â–∞–µ–º False.")
            return False # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False

        try:
            msgpack_mapping_bytes = {k.encode('utf-8'): v for k, v in mapping.items()} 
            result = await self.redis_raw.hset(name.encode('utf-8'), mapping=msgpack_mapping_bytes)
            # hset –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π (int >= 0).
            # –õ—é–±–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ >= 0 –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫.
            self.logger.debug(f"‚úÖ hsetall_msgpack –¥–ª—è '{name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç Redis (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π): {result}")
            return True # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è Redis –ø—Ä–æ—à–ª–∞ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        except Exception as e:
            self.logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ hsetall_msgpack –¥–ª—è '{name}': {e}", exc_info=True)
            return False # üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º False –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏

    async def set_msgpack(self, key: str, value: bytes, ex: Optional[int] = None) -> bool: # üî• –ò–ó–ú–ï–ù–ï–ù–ê –°–ò–ì–ù–ê–¢–£–†–ê: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç bool
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis STRING. –ó–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ MsgPack –±–∞–π—Ç–æ–≤.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç self.redis_raw –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–π—Ç–∞–º–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ (–∏–ª–∏ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω).
        """
        if self.redis_raw is None:
            self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è set_msgpack.");
            return False

        try:
            await self.redis_raw.set(key.encode('utf-8'), value, ex=ex)
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ MsgPack –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞ '{key}': {e}", exc_info=True)
            return False


    async def get_msgpack(self, key: str) -> Optional[Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis STRING, –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É—è –µ–≥–æ –∏–∑ MsgPack.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç self.redis_raw –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤.
        """
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
        packed_value = await self.redis_raw.get(key.encode('utf-8'))
        if packed_value:
            try:
                return msgpack.loads(packed_value, raw=False)
            except (msgpack.exceptions.ExtraData, msgpack.exceptions.UnpackValueError) as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MsgPack –≤ get_msgpack –¥–ª—è –∫–ª—é—á–∞ '{key}': {e}")
                return None
        return None


    async def hgetall_msgpack(self, name: str) -> Optional[Dict[str, Any]]:
            """
            –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis HASH, –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ MsgPack.
            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç self.redis_raw –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–π—Ç–æ–≤.
            """
            if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
            raw_data = await self.redis_raw.hgetall(name.encode('utf-8')) # <- –í–æ—Ç –≤—ã–∑–æ–≤ hgetall –¥–ª—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if raw_data:
                try:
                    return {k.decode('utf-8'): msgpack.loads(v, raw=False) for k, v in raw_data.items()}
                except (msgpack.exceptions.ExtraData, msgpack.exceptions.UnpackValueError) as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MsgPack –≤ hgetall_msgpack –¥–ª—è –∫–ª—é—á–∞ '{name}': {e}")
                    return None
            return None
        
        
    async def close(self):
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Redis.
        """
        if self.redis:
            await self.redis.close()
            self.logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
        if self.redis_raw:
            await self.redis_raw.close()
            self.logger.info("‚úÖ –°—ã—Ä–æ–µ Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
        self.redis = None
        self.redis_raw = None
