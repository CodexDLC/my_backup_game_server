# game_server/Logic/InfrastructureLogic/app_cache/central_redis_client.py

import json
import logging
from typing import Any, Dict, List, Optional, Union
import uuid # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º Union
import msgpack
import redis.asyncio as redis_asyncio

from game_server.config.settings_core import REDIS_PASSWORD, REDIS_POOL_SIZE, REDIS_URL


class CentralRedisClient:
    """
    –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º Redis-—Å–µ—Ä–≤–µ—Ä–æ–º Backend'–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç redis-py (–≤–µ—Ä—Å–∏–∏ 5+) –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Redis.
    –≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—É–ª–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π.
    """
    def __init__(
        self,
        redis_url: str = REDIS_URL,
        max_connections: int = REDIS_POOL_SIZE,
        redis_password: str = REDIS_PASSWORD
    ):
        self.logger = logging.getLogger("central_redis_client")
        self._redis_url = redis_url
        self._max_connections = max_connections
        self._redis_password = redis_password
        self.redis: Optional[redis_asyncio.Redis] = None
        self.redis_raw: Optional[redis_asyncio.Redis] = None
        self.logger.info("‚ú® CentralRedisClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    async def connect(self):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–ø—É–ª) —Å Redis.
        """
        if self.redis is None:
            self.logger.info(f"üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º—É Redis: {self._redis_url}...")
            try:
                self.redis = redis_asyncio.from_url(
                    self._redis_url,
                    password=self._redis_password,
                    decode_responses=True,
                    socket_timeout=5,
                    socket_connect_timeout=5,
                )
                self.redis_raw = redis_asyncio.from_url(
                    self._redis_url,
                    password=self._redis_password,
                    decode_responses=False,
                    socket_timeout=5,
                    socket_connect_timeout=5,
                )

                await self.redis.ping()
                await self.redis_raw.ping()
                self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–º—É Redis —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {self._redis_url}")
            except Exception as e:
                self.logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Redis: {e}", exc_info=True)
                raise
        else:
            self.logger.debug("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")

    async def hgetall_json(self, name: str) -> Optional[Dict[str, Any]]:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
        data = await self.redis.hgetall(name)
        if data:
            try:
                return {k: json.loads(v) for k, v in data.items()}
            except json.JSONDecodeError as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON –≤ hgetall_json –¥–ª—è –∫–ª—é—á–∞ '{name}': {e}")
                return None
        return None

    async def hsetall_json(self, name: str, mapping: Dict[str, Any]):        
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return

        def json_serializer(obj):
            if isinstance(obj, (bytes, str, int, float)):
                return obj
            if isinstance(obj, bool):
                return obj
            if isinstance(obj, (list, dict)):
                return obj
            if isinstance(obj, uuid.UUID): # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å UUID, —è–≤–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –µ–≥–æ
                return str(obj)
            # –ï—Å–ª–∏ –ø–æ–ª–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ None, json.dumps –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ null.
            # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –∑–¥–µ—Å—å.
            raise TypeError(f"Object of type {obj.__class__.__name__} is not JSON serializable")

        json_mapping = {k: json.dumps(v, default=json_serializer) for k, v in mapping.items()} # <-- –ò–ó–ú–ï–ù–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä
        
        await self.redis.hset(name, mapping=json_mapping)

    async def get_json(self, key: str) -> Optional[dict]:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
        data = await self.redis.get(key)
        if data:
            try:
                return json.loads(data)
            except json.JSONDecodeError as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON –≤ get_json –¥–ª—è –∫–ª—é—á–∞ '{key}': {e}")
                return None
        return None

    async def set_json(self, key: str, value: dict, ex: Optional[int] = None):
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        await self.redis.set(key, json.dumps(value, default=str), ex=ex)

    async def set(self, key: str, value: Any, ex: Optional[int] = None):
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        return await self.redis.set(key, value, ex=ex)

    async def get(self, key: str) -> Optional[str]:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
        return await self.redis.get(key)

    async def delete(self, *keys: str) -> int:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return 0
        return await self.redis.delete(*keys)

    async def expire(self, key: str, ttl: int):
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        await self.redis.expire(key, ttl)

    async def exists(self, *keys: str) -> int:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return 0
        return await self.redis.exists(*keys)

    async def keys(self, pattern: str = "*") -> List[str]:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return []
        return await self.redis.keys(pattern)
        
    async def mget(self, keys: List[str]) -> List[Optional[str]]:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return []
        return await self.redis.mget(keys)     
    
    async def scan_iter(self, pattern: str = "*", count: Optional[int] = None):
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        async for key in self.redis.scan_iter(pattern, count=count):
            yield key

    async def rpush(self, key: str, *values: Any):
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        return await self.redis.rpush(key, *values)

    async def lrange(self, key: str, start: int, stop: int) -> List[str]:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return []
        return await self.redis.lrange(key, start, stop)

    async def ltrim(self, key: str, start: int, stop: int):
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        await self.redis.ltrim(key, start, stop)

    async def llen(self, key: str) -> int:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return 0
        return await self.redis.llen(key)
        
    async def hget(self, name: str, key: str) -> Optional[str]:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
        return await self.redis.hget(name, key)

    async def hset(self, name: str, key: str, value: Any):
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        return await self.redis.hset(name, key, value)

    async def hdel(self, name: str, *keys: str):
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        return await self.redis.hdel(name, *keys)

    async def hgetall(self, name: str) -> Dict[str, str]:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return {}
        return await self.redis.hgetall(name)

    async def hincrby(self, name: str, key: str, amount: int = 1) -> int:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return 0
        return await self.redis.hincrby(name, key, amount)

    async def hmget(self, name: str, keys: List[str]) -> List[Optional[str]]:
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return []
        return await self.redis.hmget(name, keys)

    async def hgetall_raw(self, name: str) -> Dict[bytes, bytes]:
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return {}
        return await self.redis_raw.hgetall(name)

    async def hset_raw(self, name: str, key: Union[str, bytes], value: Union[str, bytes]):
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        key_bytes = key.encode('utf-8') if isinstance(key, str) else key
        value_bytes = value.encode('utf-8') if isinstance(value, str) else value
        return await self.redis_raw.hset(name, key_bytes, value_bytes)

    async def hincrby_raw(self, name: str, key: Union[str, bytes], amount: int = 1) -> int:
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return 0
        key_bytes = key.encode('utf-8') if isinstance(key, str) else key
        return await self.redis_raw.hincrby(name, key_bytes, amount)

    def pipeline(self) -> redis_asyncio.client.Pipeline:
        if self.redis is None:
            self.logger.critical("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω.")
            raise RuntimeError("Redis client not connected. Call connect() first.")
        return self.redis.pipeline()

    def pipeline_raw(self) -> redis_asyncio.client.Pipeline:
        if self.redis_raw is None:
            self.logger.critical("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø–∞–π–ø–ª–∞–π–Ω.")
            raise RuntimeError("Raw Redis client not connected. Call connect() first.")
        return self.redis_raw.pipeline()

    async def publish(self, channel: str, message: Any):
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        return await self.redis.publish(channel, message)

    async def subscribe(self, channel: str):
        if self.redis is None:
            self.logger.critical("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.")
            raise RuntimeError("Redis client not connected. Call connect() first.")
        pubsub = self.redis.pubsub()
        await pubsub.subscribe(channel)
        return pubsub
    async def hsetall_msgpack(self, name: str, mapping: Dict[str, bytes]): # <--- –ò–∑–º–µ–Ω–µ–Ω–æ: –û–∂–∏–¥–∞–µ–º Dict[str, bytes]
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤ Redis HASH. –ó–Ω–∞—á–µ–Ω–∏—è —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ MsgPack –±–∞–π—Ç–æ–≤.
        """
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        # –ö–ª—é—á–∏ –≤ –±–∞–π—Ç—ã, –∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ –±–∞–π—Ç—ã
        msgpack_mapping_bytes = {k.encode('utf-8'): v for k, v in mapping.items()} 
        await self.redis.hset(name, mapping=msgpack_mapping_bytes)

    async def hgetall_msgpack(self, name: str) -> Optional[Dict[str, Any]]: # <--- –ò–∑–º–µ–Ω–µ–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Any, —Ç.–∫. –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis HASH, –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ MsgPack.
        """
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
        raw_data = await self.redis_raw.hgetall(name)
        if raw_data:
            try:
                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫–∏, –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ MsgPack
                return {k.decode('utf-8'): msgpack.loads(v, raw=False) for k, v in raw_data.items()}
            except (msgpack.exceptions.ExtraData, msgpack.exceptions.UnpackValueError) as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MsgPack –≤ hgetall_msgpack –¥–ª—è –∫–ª—é—á–∞ '{name}': {e}")
                return None
        return None

    async def set_msgpack(self, key: str, value: bytes, ex: Optional[int] = None): # <--- –ò–∑–º–µ–Ω–µ–Ω–æ: –û–∂–∏–¥–∞–µ–º bytes
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ Redis STRING. –ó–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ MsgPack –±–∞–π—Ç–æ–≤.
        """
        if self.redis is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return
        await self.redis.set(key, value, ex=ex) # value —É–∂–µ bytes

    async def get_msgpack(self, key: str) -> Optional[Any]: # <--- –ò–∑–º–µ–Ω–µ–Ω–æ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º Any
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Redis STRING, –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É—è –µ–≥–æ –∏–∑ MsgPack.
        """
        if self.redis_raw is None: self.logger.error("Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å—ã—Ä–æ–µ) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ."); return None
        packed_value = await self.redis_raw.get(key)
        if packed_value:
            try:
                return msgpack.loads(packed_value, raw=False)
            except (msgpack.exceptions.ExtraData, msgpack.exceptions.UnpackValueError) as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MsgPack –≤ get_msgpack –¥–ª—è –∫–ª—é—á–∞ '{key}': {e}")
                return None
        return None

    async def close(self):
        if self.redis:
            await self.redis.close()
            self.logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
        if self.redis_raw:
            await self.redis_raw.close()
            self.logger.info("‚úÖ –°—ã—Ä–æ–µ Redis-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
        self.redis = None
        self.redis_raw = None