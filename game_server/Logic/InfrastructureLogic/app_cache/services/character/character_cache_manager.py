# game_server/Logic/InfrastructureLogic/app_cache/services/character/character_cache_manager.py

import logging
import json
from typing import Any, Dict, Optional

from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.config.settings.redis_setting import DEFAULT_TTL_CHARACTER_SNAPSHOT_OFFLINE, DEFAULT_TTL_CHARACTER_SNAPSHOT_ONLINE
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_character_cache import ICharacterCacheManager

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
from game_server.config.constants.redis_key.character_keys import (
    KEY_CHARACTER_DATA,
    FIELD_CHARACTER_SNAPSHOT,
    KEY_WORLD_STATS,
    FIELD_CHARACTER_POOL_AVAILABLE
)

logger = logging.getLogger(__name__)


class CharacterCacheManager(ICharacterCacheManager):
    """
    –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ü–ï–†–°–û–ù–ê–ñ–ï–ô –≤ Redis.
    –û–ø–µ—Ä–∏—Ä—É–µ—Ç Hash-–æ–±—ä–µ–∫—Ç–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –º–∏—Ä–∞.
    """
    def __init__(self, redis_client: CentralRedisClient):
        self.redis = redis_client
        logger.info("‚úÖ CharacterCacheManager (v2) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ---

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç account_id –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª—é—á–∞
    async def get_character_snapshot(self, account_id: str, character_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ª–µ–ø–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –µ–≥–æ Hash-–æ–±—ä–µ–∫—Ç–∞."""
        key = KEY_CHARACTER_DATA.format(account_id=account_id, character_id=character_id)
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è 'snapshot' –∏–∑ Hash'–∞
        snapshot_str = await self.redis.hget(key, FIELD_CHARACTER_SNAPSHOT)
        if snapshot_str:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Å–Ω–∞–ø—à–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} (–∞–∫–∫–∞—É–Ω—Ç {account_id}) –∏–∑ Redis.")
            return json.loads(snapshot_str)
        
        logger.debug(f"–°–Ω–∞–ø—à–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} (–∞–∫–∫–∞—É–Ω—Ç {account_id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis.")
        return None

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç account_id –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å HSET
    async def set_character_snapshot(self, account_id: str, character_id: str, snapshot_data: Dict[str, Any], is_online: bool = True):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ª–µ–ø–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –ø–æ–ª–µ 'snapshot' –µ–≥–æ Hash-–æ–±—ä–µ–∫—Ç–∞."""
        key = KEY_CHARACTER_DATA.format(account_id=account_id, character_id=character_id)
        value = json.dumps(snapshot_data)
        await self.redis.hset(key, FIELD_CHARACTER_SNAPSHOT, value)

        ttl = DEFAULT_TTL_CHARACTER_SNAPSHOT_ONLINE if is_online else DEFAULT_TTL_CHARACTER_SNAPSHOT_OFFLINE
        if ttl is not None:
            await self.redis.expire(key, ttl)
        logger.debug(f"–°–Ω–∞–ø—à–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ Redis —Å TTL={ttl}.")

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç account_id
    async def delete_character_snapshot(self, account_id: str, character_id: str):
        """–£–¥–∞–ª—è–µ—Ç –≤–µ—Å—å Hash-–æ–±—ä–µ–∫—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        key = KEY_CHARACTER_DATA.format(account_id=account_id, character_id=character_id)
        await self.redis.delete(key)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} (–≤–µ—Å—å Hash) —É–¥–∞–ª–µ–Ω—ã –∏–∑ Redis.")

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç account_id
    async def update_character_snapshot_ttl(self, account_id: str, character_id: str, is_online: bool = True):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç TTL –¥–ª—è –≤—Å–µ–≥–æ Hash-–æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        key = KEY_CHARACTER_DATA.format(account_id=account_id, character_id=character_id)
        ttl = DEFAULT_TTL_CHARACTER_SNAPSHOT_ONLINE if is_online else DEFAULT_TTL_CHARACTER_SNAPSHOT_OFFLINE
        if ttl is not None and await self.redis.exists(key):
            await self.redis.expire(key, ttl)
            logger.debug(f"TTL –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {ttl}.")

    # --- üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –£–î–ê–õ–ï–ù–´ ---
    # –õ–æ–≥–∏–∫–∞ get_character_id_by_discord_id, set_character_id_for_discord_id
    # –∏ delete_character_id_for_discord_id –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞
    # –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π AccountCacheManager.

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π ---

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–ª–µ–º –≤ Hash'–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ HINCRBY
    async def decrement_pool_count(self) -> int:
        """–£–º–µ–Ω—å—à–∞–µ—Ç –Ω–∞ 1 —Å—á–µ—Ç—á–∏–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ø—É–ª–µ."""
        new_count = await self.redis.hincrby(KEY_WORLD_STATS, FIELD_CHARACTER_POOL_AVAILABLE, -1)
        logger.info(f"–°—á–µ—Ç—á–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ø—É–ª–µ —É–º–µ–Ω—å—à–µ–Ω. –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_count}")
        return new_count

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–ª–µ–º –≤ Hash'–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ HGET
    async def get_pool_count(self) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π."""
        count = await self.redis.hget(KEY_WORLD_STATS, FIELD_CHARACTER_POOL_AVAILABLE)
        return int(count) if count else 0