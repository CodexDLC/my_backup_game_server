# game_server/Logic/InfrastructureLogic/app_cache/services/task_queue/redis_batch_store.py

import inject
import msgpack
# import json # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –≤—Å–µ –≤ MsgPack
import logging
from typing import Dict, Any, List, Optional, Union
from abc import ABC, abstractmethod

from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.config.logging.logging_setup import app_logger as logger
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_redis_batch_store import IRedisBatchStore


class RedisBatchStore(IRedisBatchStore):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—á–µ–π –≤ Redis.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Redis HASH –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è, —Å–µ—Ä–∏–∞–ª–∏–∑—É—è –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è —Å MsgPack.
    """
    @inject.autoparams()
    def __init__(self, redis_client: CentralRedisClient, logger: logging.Logger):
        self.redis = redis_client
        self.logger = logger
        self.logger.info("‚úÖ RedisBatchStore –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def save_batch(self, key_template: str, batch_id: str, batch_data: Dict[str, Any], ttl_seconds: int) -> bool:
        redis_key = key_template.format(batch_id=batch_id)

        try:
            async with self.redis.pipeline_raw() as pipe:
                msgpack_mapping_bytes = {}
                for field, value in batch_data.items():
                    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ MsgPack
                    # –î–æ–±–∞–≤–ª—è–µ–º default=str –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ UUID –∏ datetime, –µ—Å–ª–∏ –æ–Ω–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è
                    value_bytes = msgpack.packb(value, use_bin_type=True, default=str)
                    msgpack_mapping_bytes[field.encode('utf-8')] = value_bytes

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º hset —Å mapping –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –º–∞—Å—Å–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                await pipe.hset(redis_key.encode('utf-8'), mapping=msgpack_mapping_bytes) # –ö–ª—é—á —Ö—ç—à–∞ —Ç–æ–∂–µ –∫–æ–¥–∏—Ä—É–µ–º

                pipe.expire(redis_key.encode('utf-8'), ttl_seconds)
                await pipe.execute()

            logger.debug(f"–ë–∞—Ç—á '{batch_id}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Redis (HASH + MsgPack) –ø–æ –∫–ª—é—á—É '{redis_key}'. TTL: {ttl_seconds}s.")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞—Ç—á–∞ '{batch_id}' –≤ Redis (MsgPack): {e}", exc_info=True)
            return False

    async def load_batch(self, key_template: str, batch_id: str) -> Optional[Dict[str, Any]]:
        redis_key = key_template.format(batch_id=batch_id)
        try:
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º hgetall_msgpack, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            loaded_data = await self.redis.hgetall_msgpack(redis_key)
            
            if not loaded_data:
                logger.debug(f"–ë–∞—Ç—á '{batch_id}' –ø–æ –∫–ª—é—á—É '{redis_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç –≤ Redis.")
                return None

            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ—Å–∫–æ–ª—å–∫—É hgetall_msgpack —É–∂–µ –≤—Å–µ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–ª, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            logger.debug(f"–ë–∞—Ç—á '{batch_id}' –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Redis (HASH + MsgPack) –ø–æ –∫–ª—é—á—É '{redis_key}'.")
            return loaded_data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞—Ç—á–∞ '{batch_id}' –∏–∑ Redis (MsgPack): {e}", exc_info=True)
            raise # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–∞–∫ –±—ã–ª–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ

    async def increment_field(self, key_template: str, batch_id: str, field: str, increment_by: int = 1) -> Optional[int]:
        redis_key = key_template.format(batch_id=batch_id)
        try:
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º redis_raw.hincrby
            # hincrby —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–π—Ç–∞–º–∏, field –∏ key –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω—ã
            return await self.redis.redis_raw.hincrby(redis_key.encode('utf-8'), field.encode('utf-8'), increment_by)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ hincrby –¥–ª—è –∫–ª—é—á–∞ '{redis_key}', –ø–æ–ª—è '{field}': {e}", exc_info=True)
            raise

    async def update_fields(self, key_template: str, batch_id: str, fields: Dict[str, Any], ttl_seconds: Optional[int] = None) -> bool:
        redis_key = key_template.format(batch_id=batch_id)
        try:
            async with self.redis.pipeline_raw() as pipe:
                msgpack_mapping_bytes = {}
                for field, value in fields.items():
                    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è –≤ MsgPack
                    value_bytes = msgpack.packb(value, use_bin_type=True, default=str)
                    msgpack_mapping_bytes[field.encode('utf-8')] = value_bytes
                
                await pipe.hset(redis_key.encode('utf-8'), mapping=msgpack_mapping_bytes) # –ò—Å–ø–æ–ª—å–∑—É–µ–º hset —Å mapping

                if ttl_seconds is not None:
                    pipe.expire(redis_key.encode('utf-8'), ttl_seconds)

                await pipe.execute()

            logger.debug(f"–ü–æ–ª—è –±–∞—Ç—á–∞ '{batch_id}' –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Redis (MsgPack): {redis_key}. –ü–æ–ª—è: {list(fields.keys())}.")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π –±–∞—Ç—á–∞ '{batch_id}' –≤ Redis (MsgPack): {e}", exc_info=True)
            return False

    async def delete_batch(self, key_template: str, batch_id: str) -> bool:
        redis_key = key_template.format(batch_id=batch_id)
        try:
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º redis_raw.delete
            result = await self.redis.redis_raw.delete(redis_key.encode('utf-8'))
            if result > 0:
                logger.debug(f"–ë–∞—Ç—á '{batch_id}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Redis: {redis_key}.")
                return True
            logger.debug(f"–ë–∞—Ç—á '{batch_id}' –ø–æ –∫–ª—é—á—É '{redis_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞—Ç—á–∞ '{batch_id}' –∏–∑ Redis: {e}", exc_info=True)
            return False