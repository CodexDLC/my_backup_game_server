# game_server/Logic/InfrastructureLogic/app_cache/services/character_cache_manager.py

import logging
from typing import Any, Dict, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Redis —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import central_redis_client
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –∏–º–ø–æ—Ä—Ç CentralRedisClient –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ __init__
# from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient 

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–ª—é—á–µ–π –∏ TTL –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ Redis
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_constants import (
    KEY_PREFIX_CHARACTER_SNAPSHOT,
    KEY_PREFIX_ACCOUNT_BINDINGS,
    DEFAULT_TTL_CHARACTER_SNAPSHOT_ONLINE,
    DEFAULT_TTL_CHARACTER_SNAPSHOT_OFFLINE,
    DEFAULT_TTL_ACCOUNT_BINDING
)

logger = logging.getLogger(__name__)

class CharacterCacheManager:
    """
    –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ Redis.
    –û–ø–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–º–∏ —Å–ª–µ–ø–∫–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –ø—Ä–∏–≤—è–∑–∫–∞–º–∏ Discord ID –∫ Character ID.
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–ø—Ä–æ—â–∞–µ–º __init__. –û–Ω –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –∫–ª–∏–µ–Ω—Ç.
    # –û–Ω –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π central_redis_client.
    def __init__(self):
        self.redis = central_redis_client
        logger.info("‚úÖ CharacterCacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–ø–∫–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π ---
    async def get_character_snapshot(self, character_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ª–µ–ø–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∫—ç—à–∞ Redis.
        –ö–ª—é—á: character:{character_id}
        """
        key = f"{KEY_PREFIX_CHARACTER_SNAPSHOT}:{character_id}"
        snapshot = await self.redis.get_json(key)
        if snapshot:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Å–Ω–∞–ø—à–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –∏–∑ Redis.")
        else:
            logger.debug(f"–°–Ω–∞–ø—à–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis.")
        return snapshot

    async def set_character_snapshot(self, character_id: str, snapshot_data: Dict[str, Any], is_online: bool = True):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ª–µ–ø–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫—ç—à–µ Redis.
        TTL —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        –ö–ª—é—á: character:{character_id}
        """
        key = f"{KEY_PREFIX_CHARACTER_SNAPSHOT}:{character_id}"
        await self.redis.set_json(key, snapshot_data)
        
        ttl = DEFAULT_TTL_CHARACTER_SNAPSHOT_ONLINE if is_online else DEFAULT_TTL_CHARACTER_SNAPSHOT_OFFLINE
        if ttl is not None:
            await self.redis.expire(key, ttl)
        logger.debug(f"–°–Ω–∞–ø—à–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ Redis —Å TTL={ttl} (online={is_online}).")

    async def delete_character_snapshot(self, character_id: str):
        """
        –£–¥–∞–ª—è–µ—Ç —Å–ª–µ–ø–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –∫—ç—à–∞ Redis.
        –ö–ª—é—á: character:{character_id}
        """
        key = f"{KEY_PREFIX_CHARACTER_SNAPSHOT}:{character_id}"
        await self.redis.delete(key)
        logger.info(f"–°–Ω–∞–ø—à–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} —É–¥–∞–ª–µ–Ω –∏–∑ Redis.")

    async def update_character_snapshot_ttl(self, character_id: str, is_online: bool = True):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç TTL –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ª–µ–ø–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫—ç—à–∞ "–∂–∏–≤—ã–º", –ø–æ–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ–Ω–ª–∞–π–Ω.
        """
        key = f"{KEY_PREFIX_CHARACTER_SNAPSHOT}:{character_id}"
        ttl = DEFAULT_TTL_CHARACTER_SNAPSHOT_ONLINE if is_online else DEFAULT_TTL_CHARACTER_SNAPSHOT_OFFLINE
        if ttl is not None and await self.redis.exists(key):
            await self.redis.expire(key, ttl)
            logger.debug(f"TTL —Å–Ω–∞–ø—à–æ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ {ttl} (online={is_online}).")
        else:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å TTL —Å–Ω–∞–ø—à–æ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id} (–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ TTL None).")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∞–º–∏ Discord ID –∫ Character ID ---
    async def get_character_id_by_discord_id(self, discord_user_id: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç Character ID –ø–æ Discord User ID.
        –ö–ª—é—á: account_binding:discord:{discord_user_id}
        """
        key = f"{KEY_PREFIX_ACCOUNT_BINDINGS}:discord:{discord_user_id}"
        character_id = await self.redis.get(key)
        if character_id:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω Character ID {character_id} –¥–ª—è Discord User {discord_user_id}.")
        else:
            logger.debug(f"Character ID –¥–ª—è Discord User {discord_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return character_id

    async def set_character_id_for_discord_id(self, discord_user_id: str, character_id: str, ttl_seconds: Optional[int] = DEFAULT_TTL_ACCOUNT_BINDING):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É Discord User ID –∫ Character ID.
        –ö–ª—é—á: account_binding:discord:{discord_user_id}
        """
        key = f"{KEY_PREFIX_ACCOUNT_BINDINGS}:discord:{discord_user_id}"
        await self.redis.set(key, character_id)
        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.info(f"–ü—Ä–∏–≤—è–∑–∫–∞ Discord User {discord_user_id} –∫ Character {character_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å TTL={ttl_seconds}.")

    async def delete_character_id_for_discord_id(self, discord_user_id: str):
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É Discord User ID –∫ Character ID.
        """
        key = f"{KEY_PREFIX_ACCOUNT_BINDINGS}:discord:{discord_user_id}"
        await self.redis.delete(key)
        logger.info(f"–ü—Ä–∏–≤—è–∑–∫–∞ Discord User {discord_user_id} —É–¥–∞–ª–µ–Ω–∞.")


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Backend'–µ
character_cache_manager = CharacterCacheManager()