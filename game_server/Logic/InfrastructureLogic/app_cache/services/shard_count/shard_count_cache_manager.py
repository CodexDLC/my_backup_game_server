# game_server/Logic/InfrastructureLogic/app_cache/services/shard_count/shard_count_cache_manager.py
import logging
from typing import Optional

from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_shard_count_cache import IShardCountCacheManager
from game_server.config.logging.logging_setup import app_logger as logger

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
from game_server.config.constants.redis_key.shard_keys import KEY_SHARD_STATS, FIELD_SHARD_PLAYER_COUNT


class ShardCountCacheManager(IShardCountCacheManager):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ —à–∞—Ä–∞–¥–∞—Ö –≤ Redis.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Hash –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —à–∞—Ä–¥—É.
    """
    def __init__(self, redis_client: CentralRedisClient):
        self.redis = redis_client
        logger.info("‚úÖ ShardCountCacheManager (v2) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def get_shard_player_count(self, discord_guild_id: int) -> int:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞ –∏–∑ –ø–æ–ª—è –≤ Hash.
        """
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–ª—é—á–∞
        key = KEY_SHARD_STATS.format(discord_guild_id=discord_guild_id)
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ Hash
        count = await self.redis.hget(key, FIELD_SHARD_PLAYER_COUNT)
        if count:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} –∏–∑ Redis: {count}")
            return int(count)
        logger.debug(f"–°—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Redis, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 0.")
        return 0

    async def increment_shard_player_count(self, discord_guild_id: int) -> int:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞ –≤ –ø–æ–ª–µ Hash.
        """
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–ª—é—á–∞
        key = KEY_SHARD_STATS.format(discord_guild_id=discord_guild_id)
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤ Hash
        new_count = await self.redis.hincrby(key, FIELD_SHARD_PLAYER_COUNT, 1)
        logger.info(f"–°—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ: {new_count}")
        return new_count

    async def decrement_shard_player_count(self, discord_guild_id: int) -> int:
        """
        –ê—Ç–æ–º–∞—Ä–Ω–æ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞ –≤ –ø–æ–ª–µ Hash.
        """
        key = KEY_SHARD_STATS.format(discord_guild_id=discord_guild_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ–ª–µ–∑–Ω–æ–π, –Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –≤–Ω—É—Ç—Ä–∏ Hash
        current_count = await self.get_shard_player_count(discord_guild_id)
        if current_count <= 0:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ —à–∞—Ä–¥–∞ {discord_guild_id}, –Ω–æ –æ–Ω —É–∂–µ <= 0. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ 0.")
            return 0
        
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤ Hash
        new_count = await self.redis.hincrby(key, FIELD_SHARD_PLAYER_COUNT, -1)
        logger.info(f"–°—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} –¥–µ–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–æ: {new_count}")
        return new_count

    async def set_shard_player_count(self, discord_guild_id: int, count: int):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —à–∞—Ä–¥–∞ –≤ –ø–æ–ª–µ Hash.
        """
        key = KEY_SHARD_STATS.format(discord_guild_id=discord_guild_id)
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤ Hash
        await self.redis.hset(key, FIELD_SHARD_PLAYER_COUNT, count)
        logger.info(f"–°—á–µ—Ç—á–∏–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Redis –Ω–∞: {count}")

    async def delete_shard_player_count(self, discord_guild_id: int):
        """

        –£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤, –Ω–µ —Ç—Ä–æ–≥–∞—è –≤–µ—Å—å Hash —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        """
        key = KEY_SHARD_STATS.format(discord_guild_id=discord_guild_id)
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ –∏–∑ Hash
        await self.redis.hdel(key, FIELD_SHARD_PLAYER_COUNT)
        logger.info(f"–ü–æ–ª–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —à–∞—Ä–¥–∞ {discord_guild_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ Hash —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")