# game_server/Logic/InfrastructureLogic/app_cache/services/item_cache_manager.py

import logging
from typing import Any, Dict, Optional, List
import json 

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–ª–∏–µ–Ω—Ç Redis
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import central_redis_client

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–ª—é—á–µ–π –∏ TTL –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ Redis
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_constants import (
    KEY_PREFIX_ITEM_INSTANCE,
    DEFAULT_TTL_ITEM_INSTANCE_CACHE
)

logger = logging.getLogger(__name__)

class ItemCacheManager:
    """
    –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ Redis.
    –û–ø–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, item_instance:{item_uuid}).
    """
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–ø—Ä–æ—â–∞–µ–º __init__. –û–Ω –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π –∫–ª–∏–µ–Ω—Ç.
    # –û–Ω –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π central_redis_client.
    def __init__(self):
        self.redis = central_redis_client
        logger.info("‚úÖ ItemCacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def get_item_instance_data(self, item_uuid: str) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∫—ç—à–∞ Redis.
        –ö–ª—é—á: item_instance:{item_uuid}
        """
        key = f"{KEY_PREFIX_ITEM_INSTANCE}:{item_uuid}"
        item_data = await self.redis.get_json(key)
        if item_data:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_uuid} –∏–∑ Redis.")
        else:
            logger.debug(f"–î–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Redis.")
        return item_data

    async def set_item_instance_data(self, item_uuid: str, item_data: Dict[str, Any], ttl_seconds: Optional[int] = DEFAULT_TTL_ITEM_INSTANCE_CACHE):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –∫—ç—à–µ Redis.
        –ö–ª—é—á: item_instance:{item_uuid}
        """
        key = f"{KEY_PREFIX_ITEM_INSTANCE}:{item_uuid}"
        await self.redis.set_json(key, item_data)
        
        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.debug(f"–î–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_uuid} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Redis —Å TTL={ttl_seconds}.")

    async def delete_item_instance_data(self, item_uuid: str):
        """
        –£–¥–∞–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∫—ç—à–∞ Redis.
        –ö–ª—é—á: item_instance:{item_uuid}
        """
        key = f"{KEY_PREFIX_ITEM_INSTANCE}:{item_uuid}"
        await self.redis.delete(key)
        logger.info(f"–î–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_uuid} —É–¥–∞–ª–µ–Ω—ã –∏–∑ Redis.")

    async def get_multiple_item_instances_data(self, item_uuids: List[str]) -> Dict[str, Optional[Dict[str, Any]]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å.
        """
        keys = [f"{KEY_PREFIX_ITEM_INSTANCE}:{uuid}" for uuid in item_uuids]
        results = await self.redis.mget(keys)

        items_map = {}
        for i, data in enumerate(results):
            if data:
                try:
                    items_map[item_uuids[i]] = json.loads(data)
                except json.JSONDecodeError:
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è item_uuid: {item_uuids[i]}. –î–∞–Ω–Ω—ã–µ: {data}")
                    items_map[item_uuids[i]] = None
            else:
                items_map[item_uuids[i]] = None
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(items_map)} –∏–∑ {len(item_uuids)} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return items_map


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Backend'–µ
item_cache_manager = ItemCacheManager()