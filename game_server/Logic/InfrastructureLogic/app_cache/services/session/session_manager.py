# game_server/Logic/InfrastructureLogic/app_cache/services/session/session_manager.py

import logging

import inject
from game_server.config.logging.logging_setup import app_logger as logger
from typing import Optional

from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_session_cache import ISessionManager
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –Ω–æ–≤–æ–≥–æ, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from game_server.config.constants.redis_key.session_keys import KEY_SESSION, SESSION_TTL_SECONDS


class RedisSessionManager(ISessionManager):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π, –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è Redis –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.
    """
    @inject.autoparams()
    def __init__(self, redis_client: CentralRedisClient, logger: logging.Logger):
        self.redis_client = redis_client
        self.logger = logger
        self.logger.info(f"‚ú® {self.__class__.__name__} (v2) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def save_session(self, client_id: str, token: str) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ—Å—Å–∏—é –≤ Redis, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∏ ID –∫–ª–∏–µ–Ω—Ç–∞.
        """
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
        session_key = KEY_SESSION.format(token=token)
        await self.redis_client.set(
            key=session_key,
            value=client_id,
            ex=SESSION_TTL_SECONDS
        )
        logger.debug(f"–°–µ—Å—Å–∏—è –¥–ª—è client_id '{client_id}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: ...{token[-6:]}")


    async def get_player_id_from_session(self, token: str) -> Optional[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∫–ª–∏–µ–Ω—Ç–∞ (–∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –±–æ—Ç–∞) –∏–∑ Redis –ø–æ —Ç–æ–∫–µ–Ω—É —Å–µ—Å—Å–∏–∏.
        """
        if not token:
            return None

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
        session_key = KEY_SESSION.format(token=token)
        client_id_from_redis = await self.redis_client.get(key=session_key)

        if client_id_from_redis:
            logger.debug(f"–¢–æ–∫–µ–Ω ...{token[-6:]} —É—Å–ø–µ—à–Ω–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –¥–ª—è client_id '{client_id_from_redis}'.")
        else:
            logger.debug(f"–¢–æ–∫–µ–Ω ...{token[-6:]} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫.")

        return client_id_from_redis

    async def delete_player_session(self, token: str) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é –∏–∑ Redis.
        """
        if not token:
            return

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
        session_key = KEY_SESSION.format(token=token)
        deleted_count = await self.redis_client.delete(session_key)
        if deleted_count > 0:
            logger.debug(f"–°–µ—Å—Å–∏—è —Å —Ç–æ–∫–µ–Ω–æ–º ...{token[-6:]} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")