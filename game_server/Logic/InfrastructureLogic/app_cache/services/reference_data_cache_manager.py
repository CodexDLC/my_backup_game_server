# game_server/Logic/InfrastructureLogic/app_cache/redis_handler/reference_data_cache_manager.py

import json
import logging
from typing import Callable, Any, List, Optional
from sqlalchemy.ext.asyncio import AsyncSession
import redis.exceptions 

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
from game_server.Logic.ApplicationLogic.coordinator_generator.load_seeds.item_base_loader import ItemBaseLoader
from game_server.Logic.InfrastructureLogic.DataAccessLogic.manager.generators.data.ORM_background_stories_manager import BackgroundStoryManager
from game_server.Logic.InfrastructureLogic.DataAccessLogic.manager.generators.data.ORM_inventory_rule_generator import InventoryRuleGeneratorManager
from game_server.Logic.InfrastructureLogic.DataAccessLogic.manager.generators.data.ORM_personality_mager import PersonalityManager
from game_server.Logic.InfrastructureLogic.DataAccessLogic.manager.generators.data.ORM_skills_mager import SkillsManager
from game_server.Logic.InfrastructureLogic.DataAccessLogic.manager.generators.iten_templates_generator.ORM_materials import MaterialManager
from game_server.Logic.InfrastructureLogic.DataAccessLogic.manager.generators.iten_templates_generator.ORM_modifier_library import ModifierLibraryManager
from game_server.Logic.InfrastructureLogic.DataAccessLogic.manager.generators.iten_templates_generator.ORM_suffixes import SuffixManager
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import central_redis_client
# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_constants import (
    DEFAULT_TTL_STATIC_REF_DATA,
    REDIS_KEY_GENERATOR_BACKGROUND_STORIES,
    REDIS_KEY_GENERATOR_INVENTORY_RULES,
    REDIS_KEY_GENERATOR_ITEM_BASE,
    REDIS_KEY_GENERATOR_MATERIALS,
    REDIS_KEY_GENERATOR_MODIFIERS,
    REDIS_KEY_GENERATOR_PERSONALITIES,
    REDIS_KEY_GENERATOR_SKILLS,
    REDIS_KEY_GENERATOR_SUFFIXES, 
    # ... –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
)
# ... –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ...

logger = logging.getLogger(__name__)

class ReferenceDataCacheManager:
    def __init__(self, async_session_factory: Callable[[], AsyncSession]):
        self.async_session_factory = async_session_factory
        self.item_base_loader = ItemBaseLoader()
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–µ–ª–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç Redis —è–≤–Ω–æ–π, –∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö.
        # –¢–µ–ø–µ—Ä—å –∫–ª–∞—Å—Å —Ö—Ä–∞–Ω–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–∏–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è.
        self.redis = central_redis_client
        logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def _cache_data_as_hash(self, redis_key: str, data_list: List[Any], id_field: str, ttl_seconds: Optional[int] = 2592000): # DEFAULT_TTL_STATIC_REF_DATA):
        try:
            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º self.redis –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            await self.redis.delete(redis_key)
            # –£–¥–∞–ª–µ–Ω—ã –ª–æ–≥–∏ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –¥–µ—Ç–∞–ª—å

            if not data_list:
                logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª—é—á–∞ Redis: {redis_key}. –ö–ª—é—á –±—ã–ª —É–¥–∞–ª–µ–Ω –∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ HSET –Ω–µ –±—É–¥–µ—Ç.")
                return

            # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º self.redis –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            async with self.redis.pipeline() as pipe:
                cached_count = 0
                for item in data_list:
                    try:
                        if isinstance(item, dict):
                            item_dict = item
                        else:
                            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ item –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç __table__.columns
                            item_dict = {c.name: getattr(item, c.name) for c in item.__table__.columns}

                        item_id = item_dict.get(id_field)
                        if item_id is None:
                            logger.error(f"–û–±—ä–µ–∫—Ç –±–µ–∑ –ø–æ–ª—è ID '{id_field}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–ª—é—á–∞: {redis_key}. –û–±—ä–µ–∫—Ç: {str(item_dict)[:200]}...")
                            continue

                        json_value = json.dumps(item_dict, default=str)
                        pipe.hset(redis_key, str(item_id), json_value)
                        cached_count += 1
                    except Exception as e:
                        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∫—ç—à–∞ Redis ({redis_key}, ID: {item_id}): {e}", exc_info=True)

                # –£–¥–∞–ª–µ–Ω—ã –ª–æ–≥–∏ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
                await pipe.execute()

            if ttl_seconds is not None:
                # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º self.redis –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                await self.redis.expire(redis_key, ttl_seconds)
                # –£–¥–∞–ª–µ–Ω –ª–æ–≥ –æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–µ TTL

            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∏—Ç–æ–≥–æ–≤—É—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–æ–∫—É
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ {cached_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ Redis –ø–æ–¥ –∫–ª—é—á–æ–º {redis_key} (TTL: {ttl_seconds}s).")

        except Exception as e: # –û–±—â–∏–π –±–ª–æ–∫ –¥–ª—è RedisError –∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Redis –¥–ª—è –∫–ª—é—á–∞ {redis_key}: {e}", exc_info=True)


    # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (`cache_item_data_from_db`, `cache_all_reference_data` –∏ —Ç.–¥.)
    # –æ—Å—Ç–∞—é—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –≤—ã–∑—ã–≤–∞—é—Ç `_cache_data_as_hash`, 
    # –∫–æ—Ç–æ—Ä—ã–π –º—ã —É–∂–µ –∏—Å–ø—Ä–∞–≤–∏–ª–∏.

    async def cache_item_data_from_db(self):
        logger.info("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –ë–î...")
        async with self.async_session_factory() as session:
            materials_data = await session.run_sync(lambda sync_session: MaterialManager(sync_session).get_all_materials())
            await self._cache_data_as_hash(REDIS_KEY_GENERATOR_MATERIALS, materials_data, 'material_code')
            
            suffixes_data = await session.run_sync(lambda sync_session: SuffixManager(sync_session).get_all_suffixes())
            await self._cache_data_as_hash(REDIS_KEY_GENERATOR_SUFFIXES, suffixes_data, 'suffix_code')
            
            modifiers_data = await session.run_sync(lambda sync_session: ModifierLibraryManager(sync_session).get_all_modifiers())
            await self._cache_data_as_hash(REDIS_KEY_GENERATOR_MODIFIERS, modifiers_data, 'modifier_code')
        logger.info("–î–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –ë–î –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã.")
    
    async def cache_skills(self):
        logger.info("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤...")
        async with self.async_session_factory() as session:
            data = await SkillsManager(session).get_all_skills()
            await self._cache_data_as_hash(REDIS_KEY_GENERATOR_SKILLS, data, 'skill_key')
        logger.info("–ù–∞–≤—ã–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã.")

    async def cache_background_stories(self):
        logger.info("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–π...")
        async with self.async_session_factory() as session:
            data = await BackgroundStoryManager(session).get_all_background_stories()
            await self._cache_data_as_hash(REDIS_KEY_GENERATOR_BACKGROUND_STORIES, data, 'story_id')
        logger.info("–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã.")

    async def cache_personalities(self):
        logger.info("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–µ–π...")
        async with self.async_session_factory() as session:
            data = await PersonalityManager(session).get_all_personalities()
            await self._cache_data_as_hash(REDIS_KEY_GENERATOR_PERSONALITIES, data, 'personality_id')
        logger.info("–õ–∏—á–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã.")

    async def cache_inventory_rules(self):
        logger.info("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–∞–≤–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        async with self.async_session_factory() as session:
            data = await InventoryRuleGeneratorManager(session).get_all()
            await self._cache_data_as_hash(REDIS_KEY_GENERATOR_INVENTORY_RULES, data, 'rule_key')
        logger.info("–®–∞–±–ª–æ–Ω—ã –ø—Ä–∞–≤–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã.")

    async def cache_all_reference_data(self) -> bool:
        logger.info("–ù–∞—á–∞–ª–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Redis.")
        try:
            item_bases_from_yaml = await self.item_base_loader.load_and_cache()
            if item_bases_from_yaml:
                await self._cache_data_as_hash(
                    redis_key=REDIS_KEY_GENERATOR_ITEM_BASE,
                    data_list=list(item_bases_from_yaml.values()),
                    id_field='sub_category_code',
                    ttl_seconds=DEFAULT_TTL_STATIC_REF_DATA
                )
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ {len(item_bases_from_yaml)} –∑–∞–ø–∏—Å–µ–π item_base –∏–∑ YAML –≤ Redis.")
            else:
                logger.warning("–î–∞–Ω–Ω—ã–µ item_base –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ YAML, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ item_base –ø—Ä–æ–ø—É—â–µ–Ω–æ.")

            await self.cache_skills()
            await self.cache_background_stories()
            await self.cache_personalities()
            await self.cache_inventory_rules()
            await self.cache_item_data_from_db() 
            
            logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Redis.")
            return True
        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
            return False

from game_server.Logic.InfrastructureLogic.DataAccessLogic.db_instance import AsyncSessionLocal
reference_data_cache_manager = ReferenceDataCacheManager(async_session_factory=AsyncSessionLocal)