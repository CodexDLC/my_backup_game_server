# game_server\Logic\InfrastructureLogic\app_cache\services\discord\backend_guild_config_manager.py
import json
import logging
from typing import Dict, Any, Optional, List

import inject

from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_backend_guild_config import IBackendGuildConfigManager
from game_server.config.constants.redis_key.discord_keys import KEY_GUILD_CONFIG_HASH
from game_server.config.logging.logging_setup import app_logger as logger


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–∞—Å–ª–µ–¥—É–µ–º—Å—è –æ—Ç IBackendGuildConfigManager
class BackendGuildConfigManager(IBackendGuildConfigManager):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ë–≠–ö–ï–ù–î–ê –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ø–∏–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏,
    –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç Discord-–±–æ—Ç–∞.
    """
    @inject.autoparams()
    def __init__(self, redis_client: CentralRedisClient, logger: logging.Logger, ttl: int = -1):
        self.redis_client = redis_client
        self.logger = logger
        self.ttl = ttl
        self.KEY_PATTERN = KEY_GUILD_CONFIG_HASH
        self.logger.info("‚ú® BackendGuildConfigManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        
    async def _get_key(self, guild_id: int) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª—é—á Redis –¥–ª—è Hash –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–∏–ª—å–¥–∏–∏."""
        return self.KEY_PATTERN.format(guild_id=guild_id)

    async def set_field(self, guild_id: int, field_name: str, data: Any) -> None:
        key = await self._get_key(guild_id)
        try:
            value = json.dumps(data) if isinstance(data, (dict, list)) else data
            await self.redis_client.hset(key, field_name, value)
            if self.ttl > 0:
                await self.redis_client.expire(key, self.ttl)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–ª—è '{field_name}' –≤ Hash '{key}': {e}", exc_info=True)
            raise

    async def get_field(self, guild_id: int, field_name: str) -> Optional[Any]:
        key = await self._get_key(guild_id)
        try:
            value = await self.redis_client.hget(key, field_name)
            if value:
                try:
                    return json.loads(value)
                except (json.JSONDecodeError, TypeError):
                    return value
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—è '{field_name}' –∏–∑ Hash '{key}': {e}", exc_info=True)
            raise
            
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    async def get_all_fields(self, guild_id: int) -> Optional[Dict[str, Any]]:
        key = await self._get_key(guild_id)
        try:
            all_data = await self.redis_client.hgetall(key)
            if not all_data:
                return None
            
            parsed_data = {}
            for field, value in all_data.items():
                try:
                    parsed_data[field] = json.loads(value)
                except (json.JSONDecodeError, TypeError):
                    parsed_data[field] = value
            return parsed_data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏–∑ Hash '{key}': {e}", exc_info=True)
            raise

    async def delete_fields(self, guild_id: int, fields: List[str]) -> None:
        if not fields:
            return
        key = await self._get_key(guild_id)
        try:
            await self.redis_client.hdel(key, *fields)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π {fields} –∏–∑ Hash '{key}': {e}", exc_info=True)
            raise

    async def delete_config(self, guild_id: int) -> None:
        key = await self._get_key(guild_id)
        try:
            await self.redis_client.delete(key)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ Hash '{key}': {e}", exc_info=True)
            raise