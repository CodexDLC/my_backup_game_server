# game_server/Logic/InfrastructureLogic/app_cache/services/reference_data_reader.py

import json
import random
from typing import Dict, Any, Optional, List

from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import central_redis_client 
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_constants import (
    REDIS_KEY_GENERATOR_ITEM_BASE,
    REDIS_KEY_GENERATOR_MATERIALS,
    REDIS_KEY_GENERATOR_SUFFIXES,
    REDIS_KEY_GENERATOR_MODIFIERS,
    REDIS_KEY_GENERATOR_SKILLS,
    REDIS_KEY_GENERATOR_BACKGROUND_STORIES,
    REDIS_KEY_GENERATOR_PERSONALITIES,
    REDIS_KEY_GENERATOR_INVENTORY_RULES,
)
from game_server.services.logging.logging_setup import logger

class ReferenceDataReader:
    """
    –ß–∏—Ç–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ Redis.
    """
    def __init__(self):
        self.redis = central_redis_client

    async def _get_full_hash_as_dict(self, redis_key: str) -> Dict[str, Any]:
        try:
            raw_hash = await self.redis.hgetall(redis_key) 
            parsed_dict = {}
            for field, value in raw_hash.items(): 
                try:
                    parsed_dict[field] = json.loads(value)
                except json.JSONDecodeError as e:
                    logger.critical(f"JSONDecodeError –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ–ª—è '{field}' –≤ —Ö–µ—à–µ '{redis_key}': {e}.")
                    raise 
            return parsed_dict
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ö–µ—à–∞ '{redis_key}' –∏–∑ Redis: {e}", exc_info=True)
            return {}

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–µ—Ç–æ–¥ get_weighted_random_id –ü–ï–†–ï–ú–ï–©–ï–ù —Å—é–¥–∞. –≠—Ç–æ –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ.
    async def get_weighted_random_id(
        self, 
        redis_key: str, 
        id_field: str, 
        weight_field: str, 
        default_id: Optional[int]
    ) -> Optional[int]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis HASH, –¥–µ–ª–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä ID —Å —É—á–µ—Ç–æ–º –≤–µ—Å–∞.
        """
        try:
            data_dict = await self._get_full_hash_as_dict(redis_key)
            if not data_dict:
                logger.warning(f"–ö—ç—à –¥–ª—è –∫–ª—é—á–∞ '{redis_key}' –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return default_id

            choices = []
            weights = []
            
            for item_data in data_dict.values():
                item_id = item_data.get(id_field)
                if item_id is None or not isinstance(item_id, (int, float)):
                    continue

                try:
                    item_weight = float(item_data.get(weight_field, 1.0))
                except (ValueError, TypeError):
                    item_weight = 1.0
                
                if item_weight >= 0:
                    choices.append(int(item_id))
                    weights.append(item_weight)

            if not choices:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤ –∫—ç—à–µ '{redis_key}'.")
                return default_id

            return random.choices(choices, weights=weights, k=1)[0]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–º –≤—ã–±–æ—Ä–µ –∏–∑ –∫—ç—à–∞ '{redis_key}': {e}", exc_info=True)
            return default_id

    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —á—Ç–µ–Ω–∏—è ---
    async def get_all_item_bases(self) -> Dict[str, Any]:
        return await self._get_full_hash_as_dict(REDIS_KEY_GENERATOR_ITEM_BASE)

    async def get_all_materials(self) -> Dict[str, Any]:
        return await self._get_full_hash_as_dict(REDIS_KEY_GENERATOR_MATERIALS)

    async def get_all_suffixes(self) -> Dict[str, Any]:
        return await self._get_full_hash_as_dict(REDIS_KEY_GENERATOR_SUFFIXES)

    async def get_all_modifiers(self) -> Dict[str, Any]:
        return await self._get_full_hash_as_dict(REDIS_KEY_GENERATOR_MODIFIERS)

    async def get_all_skills(self) -> Dict[str, Any]:
        return await self._get_full_hash_as_dict(REDIS_KEY_GENERATOR_SKILLS)

    async def get_all_background_stories(self) -> Dict[str, Any]:
        return await self._get_full_hash_as_dict(REDIS_KEY_GENERATOR_BACKGROUND_STORIES)

    async def get_all_personalities(self) -> Dict[str, Any]:
        return await self._get_full_hash_as_dict(REDIS_KEY_GENERATOR_PERSONALITIES)

    async def get_all_inventory_rules(self) -> Dict[str, Any]:
        return await self._get_full_hash_as_dict(REDIS_KEY_GENERATOR_INVENTORY_RULES)

# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Backend'–µ
reference_data_reader = ReferenceDataReader()
