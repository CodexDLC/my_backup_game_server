# game_server/Logic/InfrastructureLogic/app_cache/services/item/item_cache_manager.py

import logging
from typing import Any, Dict, Optional, List
import json
import inject # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º inject

from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.config.settings.redis_setting import DEFAULT_TTL_ITEM_INSTANCE_CACHE
from game_server.Logic.InfrastructureLogic.app_cache.interfaces.interfaces_item_cache import IItemCacheManager

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
from game_server.config.constants.redis_key.item_keys import KEY_ITEM_INSTANCE_DATA, FIELD_ITEM_INSTANCE_DATA

logger = logging.getLogger(__name__)


class ItemCacheManager(IItemCacheManager):
    """
    –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ Redis.
    –û–ø–µ—Ä–∏—Ä—É–µ—Ç Hash-–æ–±—ä–µ–∫—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞.
    """
    # üî• –î–û–ë–ê–í–õ–ï–ù–û: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä @inject.autoparams()
    @inject.autoparams()
    def __init__(self, redis_client: CentralRedisClient, logger: logging.Logger):
        self.redis = redis_client
        self.logger = logger
        self.logger.info("‚úÖ ItemCacheManager (v2) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def get_item_instance_data(self, item_uuid: str) -> Optional[Dict[str, Any]]:
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–ª—é—á–∞
        key = KEY_ITEM_INSTANCE_DATA.format(item_uuid=item_uuid)
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ 'data' –∏–∑ Hash
        item_data_str = await self.redis.hget(key, FIELD_ITEM_INSTANCE_DATA)
        
        if item_data_str:
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_uuid} –∏–∑ Redis.")
            return json.loads(item_data_str)
        else:
            logger.debug(f"–î–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Redis.")
            return None

    async def set_item_instance_data(self, item_uuid: str, item_data: Dict[str, Any], ttl_seconds: Optional[int] = DEFAULT_TTL_ITEM_INSTANCE_CACHE):
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–ª—é—á–∞
        key = KEY_ITEM_INSTANCE_DATA.format(item_uuid=item_uuid)
        value = json.dumps(item_data)
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–µ 'data' –≤–Ω—É—Ç—Ä–∏ Hash
        await self.redis.hset(key, FIELD_ITEM_INSTANCE_DATA, value)

        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.debug(f"–î–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_uuid} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Redis —Å TTL={ttl_seconds}.")

    async def delete_item_instance_data(self, item_uuid: str):
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–ª—é—á–∞
        key = KEY_ITEM_INSTANCE_DATA.format(item_uuid=item_uuid)
        # –£–¥–∞–ª—è–µ–º –≤–µ—Å—å Hash, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–∏–º –ø—Ä–µ–¥–º–µ—Ç–æ–º
        await self.redis.delete(key)
        logger.info(f"–î–∞–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_uuid} (–≤–µ—Å—å Hash) —É–¥–∞–ª–µ–Ω—ã –∏–∑ Redis.")

    async def get_multiple_item_instances_data(self, item_uuids: List[str]) -> Dict[str, Optional[Dict[str, Any]]]:
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º pipeline, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ HGET –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        if not item_uuids:
            return {}

        pipe = self.redis.pipeline()
        for uuid in item_uuids:
            key = KEY_ITEM_INSTANCE_DATA.format(item_uuid=uuid)
            pipe.hget(key, FIELD_ITEM_INSTANCE_DATA)
        
        results = await pipe.execute()

        items_map = {}
        for i, data_str in enumerate(results):
            item_uuid = item_uuids[i]
            if data_str:
                try:
                    items_map[item_uuid] = json.loads(data_str)
                except (json.JSONDecodeError, TypeError):
                    logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è item_uuid: {item_uuid}. –î–∞–Ω–Ω—ã–µ: {data_str}")
                    items_map[item_uuid] = None
            else:
                items_map[item_uuid] = None
        
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(items_map)} –∏–∑ {len(item_uuids)} –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
        return items_map
