import yaml
import asyncio
import os

from game_server.Logic.InfrastructureLogic.DataAccessLogic.db_instance import AsyncSessionLocal
from game_server.database import models

async def export_to_yaml(schema: str):
    """ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ö–µ–º—ã –≤ YAML –≤ –ø–∞–ø–∫—É `import_{schema}` —Å –≥–æ—Ç–æ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î. """
    class_name = schema.title().replace("_", "")  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–º—è —Å—Ö–µ–º—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–µ ORM-–∫–ª–∞—Å—Å–∞
    model = getattr(models, class_name, None)  # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞—Å—Å –º–æ–¥–µ–ª–∏

    if not model:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    async with AsyncSessionLocal() as session:  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        result = await session.execute(model.select())
        data = [row._asdict() for row in result.fetchall()]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏

    yaml_data = {"version": "1.0", "schema": schema, "data": data}

    # üîπ –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É `import_{schema}`
    output_dir = os.path.join(os.path.dirname(__file__), f"import_{schema}")
    os.makedirs(output_dir, exist_ok=True)

    filename = os.path.join(output_dir, f"{schema}.yml")
    with open(filename, "w", encoding="utf-8") as file:
        yaml.dump(yaml_data, file, default_flow_style=False)

    print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω: {filename}")


# üîπ –ó–∞–ø—É—Å–∫ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º `schema`
async def main():
    schema = input("–í–≤–µ–¥–∏—Ç–µ schema –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: ").strip()
    await export_to_yaml(schema)

if __name__ == "__main__":
    asyncio.run(main())
