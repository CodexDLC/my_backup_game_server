-- üîπ –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö



-- üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
CREATE FUNCTION insert_character_skills()
RETURNS TRIGGER AS $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM character_skills WHERE character_id = NEW.character_id) THEN
        INSERT INTO character_skills (character_id, skill_key, level, xp, progress_state)
        SELECT NEW.character_id, skill_key, 0, 0, 'PAUSE' FROM skills;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER after_character_insert
AFTER INSERT ON characters
FOR EACH ROW
EXECUTE FUNCTION insert_character_skills();

-- üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
CREATE FUNCTION insert_character_special()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO characters_special (character_id, strength, perception, endurance, agility, intelligence, charisma, luck)
    VALUES (NEW.character_id, 5, 5, 5, 5, 5, 5, 5);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER after_character_insert_special
AFTER INSERT ON characters
FOR EACH ROW
EXECUTE FUNCTION insert_character_special();

-- üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
CREATE FUNCTION insert_character_status()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO character_status (character_id, current_health, max_health, current_energy)
    VALUES (NEW.character_id, 0, 0, 0);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER after_character_insert_status
AFTER INSERT ON characters
FOR EACH ROW
EXECUTE FUNCTION insert_character_status();

-- üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è XP –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
CREATE FUNCTION insert_xp_tick_data()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO xp_tick_data (character_id, skill_id, xp_generated)
    SELECT NEW.character_id, skill_key, 0 
    FROM skills
    WHERE skill_key NOT IN (SELECT skill_key FROM character_skills WHERE character_id = NEW.character_id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ online-–ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç
CREATE FUNCTION enforce_single_online_character()
RETURNS TRIGGER AS $$
BEGIN
    IF (SELECT COUNT(*) FROM characters WHERE account_id = NEW.account_id AND status = 'online') >= 1 THEN
        RAISE EXCEPTION '–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –±—ã—Ç—å online –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç %', NEW.account_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;




-- üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–∑–∞–º–µ–Ω–∞ CHECK)
CREATE FUNCTION check_max_characters()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM characters WHERE account_id = NEW.account_id HAVING COUNT(*) >= 5) THEN
        RAISE EXCEPTION '–ú–∞–∫—Å–∏–º—É–º 5 –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç!';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
