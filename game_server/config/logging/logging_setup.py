# game_server/Logic/InfrastructureLogic/logging/logging_setup.py

import os
import logging
import sys
import colorlog
from logging.handlers import RotatingFileHandler
import datetime # –ò–º–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ datetime, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è


# --- 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π (–∏–∑ logging_config.py) ---
SUCCESS_LEVEL_NUM = 25
logging.addLevelName(SUCCESS_LEVEL_NUM, "SUCCESS")

def success_log_method(self, message, *args, **kwargs):
    """–ú–µ—Ç–æ–¥ –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è SUCCESS."""
    if self.isEnabledFor(SUCCESS_LEVEL_NUM):
        self._log(SUCCESS_LEVEL_NUM, message, args, **kwargs)

logging.Logger.success = success_log_method


# --- 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ (—á–∞—Å—Ç—å –∏–∑ logging_config.py) ---
class LoggerConfig:
    def __init__(self):
        # –ü—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        # –î–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—É—Ç–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–º–∞ –≤ docker-compose.yml
        self.log_dir = os.path.join('/app/game_server', "logs") 
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        container_id = os.getenv('CONTAINER_ID', 'default_container') 

        # üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –ª–æ–≥–æ–≤
        self.debug_log_file = os.path.join(self.log_dir, f'{container_id}_debug.log')
        self.info_log_file = os.path.join(self.log_dir, f'{container_id}_info.log')
        self.warning_log_file = os.path.join(self.log_dir, f'{container_id}_warning.log')
        self.error_log_file = os.path.join(self.log_dir, f'{container_id}_error.log')
        self.critical_log_file = os.path.join(self.log_dir, f'{container_id}_critical.log')
        self.exception_log_file = os.path.join(self.log_dir, f'{container_id}_exception.log')

        # –ï—Å–ª–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –æ–±—â–∏–π —Ñ–∞–π–ª –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤ (–∫–∞–∫ —è –æ—à–∏–±–æ—á–Ω–æ –¥–µ–ª–∞–ª —Ä–∞–Ω—å—à–µ),
        # –µ–≥–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å: self.main_log_file = os.path.join(self.log_dir, f'{container_id}_app.log')


        self.max_file_size = 5 * 1024 * 1024  # 5MB
        self.backup_count = 3

        # –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.console_log_level = logging.INFO     # ‚óÑ‚óÑ‚óÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨. –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏ DEBUG –∏ –≤—ã—à–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        self.debug_log_level = logging.DEBUG       # –õ–æ–≥–∏ DEBUG –∏ –≤—ã—à–µ –≤ debug_log_file
        self.info_log_level = logging.INFO       # –õ–æ–≥–∏ INFO –∏ –≤—ã—à–µ –≤ info_log_file
        self.warning_log_level = logging.WARNING # –õ–æ–≥–∏ WARNING –∏ –≤—ã—à–µ –≤ warning_log_file
        self.error_log_level = logging.ERROR     # –õ–æ–≥–∏ ERROR –∏ –≤—ã—à–µ –≤ error_log_file
        self.critical_log_level = logging.CRITICAL # –õ–æ–≥–∏ CRITICAL –∏ –≤—ã—à–µ –≤ critical_log_file
        self.exception_log_level = logging.ERROR # –õ–æ–≥–∏ EXCEPTION (–∫–æ—Ç–æ—Ä—ã–π –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ ERROR) –≤ exception_log_file

        self.sql_echo = os.getenv("SQL_ECHO", "False").lower() == "true"
        
        # –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –ª–æ–≥–≥–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app_logger = logging.getLogger("game_server_app_logger") 
        self.app_logger.setLevel(logging.DEBUG) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞ –Ω–∞ —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π
        # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Motor –∏ PyMongo
        logging.getLogger('motor').setLevel(logging.INFO) # –ò–ª–∏ logging.DEBUG –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
        logging.getLogger('pymongo').setLevel(logging.INFO) # –ò–ª–∏ logging.DEBUG –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤
                
        self._disable_sqlalchemy_logs()

    def get_logger(self):
        return self.app_logger

    def _disable_sqlalchemy_logs(self):
        sql_loggers = [
            "sqlalchemy",
            "sqlalchemy.engine",
            "sqlalchemy.pool",
            "sqlalchemy.orm",
            "asyncpg",
        ]
        for sql_logger in sql_loggers:
            logging.getLogger(sql_logger).setLevel(logging.WARNING if not self.sql_echo else logging.INFO)


# --- 3. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–∏–∑ logging_handlers.py) ---
def get_console_handler(level):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º."""
    formatter = colorlog.ColoredFormatter(
        "%(log_color)s%(levelname)-8s%(reset)s | %(blue)s%(message)s",
        log_colors={
            'DEBUG': 'cyan',
            'INFO': 'green',
            'SUCCESS': 'bold_green', # –¶–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
            'WARNING': 'yellow',
            'ERROR': 'red',
            'CRITICAL': 'bold_red'
        }
    )
    handler = logging.StreamHandler(sys.stdout) # üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∏—à–µ–º –≤ sys.stdout
    handler.setLevel(level)
    handler.setFormatter(formatter)
    return handler

def get_file_handler(path, level, max_size, backups):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π."""
    log_dir = os.path.dirname(path)
    try:
        if not os.path.exists(log_dir):
            os.makedirs(log_dir, exist_ok=True)
    except OSError as e:
        logging.getLogger(__name__).error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–ª—è '{log_dir}': {e}", exc_info=True) 

    file_handler = RotatingFileHandler(path, maxBytes=max_size, backupCount=backups, encoding='utf-8')
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –î–æ–±–∞–≤–ª—è–µ–º %(exc_text)s –≤ —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s\n%(exc_text)s' # <-- –î–û–ë–ê–í–õ–ï–ù–û \n%(exc_text)s
    ))
    file_handler.setLevel(level)
    return file_handler


# --- 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—á–∞—Å—Ç—å –∏–∑ logging_setup.py) ---
config = LoggerConfig()
app_logger = config.get_logger()

app_logger.propagate = False

if not app_logger.handlers: 
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å Docker logs)
    app_logger.addHandler(get_console_handler(config.console_log_level))

    # üî• –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –ª–æ–≥–æ–≤
    app_logger.addHandler(get_file_handler(config.debug_log_file, config.debug_log_level, config.max_file_size, config.backup_count))
    app_logger.addHandler(get_file_handler(config.info_log_file, config.info_log_level, config.max_file_size, config.backup_count))
    app_logger.addHandler(get_file_handler(config.warning_log_file, config.warning_log_level, config.max_file_size, config.backup_count))
    app_logger.addHandler(get_file_handler(config.error_log_file, config.error_log_level, config.max_file_size, config.backup_count))
    app_logger.addHandler(get_file_handler(config.critical_log_file, config.critical_log_level, config.max_file_size, config.backup_count))
    app_logger.addHandler(get_file_handler(config.exception_log_file, config.exception_log_level, config.max_file_size, config.backup_count))
