# game_server/core/di_modules/di_container.py

import logging
from typing import Dict, Any, Type, Callable

import inject
# üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º AsyncIOMotorClient, –£–î–ê–õ–ï–ù –∏–º–ø–æ—Ä—Ç MongoClient –∏–∑ pymongo
from motor.motor_asyncio import AsyncIOMotorClient
from motor.motor_asyncio import AsyncIOMotorDatabase
from sqlalchemy.ext.asyncio import AsyncSession

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ —Ñ—É–Ω–∫—Ü–∏–π shutdown ---
from game_server.Logic.InfrastructureLogic.app_cache.app_cache_initializer import shutdown_app_cache_managers
from game_server.Logic.InfrastructureLogic.app_cache.central_redis_client import CentralRedisClient
from game_server.Logic.InfrastructureLogic.app_mongo.app_mongo_initializer import initialize_mongo_repositories
# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã ---
from game_server.Logic.InfrastructureLogic.db_instance import AsyncSessionLocal, engine
from game_server.Logic.InfrastructureLogic.messaging.i_message_bus import IMessageBus
from game_server.Logic.InfrastructureLogic.messaging.rabbitmq_message_bus import RabbitMQMessageBus
# –ò–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞
from game_server.config.logging.logging_setup import app_logger as global_app_logger
from game_server.config.provider import config
from game_server.core.di_modules.auth_bindings import configure_auth_services
from game_server.core.di_modules.cache_bindings import configure_cache_managers
from game_server.core.di_modules.core_service_bindings import configure_core_services
from game_server.core.di_modules.mongo_bindings import configure_mongo_repositories
# --- –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –±–∏–Ω–¥–∏–Ω–≥–∞ ---
from game_server.core.di_modules.postgres_bindings import configure_postgres_repositories
from game_server.core.di_modules.system_service_bindings import configure_system_services
from game_server.core.di_modules.world_orchestrator_bindings import configure_world_orchestrators

logger = logging.getLogger(__name__)

_async_singletons_instances: Dict[Type | str, Any] = {}

def configure_dependencies(binder):
    logger.info("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
    binder.bind(logging.Logger, global_app_logger)
    binder.bind(IMessageBus, _async_singletons_instances[RabbitMQMessageBus])
    binder.bind(CentralRedisClient, _async_singletons_instances[CentralRedisClient])
    
    # üî• –ò–ó–ú–ï–ù–ï–ù–û: –ë–∏–Ω–¥–∏–º AsyncIOMotorClient, –∞ –Ω–µ MongoClient (–∫–æ—Ç–æ—Ä—ã–π —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
    binder.bind(AsyncIOMotorClient, _async_singletons_instances[AsyncIOMotorClient]) 
    binder.bind('mongo_database_obj', _async_singletons_instances['mongo_database_obj'])
    binder.bind(AsyncIOMotorDatabase, _async_singletons_instances['mongo_database_obj']) # –ë–∏–Ω–¥–∏–º –ø–æ —Ç–∏–ø—É AsyncIOMotorDatabase
    
    # –ë–∏–Ω–¥–∏–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π SQLAlchemy AsyncSessionLocal –∫ —Ç–∏–ø—É Callable[[], AsyncSession]
    binder.bind(Callable[[], AsyncSession], AsyncSessionLocal)
    
    configure_postgres_repositories(binder)
    configure_mongo_repositories(binder)
    configure_cache_managers(binder)
    configure_core_services(binder)
    configure_auth_services(binder)
    configure_system_services(binder)
    configure_world_orchestrators(binder)
    logger.info("‚úÖ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")

async def initialize_di_container():
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
    rabbit_bus = RabbitMQMessageBus()
    await rabbit_bus.connect()
    _async_singletons_instances[RabbitMQMessageBus] = rabbit_bus

    central_redis_client_instance = CentralRedisClient(
        redis_url=config.settings.core.REDIS_URL,
        max_connections=config.settings.core.REDIS_POOL_SIZE,
        redis_password=config.settings.core.REDIS_PASSWORD
    )
    await central_redis_client_instance.connect()
    _async_singletons_instances[CentralRedisClient] = central_redis_client_instance

    # üî• –ò–ó–ú–ï–ù–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MongoDB –∫–ª–∏–µ–Ω—Ç–∞ —Å AsyncIOMotorClient
    mongo_client_instance = AsyncIOMotorClient(config.settings.core.MONGO_URI) # <--- –í–û–¢ –ì–î–ï –û–®–ò–ë–ö–ê –ë–´–õ–ê!
    _async_singletons_instances[AsyncIOMotorClient] = mongo_client_instance # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å AsyncIOMotorClient
    mongo_db_instance = mongo_client_instance.get_database(config.settings.core.MONGO_DB_NAME) # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    _async_singletons_instances['mongo_database_obj'] = mongo_db_instance # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    await initialize_mongo_repositories() 


    inject.configure(configure_dependencies)
    logger.info("‚úÖ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

async def shutdown_di_container():
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
    try:
        if inject.is_configured():
            if RabbitMQMessageBus in _async_singletons_instances:
                rabbit_bus_instance = _async_singletons_instances[RabbitMQMessageBus]
                if hasattr(rabbit_bus_instance, 'close') and callable(rabbit_bus_instance.close):
                    await rabbit_bus_instance.close()
                    logger.info("RabbitMQ Message Bus –∑–∞–∫—Ä—ã—Ç.")
            
            await shutdown_app_cache_managers()
            logger.info("–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∫—ç—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç—ã.")
            
            if 'arq_redis_pool_obj' in _async_singletons_instances:
                arq_pool = _async_singletons_instances['arq_redis_pool_obj']
                if arq_pool and hasattr(arq_pool, 'close') and callable(arq_pool.close):
                    await arq_pool.close()
                    logger.info("ARQ Redis Pool –∑–∞–∫—Ä—ã—Ç.")
            
            if CentralRedisClient in _async_singletons_instances:
                redis_client_instance = _async_singletons_instances[CentralRedisClient]
                if hasattr(redis_client_instance, 'close') and callable(redis_client_instance.close):
                    await redis_client_instance.close()
                    logger.info("Central Redis Client –∑–∞–∫—Ä—ã—Ç.")

            # üî• –ò–ó–ú–ï–ù–ï–ù–û: –ó–∞–∫—Ä—ã–≤–∞–µ–º AsyncIOMotorClient
            if AsyncIOMotorClient in _async_singletons_instances:
                mongo_client_instance = _async_singletons_instances[AsyncIOMotorClient]
                if hasattr(mongo_client_instance, 'close') and callable(mongo_client_instance.close):
                    mongo_client_instance.close() # Motor client.close() - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                    logger.info("MongoDB Client –∑–∞–∫—Ä—ã—Ç.")
            
            if engine:
                await engine.dispose()
                logger.info("PostgreSQL Engine –∑–∞–∫—Ä—ã—Ç.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}", exc_info=True)
    finally:
        inject.clear()
        _async_singletons_instances.clear()
        logger.info("‚úÖ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")