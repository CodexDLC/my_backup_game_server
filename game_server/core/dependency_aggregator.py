# game_server/core/dependency_aggregator.py

from typing import Dict, Any, Coroutine
from game_server.config.logging.logging_setup import app_logger as logger

# 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∏ –≥–µ—Ç—Ç–µ—Ä—ã
from game_server.Logic.InfrastructureLogic.arq_worker.arq_manager import arq_pool_manager
from game_server.Logic.InfrastructureLogic.app_post.app_post_initializer import (
    initialize_app_post_managers, 
    get_repository_manager_instance, 
    shutdown_app_post_managers
)
from game_server.Logic.InfrastructureLogic.app_cache.app_cache_initializer import (
    initialize_app_cache_managers, 
    get_initialized_app_cache_managers, 
    shutdown_app_cache_managers
)
from game_server.Logic.InfrastructureLogic.messaging.rabbitmq_message_bus import RabbitMQMessageBus
from game_server.Logic.InfrastructureLogic.db_instance import engine

# 2. –°–æ–∑–¥–∞–µ–º "—Å–∫–ª–∞–¥" –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
_global_dependencies_instance: Dict[str, Any] = {}

async def initialize_all_dependencies() -> None:
    """
    –í—ã–∑—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç
    –∫–∞–∂–¥—ã–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å _global_dependencies_instance.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    """
    global _global_dependencies_instance
    if _global_dependencies_instance:
        logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
        return

    logger.info("--- üöÄ –ù–ê–ß–ê–õ–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –í–°–ï–• –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ù–´–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ---")
    
    # PostgreSQL
    if not await initialize_app_post_managers():
        raise RuntimeError("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PostgreSQL.")
    _global_dependencies_instance["repository_manager"] = get_repository_manager_instance()
    
    # Redis Cache
    if not await initialize_app_cache_managers():
        raise RuntimeError("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Cache Managers.")
    
    cache_managers = get_initialized_app_cache_managers()
    
    # <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –∫–ª—é—á 'app_cache_managers' –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    _global_dependencies_instance["app_cache_managers"] = cache_managers
    
    # <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    _global_dependencies_instance.update(cache_managers)
    
    # ARQ
    await arq_pool_manager.startup()
    _global_dependencies_instance["arq_redis_pool"] = arq_pool_manager.arq_redis_pool
    
    # RabbitMQ
    rabbit_bus = RabbitMQMessageBus()
    await rabbit_bus.connect()
    _global_dependencies_instance["message_bus"] = rabbit_bus
    
    # Logger
    _global_dependencies_instance["logger"] = logger
    
    logger.info("--- ‚úÖ –í–°–ï –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ù–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –£–°–ü–ï–®–ù–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–´ –ò –°–û–•–†–ê–ù–ï–ù–´ ---")

def get_global_dependencies() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å–æ –≤—Å–µ–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏."""
    return _global_dependencies_instance

async def shutdown_all_dependencies() -> None:
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."""
    logger.info("--- üõë –ù–ê–ß–ê–õ–û –û–°–¢–ê–ù–û–í–ö–ò –í–°–ï–• –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ù–´–• –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô ---")
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    if "message_bus" in _global_dependencies_instance:
        await _global_dependencies_instance["message_bus"].close()
        
    if "arq_redis_pool" in _global_dependencies_instance:
        await arq_pool_manager.shutdown()
        
    await shutdown_app_cache_managers()
    await shutdown_app_post_managers()
    
    if engine:
        await engine.dispose()
        
    logger.info("--- ‚úÖ –í–°–ï –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ù–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –ö–û–†–†–ï–ö–¢–ù–û –û–°–¢–ê–ù–û–í–õ–ï–ù–´ ---")
