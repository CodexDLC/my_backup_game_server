import sys
from contextlib import asynccontextmanager
import logging
from fastapi import FastAPI, Response, status, HTTPException

# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
from game_server.core.di_container import initialize_di_container, shutdown_di_container


# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–≤ (—Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ inject)
from game_server.Logic.ApplicationLogic.world_orchestrator.pre_start.coordinator_pre_start import PreStartCoordinator
from game_server.Logic.ApplicationLogic.world_orchestrator.runtime.runtime_coordinator import RuntimeCoordinator
from game_server.game_services.command_center.coordinator_command.coordinator_listener import CoordinatorListener


# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã

from game_server.Logic.InfrastructureLogic.messaging.i_message_bus import IMessageBus # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏




import inject # üî• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º inject


@asynccontextmanager
async def lifespan_event_handler(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Ä–≤–∏—Å–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ.
    """
    current_logger: logging.Logger = logging.getLogger(__name__) # –ò–ª–∏ inject.instance(logging.Logger) –µ—Å–ª–∏ DI —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è

    current_logger.info("üöÄ –ó–ê–ü–£–°–ö –ì–õ–ê–í–ù–û–ì–û –û–†–ö–ï–°–¢–†–ê–¢–û–†–ê –ò–ì–†–û–í–û–ì–û –ú–ò–†–ê...")

    runtime_coordinator_listener = None
    
    try:
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        # –≠—Ç–æ —Ç–∞–∫–∂–µ –æ–±–µ—Å–ø–µ—á–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞.
        await initialize_di_container()

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ inject
        pre_start_coordinator: PreStartCoordinator = inject.instance(PreStartCoordinator)
        runtime_coordinator_instance: RuntimeCoordinator = inject.instance(RuntimeCoordinator) # –ö–ª–∞—Å—Å RuntimeCoordinator
        message_bus: IMessageBus = inject.instance(IMessageBus) # –ü–æ–ª—É—á–∞–µ–º –∏–∑ inject


        current_logger.info("--- ‚úÖ –í–°–ï –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò –û–†–ö–ï–°–¢–†–ê–¢–û–†–ê –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–´ ---")

        # --- –≠–¢–ê–ü 1: –†–ï–ñ–ò–ú –ü–†–ï–î–°–¢–ê–†–¢–ê ---
        current_logger.info("--- ‚öôÔ∏è –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ü–†–ï–î–°–¢–ê–†–¢–ê (Pre-Start Mode) ---")

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ inject pre_start_coordinator
        app.state.generator_coordinator = pre_start_coordinator # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ app.state

        pre_start_successful = await app.state.generator_coordinator.run_pre_start_sequence()

        if not pre_start_successful:
            current_logger.critical("üö® –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
            sys.exit(1)

        current_logger.info("--- ‚úÖ –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω ---")

        # --- –≠–¢–ê–ü 2: –†–ï–ñ–ò–ú –û–°–ù–û–í–ù–û–ô –†–ê–ë–û–¢–´ (Runtime Mode) ---
        current_logger.info("--- ‚öôÔ∏è –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –û–°–ù–û–í–ù–û–ô –†–ê–ë–û–¢–´ (Runtime Mode) ---")

        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ inject runtime_coordinator_instance
        coordinator_orchestrator = runtime_coordinator_instance
        
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–î–ê–õ–ò–¢–¨ 'config=coordinator_config'
        runtime_coordinator_listener = CoordinatorListener(
            message_bus=message_bus, # –ò—Å–ø–æ–ª—å–∑—É–µ–º message_bus –∏–∑ inject
            # config=coordinator_config, # <-- –£–î–ê–õ–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£
            orchestrator=coordinator_orchestrator
        )
        app.state.runtime_coordinator = runtime_coordinator_listener # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ app.state

        runtime_coordinator_listener.start() 
        current_logger.info("--- ‚úÖ –†–∞–Ω—Ç–∞–π–º-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã ---")

        yield

    finally:
        # --- SHUTDOWN ---
        current_logger.info("--- üõë –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ì–ª–∞–≤–Ω–æ–≥–æ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---")

        if runtime_coordinator_listener:
            await runtime_coordinator_listener.stop()
            current_logger.info("‚úÖ –†–∞–Ω—Ç–∞–π–º-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            
        # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        await shutdown_di_container()
        
        current_logger.info("--- ‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ì–ª–∞–≤–Ω–æ–≥–æ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. ---")


app = FastAPI(
    title="Game World State Orchestrator",
    description="Orchestrates pre-start generation and runtime game world processes.",
    version="1.0.0",
    lifespan=lifespan_event_handler
)

@app.get("/health", summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç."""
    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ø–µ—Ä—å —Å–º–æ—Ç—Ä—è—Ç –≤ –µ–¥–∏–Ω—ã–π DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —á–µ—Ä–µ–∑ inject.instance()
    # –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, —á–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å app.state.dependencies –Ω–∞–ø—Ä—è–º—É—é,
    # —Ç–∞–∫ –∫–∞–∫ inject –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –æ–Ω–∏ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã.
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ inject —Ä–∞–±–æ—Ç–∞–µ—Ç
        inject.instance(IMessageBus)
        inject.instance(PreStartCoordinator)
        inject.instance(RuntimeCoordinator)
        inject.instance(logging.Logger) # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ª–æ–≥–≥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω

        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç, –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ inject
        return Response(status_code=status.HTTP_200_OK, content="Orchestrator is healthy.")
    except Exception as e:
        raise HTTPException(status_code=status.HTTP_503_SERVICE_UNAVAILABLE, detail="Orchestrator is not fully initialized or DI container is not ready.")