# game_server/game_services/game_world_state_orchestrator.py

import asyncio
import sys
from typing import Optional, Type, Dict, Any
from contextlib import asynccontextmanager

from fastapi import FastAPI, Response, status, HTTPException
from game_server.config.settings_core import REDIS_URL, REDIS_POOL_SIZE, REDIS_PASSWORD

from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π ARQ ---
from game_server.Logic.InfrastructureLogic.arq_worker.arq_manager import arq_pool_manager

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –¥–≤–∞ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ ---
from game_server.Logic.ApplicationLogic.start_orcestrator.coordinator_pre_start.coordinator_pre_start import GeneratorPreStart
from game_server.Logic.ApplicationLogic.start_orcestrator.coordinator_run.coordinator import Coordinator

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ---
# RedisMessageBus
from game_server.Logic.InfrastructureLogic.messaging.message_bus import RedisMessageBus

# PostgreSQL
from game_server.Logic.InfrastructureLogic.db_instance import AsyncSessionLocal
from game_server.Logic.InfrastructureLogic.app_post.sql_config.sqlalchemy_settings import engine # –î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –¥–≤–∏–∂–∫–∞

# –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¢–û–†–´ –ò –§–£–ù–ö–¶–ò–ò SHUTDOWN –ò–ó app_cache_initializer
from game_server.Logic.InfrastructureLogic.app_cache.app_cache_initializer import (
    initialize_app_cache_managers,
    shutdown_app_cache_managers,
    get_initialized_app_cache_managers
)

# –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¢–û–† –ò MANAGER –ò–ó app_post_initializer
from game_server.Logic.InfrastructureLogic.app_post.app_post_initializer import (
    initialize_app_post_managers,
    get_repository_manager_instance,
    shutdown_app_post_managers
)
from game_server.Logic.InfrastructureLogic.app_post.repository_manager import RepositoryManager


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é lifespan event handler
@asynccontextmanager
async def lifespan_event_handler(app: FastAPI):
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ì–õ–ê–í–ù–û–ì–û –û–†–ö–ï–°–¢–†–ê–¢–û–†–ê –ò–ì–†–û–í–û–ì–û –ú–ò–†–ê (FastAPI Lifespan Startup)...")

    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ARQ Redis Pool (–¥–ª—è –∑–∞–¥–∞—á ARQ - DB 1)
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ARQ Redis Pool...")
    try:
        await arq_pool_manager.startup()
        app.state.arq_redis_pool = arq_pool_manager.arq_redis_pool
        if not app.state.arq_redis_pool:
            logger.critical("üö® –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ARQ Redis –ø—É–ª. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
            sys.exit(1)
        logger.info("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π ARQ Redis —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ARQ Redis: {e}", exc_info=True)
        sys.exit(1)

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ PostgreSQL (RepositoryManager)
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ PostgreSQL (RepositoryManager)...")
    try:
        app_post_init_successful = await initialize_app_post_managers(async_session_factory=AsyncSessionLocal)
        
        if not app_post_init_successful:
            logger.critical("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ PostgreSQL. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
            sys.exit(1)

        app.state.repository_manager = get_repository_manager_instance()
        logger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã PostgreSQL —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ PostgreSQL: {e}", exc_info=True)
        sys.exit(1)

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –í–°–ï–• –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤ (CentralRedisClient –≤–Ω—É—Ç—Ä–∏)
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤ (DB 0)...")
    try:
        cache_init_successful = await initialize_app_cache_managers(async_session_factory=AsyncSessionLocal)
        if not cache_init_successful:
            logger.critical("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞. –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
            sys.exit(1)
        app.state.app_cache_managers = get_initialized_app_cache_managers()
        logger.info("‚úÖ –í—Å–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∫—ç—à–∞ –∏ Redis-—Å–µ—Ä–≤–∏—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
    except Exception as e:
        logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫—ç—à–∞: {e}", exc_info=True)
        sys.exit(1)

    # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MessageBus (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç app.state.arq_redis_pool)
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MessageBus...")
    try:
        app.state.message_bus = RedisMessageBus(redis_pool=app.state.arq_redis_pool)
        logger.info("‚úÖ MessageBus —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MessageBus: {e}", exc_info=True)
        sys.exit(1)

    # --- –≠–¢–ê–ü 1: –†–ï–ñ–ò–ú –ü–†–ï–î–°–¢–ê–†–¢–ê ---
    logger.info("--- ‚öôÔ∏è –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –ü–†–ï–î–°–¢–ê–†–¢–ê (Pre-Start Mode) ---")

    generator_coordinator = GeneratorPreStart(
        repository_manager=app.state.repository_manager,
        app_cache_managers=app.state.app_cache_managers,
        arq_redis_pool=app.state.arq_redis_pool
    )
    app.state.generator_coordinator = generator_coordinator

    pre_start_successful = await app.state.generator_coordinator.pre_start_mode()

    if not pre_start_successful:
        logger.critical("üö® –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π. –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.")
        sys.exit(1)

    logger.info("--- ‚úÖ –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω ---")

    # --- –≠–¢–ê–ü 2: –†–ï–ñ–ò–ú –û–°–ù–û–í–ù–û–ô –†–ê–ë–û–¢–´ (Runtime Mode) ---
    logger.info("--- ‚öôÔ∏è –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –û–°–ù–û–í–ù–û–ô –†–ê–ë–û–¢–´ (Runtime Mode) ---")

    runtime_coordinator = Coordinator(
        message_bus=app.state.message_bus,
        app_cache_managers=app.state.app_cache_managers,
        repository_manager=app.state.repository_manager # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω –∞—Ä–≥—É–º–µ–Ω—Ç repository_manager
    )
    app.state.runtime_coordinator = runtime_coordinator

    asyncio.create_task(app.state.runtime_coordinator.start())
    logger.info("--- ‚úÖ –†–∞–Ω—Ç–∞–π–º-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã ---")

    # >>> –≠–¢–û –¢–û–ß–ö–ê, –ì–î–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ì–û–¢–û–í–û –û–ë–†–ê–ë–ê–¢–´–í–ê–¢–¨ –ó–ê–ü–†–û–°–´ <<<
    yield

    # >>> –≠–¢–û –¢–û–ß–ö–ê, –ì–î–ï –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø SHUTDOWN <<<
    logger.info("--- üõë –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ì–ª–∞–≤–Ω–æ–≥–æ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (FastAPI Lifespan Shutdown) ---")

    if hasattr(app.state, 'runtime_coordinator') and app.state.runtime_coordinator:
        await app.state.runtime_coordinator.stop()
        logger.info("‚úÖ –†–∞–Ω—Ç–∞–π–º-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    await shutdown_app_cache_managers()

    await shutdown_app_post_managers()

    if hasattr(app.state, 'arq_redis_pool') and arq_pool_manager and arq_pool_manager.arq_redis_pool:
        await arq_pool_manager.shutdown()
        logger.info("‚úÖ ARQ Redis Pool –∑–∞–∫—Ä—ã—Ç.")
    elif hasattr(app.state, 'arq_redis_pool') and app.state.arq_redis_pool:
        await app.state.arq_redis_pool.close()
        logger.info("‚úÖ ARQ Redis Pool (–ø—Ä—è–º–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")

    if engine:
        await engine.dispose()
        logger.info("‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π SQLAlchemy (–¥–≤–∏–∂–æ–∫) –∑–∞–∫—Ä—ã—Ç.")

    logger.info("--- ‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ì–ª–∞–≤–Ω–æ–≥–æ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! ---")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å lifespan
app = FastAPI(
    title="Game World State Orchestrator",
    description="Orchestrates pre-start generation and runtime game world processes.",
    version="1.0.0",
    lifespan=lifespan_event_handler
)

# –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–æ—É—Ç /health –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.get("/health", summary="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç."""
    if (hasattr(app.state, 'repository_manager') and app.state.repository_manager is not None and
        hasattr(app.state, 'app_cache_managers') and app.state.app_cache_managers is not None and
        hasattr(app.state, 'arq_redis_pool') and app.state.arq_redis_pool is not None and
        hasattr(app.state, 'runtime_coordinator') and app.state.runtime_coordinator is not None):
        
        return Response(status_code=status.HTTP_200_OK, content="Orchestrator is healthy.")
    else:
        logger.error("Health check failed: Core components not fully initialized.")
        raise HTTPException(status_code=status.HTTP_503_SERVICE_UNAVAILABLE, detail="Orchestrator is not fully initialized.")
