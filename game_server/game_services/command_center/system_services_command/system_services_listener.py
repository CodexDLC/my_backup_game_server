# game_server/game_services/command_center/system_services_command/system_services_listener.py

from typing import Dict, Any
from pydantic import ValidationError
from aio_pika import IncomingMessage

from ..base_microservice_listener import BaseMicroserviceListener
from . import system_services_config as config

class SystemServicesCommandListener(BaseMicroserviceListener):
    # __init__ –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π

    async def _process_single_command(self, message_data: Dict[str, Any], original_message: IncomingMessage):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É: –Ω–∞—Ö–æ–¥–∏—Ç DTO, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.
        """
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –º–µ—Ç–æ–¥–∞
        self.logger.info(f"–°–ª—É—à–∞—Ç–µ–ª—å: –ü–æ–ª—É—á–µ–Ω–æ —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. Correlation ID: {message_data.get('correlation_id')}, "
                         f"Client ID: {message_data.get('client_id')}. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {message_data}")

        # üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º 'command' –ø—Ä—è–º–æ –∏–∑ message_data (—Å –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è).
        # –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–º—É, –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ FastAPI/–±–æ—Ç–∞.
        command_type = message_data.get("command")

        if not command_type:
            # –ï—Å–ª–∏ 'command' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è.
            # –î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ 'payload' –∏ 'command' –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
            # –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
            if "payload" in message_data and isinstance(message_data["payload"], dict):
                # –ï—Å–ª–∏ command –Ω–µ—Ç –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –Ω–æ –µ—Å—Ç—å payload, –∏—â–µ–º command –≤–Ω—É—Ç—Ä–∏ payload
                command_type = message_data["payload"].get("command")
                if command_type:
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ command –≤–Ω—É—Ç—Ä–∏ payload, —Ç–æ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ DTO –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ payload
                    # (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ payload - —ç—Ç–æ –∏ –µ—Å—Ç—å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ DTO)
                    message_data_for_dto = message_data["payload"]
                else:
                    # –ï—Å–ª–∏ command –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –Ω–∏ –≤–Ω—É—Ç—Ä–∏ payload
                    self.logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {original_message.delivery_tag} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'command' –Ω–∏ –≤ –∫–æ—Ä–Ω–µ, –Ω–∏ –≤ payload.")
                    raise ValueError("Missing 'command' in message data or payload")
            else:
                # –ï—Å–ª–∏ payload –≤–æ–æ–±—â–µ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ —Å–ª–æ–≤–∞—Ä—å
                self.logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {original_message.delivery_tag} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'command' –≤ –∫–æ—Ä–Ω–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—è 'payload'.")
                raise ValueError("Missing 'command' in message data")


        command_info = config.COMMAND_HANDLER_MAPPING.get(command_type)
        if not command_info:
            self.logger.error(f"–î–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DTO: {command_type}")
            raise ValueError(f"No DTO mapping for command: {command_type}")
        
        dto_class = command_info["dto"]
        
        try:
            # üî• –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º message_data_for_dto (–∏–ª–∏ message_data, –µ—Å–ª–∏ command –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ) —Ü–µ–ª–∏–∫–æ–º –≤ DTO.
            # –ï—Å–ª–∏ command_type –±—ã–ª –Ω–∞–π–¥–µ–Ω –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, message_data_for_dto –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω message_data.
            # –ï—Å–ª–∏ command_type –±—ã–ª –Ω–∞–π–¥–µ–Ω –≤–Ω—É—Ç—Ä–∏ payload, message_data_for_dto –±—É–¥–µ—Ç —Ä–∞–≤–µ–Ω message_data["payload"].
            validated_dto = dto_class(**(message_data_for_dto if 'message_data_for_dto' in locals() else message_data))
        except ValidationError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ DTO –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command_type}': {e}")
            raise

        await self.orchestrator.process_command(validated_dto)

