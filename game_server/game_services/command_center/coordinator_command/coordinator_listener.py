# game_server/game_services/command_center/coordinator_command/coordinator_listener.py

from typing import Dict, Any
from pydantic import ValidationError
from aio_pika import IncomingMessage # üî• –ù–û–í–´–ô –ò–ú–ü–û–†–¢: IncomingMessage –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
from game_server.game_services.command_center.base_microservice_listener import BaseMicroserviceListener 

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
from . import coordinator_config as config 


class CoordinatorListener(BaseMicroserviceListener):
    """
    –°–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ DTO
    –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ CoordinatorOrchestrator –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    def __init__(self, message_bus, config, orchestrator: Any): # orchestrator: CoordinatorOrchestrator (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏)
        super().__init__(message_bus=message_bus, config=config, orchestrator=orchestrator)
        
        self.orchestrator = orchestrator 
        self.logger.info("‚úÖ CoordinatorListener –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å CoordinatorOrchestrator.")

    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–º–µ–Ω–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ –º–µ—Ç–æ–¥–∞ _process_single_command
    # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç message_data (—Å–ª–æ–≤–∞—Ä—å) –∏ original_message (IncomingMessage)
    async def _process_single_command(self, message_data: Dict[str, Any], original_message: IncomingMessage):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ DTO –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.
        message_data: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (dict).
        original_message: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç aio_pika.IncomingMessage (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω).
        """
        # –¢–µ–ø–µ—Ä—å payload –±–µ—Ä–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ message_data (–∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —Å–ª–æ–≤–∞—Ä—å)
        payload = message_data.get("payload", {})
        command_type = payload.get("command") # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ 'command' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ 'payload'

        # –ò—â–µ–º DTO-–∫–ª–∞—Å—Å –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        command_info = config.COMMAND_HANDLER_MAPPING.get(command_type)
        if not command_info:
            self.logger.error(f"–î–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DTO: {command_type}")
            raise ValueError(f"–î–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DTO: {command_type}")
        
        dto_class = command_info["dto"]

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º
        try:
            # Pydantic-–≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ DTO
            validated_dto = dto_class(**payload)
        except ValidationError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ DTO –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command_type}': {e}", exc_info=True)
            raise

        # –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π DTO –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
        await self.orchestrator.process_command(validated_dto)

        # üî• –í–ê–ñ–ù–û: ack/nack –±–æ–ª—å—à–µ –ù–ï –ù–£–ñ–ù–´ –∑–¥–µ—Å—å, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ base_microservice_listener.py