# game_server/game_services/command_center/coordinator_command/coordinator_listener.py

import json # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç json –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
from typing import Dict, Any
from pydantic import ValidationError
from aio_pika import IncomingMessage # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º IncomingMessage –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
from game_server.game_services.command_center.base_microservice_listener import BaseMicroserviceListener 

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ (–¥–ª—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –º–∞–ø–ø–∏–Ω–≥–æ–≤)
from . import coordinator_config as config 

import inject # üî• –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º inject
import logging # üî• –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º logging –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏

# üî• –ù–û–í–û–ï: –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å CoordinatorOrchestrator
from game_server.Logic.ApplicationLogic.world_orchestrator.runtime.runtime_coordinator import RuntimeCoordinator


# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—Ä—è–º–æ –≤ –∫–ª–∞—Å—Å–µ (–≤–∑—è—Ç—ã –∏–∑ coordinator_config)
# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @inject.autoparams()
@inject.autoparams()
class CoordinatorListener(BaseMicroserviceListener):
    """
    –°–ª—É—à–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ DTO
    –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ CoordinatorOrchestrator –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
    """
    SERVICE_QUEUE = config.SERVICE_QUEUE # –ë–µ—Ä–µ–º –∏–∑ config
    MAX_CONCURRENT_TASKS = config.MAX_CONCURRENT_TASKS # –ë–µ—Ä–µ–º –∏–∑ config
    COMMAND_PROCESSING_TIMEOUT = config.COMMAND_PROCESSING_TIMEOUT # –ë–µ—Ä–µ–º –∏–∑ config

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–∑–º–µ–Ω–µ–Ω–∞ —Å–∏–≥–Ω–∞—Ç—É—Ä–∞ __init__ –∏ –≤—ã–∑–æ–≤ super().__init__
    def __init__(
        self, 
        message_bus: Any, # message_bus –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ç–∏–ø IMessageBus
        orchestrator: RuntimeCoordinator, # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logger: logging.Logger # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
    ):
        # –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –ë–ï–ó –∞—Ä–≥—É–º–µ–Ω—Ç–∞ 'config'
        super().__init__(message_bus=message_bus, orchestrator=orchestrator, logger=logger)
        
        self.logger.info(f"‚úÖ {self.__class__.__name__} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—á–µ—Ä–µ–¥–∏: {self.SERVICE_QUEUE}")

    # üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º _process_single_command –ø–æ–¥ –≥–∏–±–∫–∏–π —Å—Ç–∏–ª—å
    async def _process_single_command(self, message_data: Dict[str, Any], original_message: IncomingMessage):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ DTO –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.
        message_data: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (dict).
        original_message: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç aio_pika.IncomingMessage (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω).
        """
        self.logger.info(f"CoordinatorListener: –ü–æ–ª—É—á–µ–Ω–æ —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. Correlation ID: {message_data.get('correlation_id')}, "
                         f"Client ID: {message_data.get('client_id')}. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {json.dumps(message_data)}")

        command_type = message_data.get("command")
        message_data_for_dto = message_data # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å message_data –¥–ª—è DTO

        if not command_type:
            # –ï—Å–ª–∏ 'command' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω—É—Ç—Ä–∏ 'payload'
            if "payload" in message_data and isinstance(message_data["payload"], dict):
                command_type = message_data["payload"].get("command")
                if command_type:
                    message_data_for_dto = message_data["payload"]
                else:
                    self.logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {original_message.delivery_tag} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'command' –Ω–∏ –≤ –∫–æ—Ä–Ω–µ, –Ω–∏ –≤ payload.")
                    raise ValueError("Missing 'command' in message data or payload")
            else:
                self.logger.error(f"–°–æ–æ–±—â–µ–Ω–∏–µ {original_message.delivery_tag} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç 'command' –≤ –∫–æ—Ä–Ω–µ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—è 'payload'.")
                raise ValueError("Missing 'command' in message data")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º config.COMMAND_HANDLER_MAPPING (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ coordinator_config.py)
        command_info = config.COMMAND_HANDLER_MAPPING.get(command_type)
        if not command_info:
            self.logger.error(f"–î–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DTO –≤ COMMAND_HANDLER_MAPPING: {command_type}")
            raise ValueError(f"No DTO mapping for command: {command_type}")
        
        dto_class = command_info["dto"]

        try:
            validated_dto = dto_class(**message_data_for_dto) # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        except ValidationError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ DTO –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{command_type}': {e}. –î–∞–Ω–Ω—ã–µ: {json.dumps(message_data_for_dto)}", exc_info=True)
            raise

        await self.orchestrator.process_command(validated_dto)

        # üî• –í–ê–ñ–ù–û: ack/nack –±–æ–ª—å—à–µ –ù–ï –ù–£–ñ–ù–´ –∑–¥–µ—Å—å, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ base_microservice_listener.py