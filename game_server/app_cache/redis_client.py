# game_server\app_cache\redis_client.py

import json
import logging
from typing import Any, Optional
import redis.asyncio as aioredis

from game_server.settings import REDIS_PASSWORD, REDIS_URL

class RedisClient:
    def __init__(self, redis_url: str = REDIS_URL, max_connections: int = 10, redis_password: str = REDIS_PASSWORD):
        self.logger = logging.getLogger("redis_client")
        try:
            self.redis = aioredis.from_url(
                redis_url,
                password=redis_password,  # üî• –Ø–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–æ–ª—å
                decode_responses=True,
                socket_timeout=5,
                socket_connect_timeout=5,
                max_connections=max_connections,
            )
        except Exception as e:
            self.logger.critical(f"Redis connection failed: {str(e)}")
            raise ConnectionError(f"Redis connection error: {str(e)}")
        
    async def ping(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        try:
            is_alive = await self.redis.ping()
            if not is_alive:
                self.logger.warning("Redis ping returned False (—Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω?)")
            return is_alive
        except Exception as e:
            self.logger.error(f"Redis ping failed: {str(e)}")
            return False
        
    # ‚úÖ Pub/Sub
    def pubsub(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Pub/Sub –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Redis."""
        return self.redis.pubsub()

    # ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    def pipeline(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Redis-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        return self.redis.pipeline()

    # ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    async def unlink(self, key: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        await self.redis.unlink(key)

    # ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ TTL
    async def expire(self, key: str, seconds: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞."""
        await self.redis.expire(key, seconds)

    async def ttl(self, key: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞."""
        return await self.redis.ttl(key)

    # ‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∏ –¥–µ–∫—Ä–µ–º–µ–Ω—Ç
    async def incr(self, key: str, amount: int = 1):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è."""
        return await self.redis.incr(key, amount)

    async def decr(self, key: str, amount: int = 1):
        """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è."""
        return await self.redis.decr(key, amount)

    # ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ (Leaderboard)
    async def zadd(self, key: str, score: float, member: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ."""
        await self.redis.zadd(key, {member: score})

    async def zrange(self, key: str, start: int, stop: int, withscores: bool = True):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞."""
        return await self.redis.zrange(key, start, stop, withscores=withscores)

    async def hkeys(self, key: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π (–∫–ª—é—á–µ–π) —Ö—ç—à–∞ –≤ Redis."""
        return await self.redis.hkeys(key)

    # ‚úÖ –•—ç—à–∏ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    async def hset(self, key: str, field: str, value: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—è –≤ —Ö—ç—à–µ."""
        await self.redis.hset(key, field, value)

    async def hget(self, key: str, field: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ —Ö—ç—à–∞."""
        return await self.redis.hget(key, field)

    async def hgetall(self, key: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ö—ç—à–∞."""
        return await self.redis.hgetall(key)

    # ‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
    async def setnx(self, key: str, value: str):
        """–ó–∞–ø–∏—Å—å –∫–ª—é—á–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç (–∞—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)."""
        return await self.redis.setnx(key, value)

    async def publish(self, channel: str, message: str):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª."""
        return await self.redis.publish(channel, message)    

    # ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    async def set(self, key: str, value: str):
        await self.redis.set(key, value)

    async def get(self, key: str):
        return await self.redis.get(key)

    async def delete(self, key: str):
        await self.redis.delete(key)

    async def exists(self, key: str):
        return bool(await self.redis.exists(key))

    async def keys(self, pattern: str = "*"):
        return await self.redis.keys(pattern)

    async def rpush(self, key: str, value):
        return await self.redis.rpush(key, value)

    async def lrange(self, key: str, start: int, stop: int):
        return await self.redis.lrange(key, start, stop)

    async def ltrim(self, key: str, start: int, stop: int):
        await self.redis.ltrim(key, start, stop)

    async def llen(self, key: str):
        return await self.redis.llen(key)

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis."""
        await self.redis.aclose()

    async def get_task_keys(self, queue_name: str, use_lrange: bool = False):
        """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∑–∞–¥–∞—á."""
        if use_lrange:
            return await self.redis.lrange(queue_name, 0, -1)
        return await self.redis.keys(queue_name)
 
    async def get_tick_tasks(self, queue_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏ Redis."""
        return await self.redis.lrange(queue_name, 0, -1)

    async def hdel(self, key: str, *fields: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π –∏–∑ —Ö—ç—à–∞ Redis."""
        return await self.redis.hdel(key, *fields)
    
    async def set_json(self, key: str, value: dict):
        """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç dict –≤ JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Redis."""
        await self.redis.set(key, json.dumps(value))

    async def get_json(self, key: str) -> Optional[dict]:
        """–ß–∏—Ç–∞–µ—Ç JSON –∏–∑ Redis –∏ –ø–∞—Ä—Å–∏—Ç –≤ dict."""
        data = await self.redis.get(key)
        return json.loads(data) if data else None

    async def get(self, key: str, default: Any = None) -> Any:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç default, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç."""
        value = await self.redis.get(key)
        return value if value is not None else default
    
    
redis_client = RedisClient()

# üìå –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    import asyncio

    async def main():
        client = RedisClient()
        await client.set("test_key", "hello world")
        value = await client.get("test_key")
        print(f"Retrieved: {value}")
        await client.delete("test_key")
        await client.close()

    asyncio.run(main())
