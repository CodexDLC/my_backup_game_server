# api_fast/gateway/command_listener.py
import asyncio
import msgpack
from typing import Dict
import redis.asyncio as aioredis

# üëà –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
from game_server.api_fast.gateway.connection_manager import ConnectionManager
from game_server.api_fast.gateway.gateway_config import GATEWAY_CONSUMER_GROUP_NAME, GATEWAY_CONSUMER_NAME, GATEWAY_LISTEN_STREAMS
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger




class CommandListener:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —à–ª—é–∑–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç Redis Streams –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É.
    """
    def __init__(self, redis_client: aioredis.Redis, connection_manager: ConnectionManager):
        # üëà –£–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        self.redis = redis_client
        self.connection_manager = connection_manager
        self.streams_to_listen = {stream: '>' for stream in GATEWAY_LISTEN_STREAMS}
        self.is_running = False
        logger.info("‚úÖ CommandListener –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

    async def _ensure_consumer_groups_exist(self):
        """–ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç Consumer Group, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç."""
        for stream in self.streams_to_listen.keys():
            try:
                await self.redis.xgroup_create(stream, GATEWAY_CONSUMER_GROUP_NAME, id='0', mkstream=True)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è Consumer Group '{GATEWAY_CONSUMER_GROUP_NAME}' –¥–ª—è —Å—Ç—Ä–∏–º–∞ '{stream}'.")
            except aioredis.ResponseError as e:
                if "BUSYGROUP" in str(e):
                    logger.debug(f"Consumer Group '{GATEWAY_CONSUMER_GROUP_NAME}' –¥–ª—è —Å—Ç—Ä–∏–º–∞ '{stream}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                else:
                    raise

    async def listen_forever(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–∏–º–æ–≤."""
        await self._ensure_consumer_groups_exist()
        self.is_running = True
        logger.info(f"–°–ª—É—à–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è. –¶–µ–ª–µ–≤—ã–µ —Å—Ç—Ä–∏–º—ã: {list(self.streams_to_listen.keys())}")

        while self.is_running:
            try:
                messages = await self.redis.xreadgroup(
                    groupname=GATEWAY_CONSUMER_GROUP_NAME,
                    consumername=GATEWAY_CONSUMER_NAME,
                    streams=self.streams_to_listen,
                    count=1,
                    block=0
                )
                if not messages:
                    continue

                for _, message_list in messages:
                    for message_id, raw_message in message_list:
                        try:
                            packed_data = raw_message.get(b'data')
                            if not packed_data:
                                logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –±–µ–∑ –ø–æ–ª—è 'data'.")
                                continue
                                
                            command = msgpack.unpackb(packed_data, raw=False)
                            await self.connection_manager.send_command(command)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}", exc_info=True)

            except ConnectionError:
                logger.error("–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –≤ CommandListener. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5—Å...")
                await asyncio.sleep(5)
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ CommandListener: {e}", exc_info=True)
                await asyncio.sleep(5)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è."""
        self.is_running = False
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É CommandListener.")