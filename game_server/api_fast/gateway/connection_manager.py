# api_fast/gateway/connection_manager.py

from typing import List, Dict, Any
from fastapi import WebSocket

from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger

class ConnectionManager:
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º–∏ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ —Å Discord-–±–æ—Ç–æ–º.
    –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—Ö–æ—Ç—è –¥–ª—è –±–æ—Ç–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ)
    –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å.
    """
    def __init__(self):
        logger.info("‚úÖ ConnectionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (—Ö–æ—Ç—è –±–æ—Ç –æ–¥–∏–Ω)
        self.active_connections: List[WebSocket] = []
        self.connection_count = 0  # –î–æ–±–∞–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        
    async def connect(self, websocket: WebSocket):
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞.
        –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–†–ò–ù–Ø–¢–û (websocket.accept()) –î–û –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
        """
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –£–î–ê–õ–ò–¢–¨ accept() ---
        # await websocket.accept() # <--- –≠–¢–£ –°–¢–†–û–ö–£ –ù–£–ñ–ù–û –£–î–ê–õ–ò–¢–¨!
        # ----------------------------------------

        # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞:
        if self.active_connections:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∞–∫—Ç–∏–≤–Ω–æ–º. –°—Ç–∞—Ä–æ–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ.")
            old_ws = self.active_connections[0]
            if not old_ws.client_state.closed:
                await old_ws.close(code=1011, reason="New connection superseded old one.")
            self.active_connections.clear()
            self.connection_count = 0

        self.active_connections.append(websocket)
        self.connection_count += 1
        logger.info(f"üîå –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —à–ª—é–∑—É. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {self.connection_count}")


    def disconnect(self, websocket: WebSocket):
        """–û—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –±–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è."""
        if websocket in self.active_connections:
            self.active_connections.remove(websocket)
            self.connection_count -= 1
            logger.info(f"üîå –ë–æ—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —à–ª—é–∑–∞. –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {self.connection_count}")
        else:
            logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")


    async def send_command(self, command: Dict[str, Any]):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
        –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, —Ö–æ—Ç—è –¥–ª—è –±–æ—Ç–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ.
        """
        if self.active_connections:
            # –î–ª—è –≤–∞—à–µ–≥–æ —Å–ª—É—á–∞—è —Å –æ–¥–Ω–∏–º –±–æ—Ç–æ–º, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–µ—Ä–≤–æ–º—É –≤ —Å–ø–∏—Å–∫–µ:
            target_websocket = self.active_connections[0]
            try:
                await target_websocket.send_json(command)
                logger.debug(f"–ö–æ–º–∞–Ω–¥–∞ {command.get('type')}:{command.get('command_id')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É: {e}")
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ
                self.disconnect(target_websocket) # –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞
        else:
            logger.warning(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã {command.get('command_id')}.")

    @property
    def status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
        return {
            "active_connections": self.connection_count,
            "protocol": "websocket",
            "message": "WebSocket gateway for Discord bot"
        }