# api_fast/main.py

import os
import asyncio
from contextlib import asynccontextmanager
from fastapi import FastAPI, status
import redis.asyncio as aioredis
from dotenv import load_dotenv

# --- –ò–º–ø–æ—Ä—Ç—ã ---
from game_server.api_fast.gateway.command_listener import CommandListener
from game_server.api_fast.gateway.connection_manager import ConnectionManager
from game_server.api_fast.routers_config import ROUTERS_CONFIG
from game_server.api_fast.ws_routers_config import WS_ROUTERS_CONFIG
from game_server.Logic.InfrastructureLogic.logging.logging_setup import app_logger as logger
from game_server.config.settings_core import REDIS_URL, REDIS_PASSWORD, APP_VERSION

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –£–¥–∞–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ---
from game_server.api_fast.dependencies import get_connection_manager # –¢–æ–ª—å–∫–æ get_connection_manager

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
root_env = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '.env'))
load_dotenv(root_env)

required_env_vars = ["REDIS_URL", "REDIS_PASSWORD", "GATEWAY_BOT_SECRET"]
missing_vars = [var for var in required_env_vars if not os.getenv(var)]
if missing_vars:
    error_msg = f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —à–ª—é–∑–∞: {', '.join(missing_vars)}"
    logger.critical(error_msg)
    raise EnvironmentError(error_msg)

# --- –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è Swagger UI ---
tags_metadata = [
    {"name": "Gateway REST", "description": "REST API –¥–ª—è —Å–ª—É–∂–µ–±–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —à–ª—é–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥)."},
    {"name": "Gateway WebSocket", "description": "WebSocket API –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥."},
    {"name": "Root", "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."},
]

# --- Lifespan Manager: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —à–ª—é–∑–∞ ---
@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–æ–º –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ñ–æ–Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —à–ª—é–∑–∞.
    """
    logger.info("üöÄ –®–ª—é–∑ –∫–æ–º–∞–Ω–¥ (Command Gateway) –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    try:
        # 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î Redis (db: 0), –≥–¥–µ –ª–µ–∂–∞—Ç —Å—Ç—Ä–∏–º—ã –∫–æ–º–∞–Ω–¥
        redis_client = aioredis.from_url(REDIS_URL, password=REDIS_PASSWORD, decode_responses=False)
        await redis_client.ping()
        app.state.redis_client = redis_client
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –¥–ª—è —à–ª—é–∑–∞: {REDIS_URL}")
        
        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω–≥–ª—Ç–æ–Ω–æ–≤ –¥–ª—è —à–ª—é–∑–∞
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∫–ª–∞–¥–µ–º –≤ app.state ---
        app.state.connection_manager = ConnectionManager()
        logger.info("‚úÖ ConnectionManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        app.state.command_listener = CommandListener(
            redis_client=app.state.redis_client,
            connection_manager=app.state.connection_manager # –ë–µ—Ä–µ–º –∏–∑ app.state
        )
        logger.info("‚úÖ CommandListener –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        
        # 3. –ó–∞–ø—É—Å–∫ —Å–ª—É—à–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        listener_task = asyncio.create_task(app.state.command_listener.listen_forever())
        app.state.listener_task = listener_task
        logger.info("‚úÖ –°–ª—É—à–∞—Ç–µ–ª—å –∫–æ–º–∞–Ω–¥ Redis Stream –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")

    except Exception as e:
        logger.critical(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø—É—Å–∫–∞ —à–ª—é–∑–∞: {e}", exc_info=True)
        raise

    yield  # –®–ª—é–∑ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ

    logger.info("üëã –®–ª—é–∑ –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
    
    if hasattr(app.state, 'listener_task') and app.state.listener_task:
        if hasattr(app.state, 'command_listener'):
            app.state.command_listener.stop()
        app.state.listener_task.cancel()
        try:
            await app.state.listener_task
        except asyncio.CancelledError:
            logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    if hasattr(app.state, 'redis_client'):
        await app.state.redis_client.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —à–ª—é–∑–∞ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ.")
        
    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –û—á–∏—â–∞–µ–º app.state –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ---
    if hasattr(app.state, 'connection_manager'):
        del app.state.connection_manager
    # -------------------------------------------------------------------
        
    logger.info("‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Lifespan –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.")


# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI ---
app = FastAPI(
    title="Command Gateway API",
    description="–°–µ—Ä–≤–∏—Å-—à–ª—é–∑ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å Discord-–±–æ—Ç–æ–º.",
    version=os.getenv("APP_VERSION", "1.0.0"),
    openapi_tags=tags_metadata,
    lifespan=lifespan
)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ REST —Ä–æ—É—Ç–µ—Ä–æ–≤ ---
logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ REST —Ä–æ—É—Ç–µ—Ä–æ–≤ —à–ª—é–∑–∞...")
for router_config in ROUTERS_CONFIG:
    app.include_router(
        router_config["router"],
        prefix=router_config.get("prefix", ""),
        tags=router_config.get("tags", [])
    )
logger.info("‚úÖ REST —Ä–æ—É—Ç–µ—Ä—ã —à–ª—é–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Ä–æ—É—Ç–µ—Ä–æ–≤ ---
logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Ä–æ—É—Ç–µ—Ä–æ–≤...")
for ws_router_config in WS_ROUTERS_CONFIG:
    app.include_router(
        ws_router_config["router"],
        prefix=ws_router_config.get("prefix", ""),
        tags=ws_router_config.get("tags", [])
    )
logger.info("‚úÖ –í—Å–µ WebSocket —Ä–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")

# --- –ë–∞–∑–æ–≤—ã–π —Ä–æ—É—Ç ---
@app.get("/", tags=["Root"], status_code=status.HTTP_200_OK)
async def read_root():
    return {"message": "Command Gateway is alive"}