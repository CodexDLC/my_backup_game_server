# docker-compose.yml

# ===================================================================
# volumes & networks: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
# ===================================================================
volumes:
  pg_data:
    driver: local
  redis_bot_local_data:
    driver: local
  redis_central_data:
    driver: local
  mongo_data: # ‚úÖ –ù–û–í–û–ï: –¢–æ–º –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö MongoDB
    driver: local

networks:
  backend_network:
    driver: bridge

# ===================================================================
# x-templates: –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∫–æ—Ä—è –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—â–∏—Ö –±–ª–æ–∫–æ–≤
# ===================================================================
x-common-env: &common-env
  env_file: .env

x-common-restart-policy: &common-restart-policy
  restart: always

x-common-build-python: &common-build-python
  build:
    context: .
    # Dockerfile –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –≤ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–∏—Å–µ –æ—Ç–¥–µ–ª—å–Ω–æ

# ===================================================================
# üèóÔ∏è –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ù–´–ï –°–ï–†–í–ò–°–´
# ===================================================================
services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres_service
    hostname: postgres
    <<: [*common-env, *common-restart-policy]
    networks: [backend_network]
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mongo_db: # ‚úÖ –ù–û–í–û–ï: –°–µ—Ä–≤–∏—Å MongoDB
    image: mongo:6.0 # –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
    container_name: mongo_service # –ò–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è MongoDB
    hostname: mongo # –ò–º—è —Ö–æ—Å—Ç–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–µ—Ç–∏ Docker
    <<: [*common-env, *common-restart-policy] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    networks: [backend_network]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME} # –ß–∏—Ç–∞–µ–º –∏–∑ .env
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD} # –ß–∏—Ç–∞–µ–º –∏–∑ .env
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME} # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–æ–∑–¥–∞—Å—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    ports:
      - "27017:27017" # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç MongoDB –Ω–∞ —Ö–æ—Å—Ç
    volumes:
      - mongo_data:/data/db # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–º
    healthcheck: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è MongoDB
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet # –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å healthcheck postgres

  redis: # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π REDIS (–¥–ª—è Backend)
    image: redis:7.2-alpine
    container_name: redis_cache_service
    hostname: redis
    <<: [*common-env, *common-restart-policy]
    networks: [backend_network]
    command: redis-server --requirepass "${REDIS_PASSWORD}" --appendonly yes
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis_central_data:/data

  redis_bot_local: # –õ–û–ö–ê–õ–¨–ù–´–ô REDIS –î–õ–Ø DISCORD-–ë–û–¢–ê
    image: redis:7.2-alpine
    container_name: redis_bot_local_cache
    hostname: redis_bot_local
    <<: [*common-env, *common-restart-policy]
    networks: [backend_network]
    command: redis-server --appendonly yes
    volumes:
      - redis_bot_local_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# ===================================================================
# üöÄ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ò –ö–û–û–†–î–ò–ù–ê–¢–û–†–´
# ===================================================================
  fast_api:
    <<: [*common-env, *common-restart-policy, *common-build-python]
    networks: [backend_network]
    build:
      dockerfile: services_config/rest_api/Dockerfile
    container_name: fast_api_service
    command: gunicorn -k uvicorn.workers.UvicornWorker -w 1 -b 0.0.0.0:8000 game_server.api_fast.main:app
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # ‚úÖ –ù–û–í–´–ï: –ü–µ—Ä–µ–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö MongoDB –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä fast_api
      - MONGO_URI=${MONGO_URI}
      - MONGO_HOST=${MONGO_HOST_CONTAINER}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB_NAME=${MONGO_DB_NAME}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - CONTAINER_ID=fast_api_service # <--- –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–∫ ID
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      mongo_db: { condition: service_healthy } # ‚úÖ –ù–û–í–ê–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–¨
    volumes:
      - ./logs/fast_api_output:/app/game_server/logs
    healthcheck: # –î–û–ë–ê–í–¨–¢–ï –≠–¢–û–¢ –ë–õ–û–ö, –ï–°–õ–ò –ï–ì–û –ù–ï–¢
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"] # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç /health –µ—Å—Ç—å
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s # –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ FastAPI

  discord_bot:
    <<: [*common-env, *common-restart-policy, *common-build-python]
    networks: [backend_network]
    build:
      dockerfile: services_config/Discord_API/Dockerfile
    container_name: discord_bot_service
    command: python -m Discord_API.main
    environment:
      - DISCORD_TOKEN=${DISCORD_TOKEN}
      - REDIS_LOCAL_URL=redis://redis_bot_local:6379/0
      - GAME_SERVER_API=http://fast_api:8000 # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ fast_api
      - CONTAINER_ID=discord_bot_service # <--- –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–∫ ID
    depends_on:
      fast_api: { condition: service_started }
      redis_bot_local: { condition: service_healthy }
    volumes:
      - ./logs/discord_bot_output:/app/game_server/logs

  start_orchestrator:
    <<: [*common-env, *common-restart-policy, *common-build-python]
    networks: [backend_network]
    build:
      dockerfile: services_config/game_server/Dockerfile
    container_name: start_orchestrator_service
    command: uvicorn game_server.game_services.game_world_state_orchestrator:app --host 0.0.0.0 --port 8000
    
    # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # ‚úÖ –ù–û–í–´–ï: –ü–µ—Ä–µ–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö MongoDB
      - MONGO_URI=${MONGO_URI}
      - MONGO_HOST=${MONGO_HOST_CONTAINER}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB_NAME=${MONGO_DB_NAME}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - CONTAINER_ID=start_orchestrator_service # <--- –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–∫ ID
    
    # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç Redis –∏ MongoDB
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      mongo_db: { condition: service_healthy } # ‚úÖ –ù–û–í–ê–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–¨
      
    volumes:
      - ./logs/start_orchestrator_output:/app/game_server/logs # –û–±–Ω–æ–≤–ª–µ–Ω –ø—É—Ç—å –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏


# ===================================================================
# üî• –ù–û–í–´–ô –°–ï–†–í–ò–°: ARQ –í–û–†–ö–ï–† üî•
# ===================================================================

  arq_worker:
    <<: [*common-env, *common-restart-policy, *common-build-python]
    networks: [backend_network]
    build:
      dockerfile: services_config/game_server/Dockerfile
    container_name: arq_worker_service
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–î–ê–õ–ï–ù–ê –û–ü–¶–ò–Ø --watch
    command: arq game_server.Logic.InfrastructureLogic.arq_worker.arq_worker_settings.WorkerSettings
    
    # –í–æ—Ä–∫–µ—Ä—É –Ω—É–∂–Ω—ã —Ç–µ –∂–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ Redis
    environment:
      - REDIS_URL=redis://redis:6379/0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      # ‚úÖ –ù–û–í–´–ï: –ü–µ—Ä–µ–¥–∞—á–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö MongoDB
      - MONGO_URI=${MONGO_URI}
      - MONGO_HOST=${MONGO_HOST_CONTAINER}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_DB_NAME=${MONGO_DB_NAME}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - CONTAINER_ID=arq_worker_service # <--- –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞—á–∞ –∏–º–µ–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞–∫ ID
      
    # –í–æ—Ä–∫–µ—Ä –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ë–î, Redis –∏ MongoDB –≥–æ—Ç–æ–≤—ã
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy }
      mongo_db: { condition: service_healthy } # ‚úÖ –ù–û–í–ê–Ø –ó–ê–í–ò–°–ò–ú–û–°–¢–¨      
    volumes:
      - ./logs/arq_worker_output:/app/game_server/logs
