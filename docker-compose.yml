# docker-compose.yml

# ===================================================================
# volumes & networks: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ö –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
# ===================================================================
volumes:
  pg_data:
    driver: local
  rabbitmq_data:
    driver: local
  # –ù–û–í–´–ô –¢–û–ú: –î–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Redis –±–æ—Ç–∞
  redis_bot_local_data:
    driver: local
  # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—ä—è–≤–ª—è–µ–º —Ç–æ–º –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ Redis –∑–¥–µ—Å—å
  redis_central_data:
    driver: local

networks:
  backend_network:
    driver: bridge

# ===================================================================
# x-templates: –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∫–æ—Ä—è –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—â–∏—Ö –±–ª–æ–∫–æ–≤
# ===================================================================
x-common-env: &common-env
  # –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ .env —Ñ–∞–π–ª
  env_file: .env

x-common-restart-policy: &common-restart-policy
  # –ï–¥–∏–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è –≤—Å–µ—Ö –¥–æ–ª–≥–æ–∂–∏–≤—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
  restart: always

x-common-build: &common-build-python
  # –ï–¥–∏–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±–æ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö Python-—Å–µ—Ä–≤–∏—Å–æ–≤
  build:
    context: .
    # Dockerfile –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω –≤ –∫–∞–∂–¥–æ–º —Å–µ—Ä–≤–∏—Å–µ –æ—Ç–¥–µ–ª—å–Ω–æ

# ===================================================================
# üíæ –ò–ù–§–†–ê–°–¢–†–£–ö–¢–£–†–ù–´–ï –°–ï–†–í–ò–°–´
# ===================================================================
services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres_service
    hostname: postgres
    <<: [*common-env, *common-restart-policy]
    networks: [backend_network]
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis: # –≠–¢–û –í–ê–® –¶–ï–ù–¢–†–ê–õ–¨–ù–´–ô REDIS (–¥–ª—è Backend)
    image: redis:7.2-alpine
    container_name: redis_cache_service
    hostname: redis
    <<: [*common-env, *common-restart-policy]
    networks: [backend_network]
    command: redis-server --requirepass "${REDIS_PASSWORD}" --appendonly yes # –î–æ–±–∞–≤–∏–ª appendonly yes –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    # –¢–æ–º –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ Redis
    volumes:
      - redis_central_data:/data

  # –ù–û–í–´–ô –°–ï–†–í–ò–°: –õ–û–ö–ê–õ–¨–ù–´–ô REDIS –î–õ–Ø DISCORD-–ë–û–¢–ê
  redis_bot_local:
    image: redis:7.2-alpine # –¢–æ—Ç –∂–µ –æ–±—Ä–∞–∑ Redis
    container_name: redis_bot_local_cache # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    hostname: redis_bot_local # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ö–æ—Å—Ç–∞ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–µ—Ç–∏
    <<: [*common-env, *common-restart-policy]
    networks: [backend_network] # –í —Ç–æ–π –∂–µ —Å–µ—Ç–∏, —á—Ç–æ –∏ Discord-–±–æ—Ç
    # –ü–æ—Ä—Ç 6379 –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. –ù–µ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ —Ö–æ—Å—Ç, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø.
    command: redis-server --appendonly yes # –í–∫–ª—é—á–∞–µ–º AOF –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
    volumes:
      - redis_bot_local_data:/data # –û—Ç–¥–µ–ª—å–Ω—ã–π —Ç–æ–º –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"] # –ü–∞—Ä–æ–ª—å –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: rabbitmq_broker_service
    hostname: rabbitmq
    <<: [*common-env, *common-restart-policy]
    networks: [backend_network]
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

# ===================================================================
# üöÄ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ò –ö–û–û–†–î–ò–ù–ê–¢–û–†–´
# ===================================================================
  rest_api:
    <<: [*common-env, *common-restart-policy, *common-build-python]
    networks: [backend_network]
    build:
      dockerfile: services_config/rest_api/Dockerfile
    container_name: rest_api_service
    command: gunicorn -k uvicorn.workers.UvicornWorker -w 1 -b 0.0.0.0:8000 game_server.api_rest.main:app
    ports:
      - "8000:8000"
    environment: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ Backend —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Redis
      - REDIS_URL=redis://redis:6379/0 # –≠—Ç–æ –≤–∞—à —Ç–µ–∫—É—â–∏–π "redis" —Å–µ—Ä–≤–∏—Å
      - REDIS_PASSWORD=${REDIS_PASSWORD} # –ï—Å–ª–∏ Redis —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å
    depends_on:
      postgres: { condition: service_healthy }
      redis: { condition: service_healthy } # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ Redis
      rabbitmq: { condition: service_healthy }
    volumes:
      - ./logs/rest_api_output:/app/game_server/logs # –õ–æ–≥–∏ REST API –±—É–¥—É—Ç –∑–¥–µ—Å—å

  discord_bot:
    <<: [*common-env, *common-restart-policy, *common-build-python]
    networks: [backend_network] # –ë–æ—Ç –≤ —Ç–æ–π –∂–µ —Å–µ—Ç–∏, —á—Ç–æ –∏ Backend, –∏ –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω—ã–π Redis
    build:
      dockerfile: services_config/Discord_API/Dockerfile # –í–∞—à —Ç–µ–∫—É—â–∏–π Dockerfile –¥–ª—è –±–æ—Ç–∞
    container_name: discord_bot_service
    command: python -m Discord_API.main # –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    environment: # –¢–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –±–æ—Ç—É
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN} # –¢–æ–∫–µ–Ω Discord –±–æ—Ç–∞
      - REDIS_LOCAL_URL=redis://redis_bot_local:6379/0 # URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –µ–≥–æ –õ–û–ö–ê–õ–¨–ù–û–ú–£ Redis
      - RABBITMQ_URL=amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672/ # URL RabbitMQ (–µ—Å–ª–∏ –±–æ—Ç –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç RabbitMQ –¥–ª—è —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á)
      - REST_API_URL=http://rest_api:8000 # URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ FastAPI Backend
    depends_on:
      rest_api: { condition: service_started } # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç Backend
      redis_bot_local: { condition: service_healthy } # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Redis –±–æ—Ç–∞
      rabbitmq: { condition: service_healthy } # –û—Å—Ç–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –±–æ—Ç –Ω–∞–ø—Ä—è–º—É—é —Ä–∞–±–æ—Ç–∞–µ—Ç —Å RabbitMQ
    volumes:
      - ./logs/discord_bot_output:/app/game_server/logs # –õ–æ–≥–∏ Discord –±–æ—Ç–∞ –±—É–¥—É—Ç –∑–¥–µ—Å—å


  # --- –ö–û–û–†–î–ò–ù–ê–¢–û–†–´ –ö–ê–ö –û–¢–î–ï–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´ ---
  tick_coordinator:
    <<: [*common-env, *common-restart-policy, *common-build-python]
    networks: [backend_network]
    build:
      dockerfile: services_config/game_server/Dockerfile
    container_name: tick_coordinator_service
    command: python -m game_server.Logic.ApplicationLogic.coordinator_tick.tick_coordinator
    depends_on:
      postgres: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    volumes:
      - ./logs/tick_coordinator_output:/app/game_server/logs # –õ–æ–≥–∏ Tick Coordinator –±—É–¥—É—Ç –∑–¥–µ—Å—å


  generator_coordinator:
    <<: [*common-env, *common-restart-policy, *common-build-python]
    networks: [backend_network]
    build:
      dockerfile: services_config/game_server/Dockerfile
    container_name: generator_coordinator_service
    command: python -m game_server.Logic.ApplicationLogic.coordinator_generator.coordinator_generator
    depends_on:
      postgres: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    volumes:
      - ./logs/generator_coordinator_output:/app/game_server/logs # –õ–æ–≥–∏ Generator Coordinator –±—É–¥—É—Ç –∑–¥–µ—Å—å


# ===================================================================
# üßë‚Äçüîß –í–û–†–ö–ï–†–´ (–†–∞–±–æ—á–∏–µ)
# ===================================================================

  celery_worker:
    <<: [*common-env, *common-restart-policy, *common-build-python]
    networks: [backend_network]
    build:
      dockerfile: services_config/celery_worker/Dockerfile
    container_name: celery_worker_service
    command:
      - "celery"
      - "-A"
      - "game_server.Logic.InfrastructureLogic.celery.celery_app"
      - "worker"
      - "--loglevel=info" # –ò–ª–∏ debug, –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ info
      - "-P"
      - "threads"
      - "--concurrency=50"
      - "-Q"
      - "character_generation_worker_queue,item_generation_worker_queue"
    depends_on:
      postgres: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
    volumes:
      - ./logs/celery_worker_output:/app/game_server/logs
