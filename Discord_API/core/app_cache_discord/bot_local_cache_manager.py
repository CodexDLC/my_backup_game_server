# Discord_API/app_cache/bot_local_cache_manager.py

import json
from typing import Any, Dict, List, Optional
import logging



# üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
from Discord_API.core.app_cache_discord.redis_constants import (
    KEY_PREFIX_USERS,
    KEY_PREFIX_CHANNELS_CONTEXT,
    KEY_PREFIX_DISPLAYED_ITEMS,
    KEY_PREFIX_REF_DATA, # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±–æ—Ç—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä

    KEY_FILE_USER_PROFILE,
    KEY_FILE_USER_STATUS_FLAGS,
    KEY_FILE_USER_CHARACTER_SNAPSHOT,
    KEY_FILE_USER_INVENTORY_SNAPSHOT,
    KEY_FILE_USER_GROUP_SNAPSHOT,
    KEY_FILE_USER_CHANNEL_IDS_LIST,

    DEFAULT_TTL_USER_CONTEXT,
    DEFAULT_TTL_CHANNEL_CONTEXT,
    DEFAULT_TTL_DISPLAYED_ITEM,
    DEFAULT_TTL_REF_DATA # –î–ª—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
)
from Discord_API.core.app_cache_discord import discord_redis_client

logger = logging.getLogger("bot_cache_manager")

class BotLocalCacheManager:
    def __init__(self, redis_client=discord_redis_client):
        self.redis = redis_client

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (profile) ---
    async def get_user_profile(self, discord_account_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞."""
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_PROFILE}"
        return await self.redis.get_json(key)

    async def set_user_profile(self, discord_account_id: str, profile_data: Dict[str, Any], ttl_seconds: Optional[int] = DEFAULT_TTL_USER_CONTEXT):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫—ç—à–µ."""
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_PROFILE}"
        await self.redis.set_json(key, profile_data)
        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {discord_account_id} –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º Redis.")

    async def delete_user_profile(self, discord_account_id: str):
        """–£–¥–∞–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞."""
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_PROFILE}"
        await self.redis.delete(key)
        logger.info(f"–£–¥–∞–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {discord_account_id} –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Redis.")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (status_flags) ---
    async def get_character_status_flags(self, discord_account_id: str) -> Optional[Dict[str, Any]]:
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_STATUS_FLAGS}"
        return await self.redis.get_json(key)

    async def set_character_status_flags(self, discord_account_id: str, status_data: Dict[str, Any], ttl_seconds: Optional[int] = DEFAULT_TTL_USER_CONTEXT):
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_STATUS_FLAGS}"
        await self.redis.set_json(key, status_data)
        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã —Ñ–ª–∞–≥–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {discord_account_id}.")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–Ω–∞–ø—à–æ—Ç–∞–º–∏ (character_snapshot) ---
    async def get_character_snapshot(self, discord_account_id: str) -> Optional[Dict[str, Any]]:
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_CHARACTER_SNAPSHOT}"
        return await self.redis.get_json(key)

    async def set_character_snapshot(self, discord_account_id: str, snapshot_data: Dict[str, Any], ttl_seconds: Optional[int] = DEFAULT_TTL_USER_CONTEXT):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–π —Å–Ω–∞–ø—à–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ WS)."""
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_CHARACTER_SNAPSHOT}"
        await self.redis.set_json(key, snapshot_data)
        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–Ω–∞–ø—à–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {discord_account_id} –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º Redis.")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º (inventory_snapshot) ---
    async def get_inventory_snapshot(self, discord_account_id: str) -> Optional[Dict[str, Any]]:
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_INVENTORY_SNAPSHOT}"
        return await self.redis.get_json(key)

    async def set_inventory_snapshot(self, discord_account_id: str, snapshot_data: Dict[str, Any], ttl_seconds: Optional[int] = DEFAULT_TTL_USER_CONTEXT):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–Ω–∞–ø—à–æ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_INVENTORY_SNAPSHOT}"
        await self.redis.set_json(key, snapshot_data)
        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–Ω–∞–ø—à–æ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {discord_account_id} –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º Redis.")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–æ–π (group_snapshot) ---
    async def get_group_snapshot(self, discord_account_id: str) -> Optional[Dict[str, Any]]:
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_GROUP_SNAPSHOT}"
        return await self.redis.get_json(key)

    async def set_group_snapshot(self, discord_account_id: str, snapshot_data: Dict[str, Any], ttl_seconds: Optional[int] = DEFAULT_TTL_USER_CONTEXT):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–Ω–∞–ø—à–æ—Ç –≥—Ä—É–ø–ø—ã."""
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_GROUP_SNAPSHOT}"
        await self.redis.set_json(key, snapshot_data)
        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–Ω–∞–ø—à–æ—Ç –≥—Ä—É–ø–ø—ã –¥–ª—è {discord_account_id} –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º Redis.")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤ (channel_ids) ---
    async def get_user_channel_ids(self, discord_account_id: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_CHANNEL_IDS_LIST}"
        channel_ids_json = await self.redis.get_json(key)
        return channel_ids_json if isinstance(channel_ids_json, list) else []

    async def set_user_channel_ids(self, discord_account_id: str, channel_ids: List[str], ttl_seconds: Optional[int] = DEFAULT_TTL_USER_CONTEXT):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        key = f"{KEY_PREFIX_USERS}:{discord_account_id}:{KEY_FILE_USER_CHANNEL_IDS_LIST}"
        await self.redis.set_json(key, channel_ids)
        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {discord_account_id}.")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ---
    async def get_channel_context(self, discord_account_id: str, channel_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
        # KEY_PREFIX_CHANNELS_CONTEXT –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–æ–π
        key = f"{KEY_PREFIX_CHANNELS_CONTEXT.format(discord_account_id=discord_account_id)}:{channel_id}"
        return await self.redis.get_json(key)

    async def set_channel_context(self, discord_account_id: str, channel_id: str, context_data: Dict[str, Any], ttl_seconds: Optional[int] = DEFAULT_TTL_CHANNEL_CONTEXT):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
        key = f"{KEY_PREFIX_CHANNELS_CONTEXT.format(discord_account_id=discord_account_id)}:{channel_id}"
        await self.redis.set_json(key, context_data)
        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–Ω–∞–ª–∞ {channel_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {discord_account_id}.")

    async def delete_channel_context(self, discord_account_id: str, channel_id: str):
        """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
        key = f"{KEY_PREFIX_CHANNELS_CONTEXT.format(discord_account_id=discord_account_id)}:{channel_id}"
        await self.redis.delete(key)
        logger.info(f"–£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–Ω–∞–ª–∞ {channel_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {discord_account_id}.")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ ---
    async def get_displayed_item_context(self, discord_account_id: str, item_uuid: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."""
        # KEY_PREFIX_DISPLAYED_ITEMS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º–æ–π —Å—Ç—Ä–æ–∫–æ–π
        key = f"{KEY_PREFIX_DISPLAYED_ITEMS.format(discord_account_id=discord_account_id)}:{item_uuid}"
        return await self.redis.get_json(key)

    async def set_displayed_item_context(self, discord_account_id: str, item_uuid: str, item_data: Dict[str, Any], ttl_seconds: Optional[int] = DEFAULT_TTL_DISPLAYED_ITEM):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."""
        key = f"{KEY_PREFIX_DISPLAYED_ITEMS.format(discord_account_id=discord_account_id)}:{item_uuid}"
        await self.redis.set_json(key, item_data)
        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_uuid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {discord_account_id}.")

    async def delete_displayed_item_context(self, discord_account_id: str, item_uuid: str):
        """–£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."""
        key = f"{KEY_PREFIX_DISPLAYED_ITEMS.format(discord_account_id=discord_account_id)}:{item_uuid}"
        await self.redis.delete(key)
        logger.info(f"–£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_uuid} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {discord_account_id}.")

    # --- –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ---
    async def get_global_ref_data(self, data_type: str, item_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —à–∞–±–ª–æ–Ω –ø—Ä–µ–¥–º–µ—Ç–∞, –Ω–∞–≤—ã–∫)."""
        key = f"{KEY_PREFIX_REF_DATA}:{data_type}:{item_id}"
        return await self.redis.get_json(key)

    async def set_global_ref_data(self, data_type: str, item_id: str, data: Dict[str, Any], ttl_seconds: Optional[int] = DEFAULT_TTL_REF_DATA):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        key = f"{KEY_PREFIX_REF_DATA}:{data_type}:{item_id}"
        await self.redis.set_json(key, data)
        if ttl_seconds is not None:
            await self.redis.expire(key, ttl_seconds)
        logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {data_type}:{item_id}.")


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±–æ—Ç–µ
bot_local_cache_manager = BotLocalCacheManager()