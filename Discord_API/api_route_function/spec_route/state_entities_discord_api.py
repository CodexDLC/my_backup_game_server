import json
import aiohttp
from typing import List, Dict, Union
from Discord_API.config.logging.logging_setup import logger
from Discord_API.discord_settings import API_URL # –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL API –∏ –ª–æ–≥–≥–µ—Ä
# from Discord_API.settings import API_URL
# from Discord_API.config.logging.logging_setup import logger

BASE_PATH = "/discord"            # –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è Discord API
# from logging_setup import logger # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ logger —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω


async def get_all_entities_discord(guild_id: int) -> Dict:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–∏–ª—å–¥–∏–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö."""
    if guild_id is None:
        logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π `guild_id`, –æ—Ç–º–µ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π.")
        return {"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π guild_id"}

    url = f"{API_URL}{BASE_PATH}/entities/{guild_id}"
    logger.info(f"üõ† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ API: {url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                response_json = await response.json()
                if response.status >= 400:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –æ—Ç API: {response.status} - {response_json.get('detail', response_json)}")
                else:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç API: {response_json}")
                return response_json
    except aiohttp.ClientConnectorError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API ({url}): {e}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"}
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}", exc_info=True)
        return {"error": f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}


async def get_entity_by_primary_key_discord(guild_id: int, world_id: str, access_code: int) -> Dict:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É."""
    if not all([guild_id, world_id, access_code]):
        logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ü–ö.")
        return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö."}

    url = f"{API_URL}{BASE_PATH}/entity_by_pk/{guild_id}/{world_id}/{access_code}"
    logger.info(f"üõ† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ API: {url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                response_json = await response.json()
                if response.status >= 400:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ü–ö –æ—Ç API: {response.status} - {response_json.get('detail', response_json)}")
                else:
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å –ø–æ –ü–ö: {response_json}")
                return response_json
    except aiohttp.ClientConnectorError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API ({url}): {e}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"}
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ –ü–ö: {e}", exc_info=True)
        return {"error": f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}


async def update_entity_discord(guild_id: int, world_id: str, access_code: int, entity_data: dict) -> Dict:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É."""
    if not all([guild_id, world_id, access_code, entity_data]):
        logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏: guild_id, world_id, access_code –∏ entity_data –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
        return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."}

    url = f"{API_URL}{BASE_PATH}/update_by_pk/{guild_id}/{world_id}/{access_code}"
    logger.info(f"üõ† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PUT –∑–∞–ø—Ä–æ—Å –∫ API: {url} —Å –¥–∞–Ω–Ω—ã–º–∏: {entity_data}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.put(url, json=entity_data) as response:
                response_json = await response.json()
                if response.status >= 400:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –≤ API: {response.status} - {response_json.get('detail', response_json)}")
                else:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å: {response_json}")
                return response_json
    except aiohttp.ClientConnectorError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API ({url}): {e}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"}
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
        return {"error": f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}


async def delete_entity_discord(guild_id: int, world_id: str, access_code: int) -> Dict:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª–Ω–æ–º—É –ø–µ—Ä–≤–∏—á–Ω–æ–º—É –∫–ª—é—á—É."""
    if not all([guild_id, world_id, access_code]):
        logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏: guild_id, world_id, access_code –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.")
        return {"error": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."}

    url = f"{API_URL}{BASE_PATH}/delete_by_pk/{guild_id}/{world_id}/{access_code}"
    logger.info(f"üõ† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DELETE –∑–∞–ø—Ä–æ—Å –∫ API: {url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.delete(url) as response:
                response_json = await response.json()
                if response.status >= 400:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –≤ API: {response.status} - {response_json.get('detail', response_json)}")
                else:
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å: {response_json}")
                return response_json
    except aiohttp.ClientConnectorError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API ({url}): {e}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"}
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–∏: {e}", exc_info=True)
        return {"error": f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}


async def create_roles_discord(roles_batch: List[Dict]) -> Dict:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π —Ä–æ–ª–µ–π –≤ –ë–î (UPSERT)."""
    if not roles_batch:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π.")
        return {"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."}

    url = f"{API_URL}{BASE_PATH}/create_roles/" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ—É—Ç –¥–ª—è create_roles
    logger.info(f"üõ† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ API: {url} —Å {len(roles_batch)} –∑–∞–ø–∏—Å—è–º–∏.")
    # print(f"üöÄ –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ API (create_roles_discord): {json.dumps(roles_batch, indent=2, ensure_ascii=False)}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                url,
                json=roles_batch,
                headers={"Content-Type": "application/json"}
            ) as response:
                # print(f"üîç Status (create_roles_discord): {response.status}")
                # print(f"üîç Headers (create_roles_discord): {response.headers}")
                response_text = await response.text()
                # print(f"üîç Response (create_roles_discord): {response_text}")

                try:
                    if "application/json" in response.headers.get("Content-Type", ""):
                        response_json = json.loads(response_text) # –ò—Å–ø–æ–ª—å–∑—É–µ–º json.loads –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
                        if response.status >= 400:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π –≤ API: {response.status} - {response_json.get('detail', response_json)}")
                        else:
                            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π: {response_json}")
                        return response_json
                    else:
                        logger.warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª `text/plain` –¥–ª—è create_roles_discord, –≤–æ–∑–º–æ–∂–Ω–æ, –æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞: {response_text}")
                        return {"error": response_text}
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON-–æ—Ç–≤–µ—Ç–∞ –¥–ª—è create_roles_discord: {e}. –û—Ç–≤–µ—Ç: {response_text}", exc_info=True)
                    return {"error": response_text}
    except aiohttp.ClientConnectorError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API ({url}): {e}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}"}
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π: {e}", exc_info=True)
        return {"error": f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"}