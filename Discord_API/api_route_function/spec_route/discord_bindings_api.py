# Discord_API\api_route_function\spec_route\discord_bindings_api.py

import json
import aiohttp
from typing import List, Dict, Any, Optional

from Discord_API.discord_settings import API_URL # –í–∞—à –±–∞–∑–æ–≤—ã–π URL API
from Discord_API.config.logging.logging_setup import logger # –í–∞—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä

# –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –ø—Ä–∏–≤—è–∑–æ–∫ Discord API
# üî• –û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ /discord/bindings (–±–µ–∑ —Å–ª–µ—à–∞ –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø—É—Ç–∏)
BASE_PATH = "/discord/bindings"

class DiscordAPIClientError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Discord API."""
    pass

async def upsert_discord_bindings_api(bindings_data: List[Dict]) -> Dict[str, Any]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç UPSERT (–≤—Å—Ç–∞–≤–∫—É/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ) –ø—Ä–∏–≤—è–∑–æ–∫ Discord —á–µ—Ä–µ–∑ API.
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ—É—Ç—É POST /discord/bindings/upsert.

    Args:
        bindings_data (List[Dict]): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–≤—è–∑–æ–∫.

    Returns:
        Dict[str, Any]: –û—Ç–≤–µ—Ç –æ—Ç API (–Ω–∞–ø—Ä–∏–º–µ—Ä, {"status": "success", ...}).

    Raises:
        DiscordAPIClientError: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ HTTP-–∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ API.
    """
    # üî• –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL –¥–ª—è —Ä–æ—É—Ç–∞ UPSERT
    url = f"{API_URL}{BASE_PATH}/upsert" 
    
    json_data = json.dumps(bindings_data, ensure_ascii=False)
    logger.debug(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ UPSERT –∑–∞–ø—Ä–æ—Å–∞ –≤ API: {url} —Å –¥–∞–Ω–Ω—ã–º–∏: {json_data[:200]}...") # –û–≥—Ä–∞–Ω–∏—á–∏–º –≤—ã–≤–æ–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=json_data, headers={"Content-Type": "application/json"}) as response:
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: {response.status} –¥–ª—è {url}")
                response_json = {}
                try:
                    response_json = await response.json()
                    logger.debug(f"üîç –û—Ç–≤–µ—Ç API: {response_json}")
                except aiohttp.ContentTypeError:
                    response_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞: –û—Ç–≤–µ—Ç API –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON. –°—Ç–∞—Ç—É—Å: {response.status}, –¢–µ–∫—Å—Ç: {response_text}")
                    raise DiscordAPIClientError(f"API –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON –æ—Ç–≤–µ—Ç. –°—Ç–∞—Ç—É—Å: {response.status}, –¢–µ–∫—Å—Ç: {response_text}")

                if 200 <= response.status < 300: # –£—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã (2xx)
                    return response_json
                else:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, HTTPException)
                    error_detail = response_json.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API")
                    logger.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É. –°—Ç–∞—Ç—É—Å: {response.status}, –î–µ—Ç–∞–ª–∏: {error_detail}")
                    raise DiscordAPIClientError(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status} - {error_detail}")

    except aiohttp.ClientError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API {url}: {e}", exc_info=True)
        raise DiscordAPIClientError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}") from e
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ UPSERT –ø—Ä–∏–≤—è–∑–æ–∫: {e}", exc_info=True)
        raise DiscordAPIClientError(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}") from e


async def get_discord_binding_api(guild_id: int, access_key: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–¥–Ω—É –ø—Ä–∏–≤—è–∑–∫—É Discord —á–µ—Ä–µ–∑ API.
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ—É—Ç—É GET /discord/bindings/{guild_id}/{access_key}.
    """
    url = f"{API_URL}{BASE_PATH}/{guild_id}/{access_key}"
    logger.debug(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –≤ API: {url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: {response.status} –¥–ª—è {url}")
                if response.status == 404:
                    logger.info(f"–ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è guild_id={guild_id}, access_key='{access_key}'.")
                    return None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                
                response_json = await response.json() # –û–∂–∏–¥–∞–µ–º JSON –∏–ª–∏ ContentTypeError
                if 200 <= response.status < 300:
                    return response_json.get("data") # –ù–∞—à API —Ä–æ—É—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {"status": "found", "data": binding}
                else:
                    error_detail = response_json.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API")
                    raise DiscordAPIClientError(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status} - {error_detail}")
    except aiohttp.ClientError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API {url}: {e}", exc_info=True)
        raise DiscordAPIClientError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}") from e
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏: {e}", exc_info=True)
        raise DiscordAPIClientError(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}") from e

async def get_all_discord_bindings_api(guild_id: int) -> List[Dict[str, Any]]: # üî• –î–û–ë–ê–í–õ–ï–ù guild_id
    """
    –ü–æ–ª—É—á–∞–µ—Ç –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ Discord –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–∏–ª—å–¥–∏–∏ —á–µ—Ä–µ–∑ API.
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ—É—Ç—É GET /discord/bindings/guild/{guild_id}/all.
    """
    url = f"{API_URL}{BASE_PATH}/guild/{guild_id}/all" # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô URL
    logger.debug(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ GET –∑–∞–ø—Ä–æ—Å–∞ –≤ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫: {url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: {response.status} –¥–ª—è {url}")
                
                response_json = await response.json()
                if 200 <= response.status < 300:
                    return response_json.get("data", []) 
                else:
                    error_detail = response_json.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API")
                    raise DiscordAPIClientError(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status} - {error_detail}")
    except aiohttp.ClientError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API {url}: {e}", exc_info=True)
        raise DiscordAPIClientError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}") from e
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫: {e}", exc_info=True)
        raise DiscordAPIClientError(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}") from e


async def delete_discord_binding_api(guild_id: int, access_key: str) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É Discord —á–µ—Ä–µ–∑ API.
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–æ—É—Ç—É DELETE /discord/bindings/{guild_id}/{access_key}.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–æ, False –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    url = f"{API_URL}{BASE_PATH}/{guild_id}/{access_key}"
    logger.debug(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ DELETE –∑–∞–ø—Ä–æ—Å–∞ –≤ API: {url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.delete(url) as response:
                logger.info(f"üîç –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: {response.status} –¥–ª—è {url}")
                if response.status == 200:
                    return True # –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
                elif response.status == 404:
                    return False # –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                else:
                    response_json = {}
                    try:
                        response_json = await response.json()
                    except aiohttp.ContentTypeError:
                        pass # –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ-JSON –æ—Ç–≤–µ—Ç
                    error_detail = response_json.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API")
                    raise DiscordAPIClientError(f"API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {response.status} - {error_detail}")
    except aiohttp.ClientError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ API {url}: {e}", exc_info=True)
        raise DiscordAPIClientError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}") from e
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—è–∑–∫–∏: {e}", exc_info=True)
        raise DiscordAPIClientError(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}") from e

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ update_binding –∏ get_binding (–ø–æ guild_id –±–µ–∑ access_key)
# —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ API —Ä–æ—É—Ç–æ–≤ –∏ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.