
from typing import Any, Dict, List
import aiohttp
from Discord_API.config.logging.logging_setup import logger
from Discord_API.discord_settings import API_URL



BASE_PATH = "/system/mapping"





async def get_all_entities() -> Dict[str, List[Any]]:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π `state_entities` –∏–∑ API.
    –û–∂–∏–¥–∞–µ—Ç API-–æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {"status": "success", "data": [...]}.
    """
    
    logger.info("üõ† –ó–∞–ø—Ä–æ—Å `state_entities` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π...") # –ò–ª–∏ print()
    url = f"{API_URL}{BASE_PATH}/state-entities"
    logger.info(f"üõ† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å: {url}") # –ò–ª–∏ print()

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                logger.info(f"üõ† –ü–æ–ª—É—á–µ–Ω HTTP-–æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {response.status}") # –ò–ª–∏ print()
                response.raise_for_status() # –í—ã–∑–æ–≤–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ 4xx/5xx

                data = await response.json()
                logger.info(f"‚úÖ API-–æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {data}") # üî• –≠—Ç–æ –≤–∞—à –ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö–æ—Ç–µ–ª–∏ —É–≤–∏–¥–µ—Ç—å

                # üöÄ –û–∂–∏–¥–∞–µ–º, —á—Ç–æ data —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á 'data'
                if isinstance(data, dict) and "data" in data:
                    logger.debug(f"üí° –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ 'data' –∫–ª—é—á–µ: {len(data['data'])} –∑–∞–ø–∏—Å–µ–π.") # –ò–ª–∏ print()
                    return {"roles": data["data"]}
                else:
                    # ‚ùå –ï—Å–ª–∏ API-–æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É {"status": ..., "data": ...}
                    logger.warning( # –ò–ª–∏ print()
                        f"‚ö†Ô∏è –û—à–∏–±–∫–∞! API-–æ—Ç–≤–µ—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. "
                        f"–û–∂–∏–¥–∞–ª–∏ dict —Å –∫–ª—é—á–æ–º 'data', –ø–æ–ª—É—á–∏–ª–∏ {type(data)}: {data}"
                    )
                    return {"roles": []}

    except aiohttp.ClientError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP-–∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}", exc_info=True) # –ò–ª–∏ print()
        return {"roles": []}
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}", exc_info=True) # –ò–ª–∏ print()
        return {"roles": []}




async def get_entity_by_access_code(access_code: int):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ `state_entities_discord` –ø–æ `access_code`."""
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}{BASE_PATH}/state-entities/{access_code}") as response:
            return await response.json()


async def get_state_by_access_code(access_code: int):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ `access_code`."""
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/state-entities/{access_code}") as response:
            return await response.json()

async def update_state_status(access_code: int, is_active: bool):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è (`is_active`)."""
    async with aiohttp.ClientSession() as session:
        async with session.put(f"{API_URL}/state-entities/{access_code}/status", json={"is_active": is_active}) as response:
            return await response.json()

# üîÑ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è `entity_state_map`
async def get_states(entity_access_key: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ `entity_access_key`."""
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{API_URL}/entity-state-map/{entity_access_key}") as response:
            return await response.json()

async def create_state_mapping(entity_access_key: str, state_data: dict):
    """–ü—Ä–∏–≤—è–∑–∞—Ç—å `access_code` –∫ `entity_access_key`."""
    async with aiohttp.ClientSession() as session:
        async with session.post(f"{API_URL}/entity-state-map/{entity_access_key}", json=state_data) as response:
            return await response.json()

async def update_state_mapping(entity_access_key: str, state_data: dict):
    """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è (`access_code` ‚Üî `entity_access_key`)."""
    async with aiohttp.ClientSession() as session:
        async with session.put(f"{API_URL}/entity-state-map/{entity_access_key}", json=state_data) as response:
            return await response.json()