# Discord_API\app_cache\discord_redis_client.py

import json
import logging
from typing import Any, Optional
import redis.asyncio as aioredis

from Discord_API.discord_settings import REDIS_BOT_LOCAL_POOL_SIZE, REDIS_BOT_LOCAL_URL

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –∏–∑ –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–µ–∫—Ç–∞



class DiscordRedisClient:
    """
    –ù–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Redis-—Å–µ—Ä–≤–µ—Ä–æ–º Discord-–±–æ—Ç–∞.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ Redis.
    """
    def __init__(
        self,
        redis_url: str = REDIS_BOT_LOCAL_URL,
        max_connections: int = REDIS_BOT_LOCAL_POOL_SIZE,
        # redis_password: Optional[str] = None # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –≤ URL –∏ –Ω—É–∂–µ–Ω, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ
    ):
        self.logger = logging.getLogger("discord_redis_client")
        try:
            # redis_url —É–∂–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–∞—Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, redis://:password@host:port/db)
            self.redis = aioredis.from_url(
                redis_url,
                # password=redis_password, # –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å, –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ –≤—Å—Ç—Ä–æ–µ–Ω –≤ URL
                decode_responses=True, # –í–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤–º–µ—Å—Ç–æ –±–∞–π—Ç–æ–≤
                socket_timeout=5,
                socket_connect_timeout=5,
                max_connections=max_connections,
            )
            self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É Redis –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ: {redis_url}")
        except Exception as e:
            self.logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É Redis –±–æ—Ç–∞: {str(e)}", exc_info=True)
            raise ConnectionError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É Redis –±–æ—Ç–∞: {str(e)}")

    async def ping(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
        try:
            is_alive = await self.redis.ping()
            if not is_alive:
                self.logger.warning("–õ–æ–∫–∞–ª—å–Ω—ã–π Redis –±–æ—Ç–∞ ping –≤–µ—Ä–Ω—É–ª False (—Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω?)")
            return is_alive
        except Exception as e:
            self.logger.error(f"–õ–æ–∫–∞–ª—å–Ω—ã–π Redis –±–æ—Ç–∞ ping failed: {str(e)}")
            return False

    def pubsub(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Pub/Sub –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Redis (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω—É–∂–¥ –±–æ—Ç–∞)."""
        return self.redis.pubsub()

    def pipeline(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ Redis-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."""
        return self.redis.pipeline()

    async def unlink(self, key: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."""
        await self.redis.unlink(key)

    async def expire(self, key: str, seconds: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞."""
        await self.redis.expire(key, seconds)

    async def ttl(self, key: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞."""
        return await self.redis.ttl(key)

    async def incr(self, key: str, amount: int = 1):
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è."""
        return await self.redis.incr(key, amount)

    async def decr(self, key: str, amount: int = 1):
        """–£–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è."""
        return await self.redis.decr(key, amount)

    async def zadd(self, key: str, score: float, member: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ."""
        await self.redis.zadd(key, {member: score})

    async def zrange(self, key: str, start: int, stop: int, withscores: bool = True):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞."""
        return await self.redis.zrange(key, start, stop, withscores=withscores)

    async def hkeys(self, key: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π (–∫–ª—é—á–µ–π) —Ö—ç—à–∞ –≤ Redis."""
        return await self.redis.hkeys(key)

    async def hset(self, key: str, field: str, value: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—è –≤ —Ö—ç—à–µ."""
        await self.redis.hset(key, field, value)

    async def hget(self, key: str, field: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ —Ö—ç—à–∞."""
        return await self.redis.hget(key, field)

    async def hgetall(self, key: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Ö—ç—à–∞."""
        return await self.redis.hgetall(key)

    async def hdel(self, key: str, *fields: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª–µ–π –∏–∑ —Ö—ç—à–∞ Redis."""
        return await self.redis.hdel(key, *fields)

    async def setnx(self, key: str, value: str):
        """–ó–∞–ø–∏—Å—å –∫–ª—é—á–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç (–∞—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)."""
        return await self.redis.setnx(key, value)

    async def publish(self, channel: str, message: str):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –±–æ—Ç—É –Ω—É–∂–µ–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π Pub/Sub)."""
        return await self.redis.publish(channel, message)

    async def set(self, key: str, value: str):
        await self.redis.set(key, value)

    async def get(self, key: str):
        return await self.redis.get(key)

    async def delete(self, key: str):
        await self.redis.delete(key)

    async def exists(self, key: str):
        return bool(await self.redis.exists(key))

    async def keys(self, pattern: str = "*"):
        """
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞ –±–æ–ª—å—à–∏—Ö –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö.
        –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ SCAN.
        """
        return await self.redis.keys(pattern)

    async def rpush(self, key: str, value):
        return await self.redis.rpush(key, value)

    async def lrange(self, key: str, start: int, stop: int):
        return await self.redis.lrange(key, start, stop)

    async def ltrim(self, key: str, start: int, stop: int):
        await self.redis.ltrim(key, start, stop)

    async def llen(self, key: str):
        return await self.redis.llen(key)

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis."""
        await self.redis.aclose()

    async def get_task_keys(self, queue_name: str, use_lrange: bool = False):
        """
        –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∑–∞–¥–∞—á.
        (–û—Å—Ç–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ –±–æ—Ç –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º Redis).
        """
        if use_lrange:
            return await self.redis.lrange(queue_name, 0, -1)
        return await self.redis.keys(queue_name)

    async def get_tick_tasks(self, queue_name: str):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –æ—á–µ—Ä–µ–¥–∏ Redis.
        (–û—Å—Ç–∞–≤–ª–µ–Ω, –µ—Å–ª–∏ –±–æ—Ç –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ–∏ —Ç–∏–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º Redis).
        """
        return await self.redis.lrange(queue_name, 0, -1)

    async def set_json(self, key: str, value: dict):
        """–°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç dict –≤ JSON –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Redis."""
        # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ RedisJSON –º–æ–¥—É–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è,
        # –Ω–æ –¥–∞–∂–µ –±–µ–∑ –Ω–µ–≥–æ —ç—Ç–æ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—è JSON-—Å—Ç—Ä–æ–∫—É.
        await self.redis.set(key, json.dumps(value))

    async def get_json(self, key: str) -> Optional[dict]:
        """–ß–∏—Ç–∞–µ—Ç JSON –∏–∑ Redis –∏ –ø–∞—Ä—Å–∏—Ç –≤ dict."""
        data = await self.redis.get(key)
        return json.loads(data) if data else None

    async def get_or_default(self, key: str, default: Any = None) -> Any:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç default, –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç."""
        value = await self.redis.get(key)
        return value if value is not None else default


# –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ Redis –±–æ—Ç–∞
discord_redis_client = DiscordRedisClient()

# üìå –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: (–≠—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ —Ñ–∞–π–ª–∞)
if __name__ == "__main__":
    import asyncio
    import os
    from dotenv import load_dotenv

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
    load_dotenv(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..', '.env')))

    async def test_discord_redis_client():
        print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DiscordRedisClient...")
        try:
            # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ REDIS_BOT_LOCAL_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env
            # –ù–∞–ø—Ä–∏–º–µ—Ä, REDIS_BOT_LOCAL_URL=redis://localhost:6379/0
            client = DiscordRedisClient() 
            await client.set("test_bot_key", "hello from discord bot's local redis")
            value = await client.get("test_bot_key")
            print(f"Retrieved from local Redis: {value}")
            await client.delete("test_bot_key")
            print("test_bot_key —É–¥–∞–ª–µ–Ω.")

            await client.set_json("test_bot_json_key", {"user_id": 123, "data": "some_data"})
            json_data = await client.get_json("test_bot_json_key")
            print(f"Retrieved JSON: {json_data}")
            await client.delete("test_bot_json_key")
            print("test_bot_json_key —É–¥–∞–ª–µ–Ω.")

        except ConnectionError as ce:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Redis: {ce}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω –∏ REDIS_BOT_LOCAL_URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
        finally:
            if 'client' in locals() and hasattr(client, 'close'):
                await client.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º Redis –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–æ (–µ—Å–ª–∏ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ).")

    asyncio.run(test_discord_redis_client())