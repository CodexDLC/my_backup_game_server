import uuid
from datetime import datetime, timezone
from typing import Any, Dict, List
import discord
from typing import Tuple # <-- –≠–¢–û –ü–†–ê–í–ò–õ–¨–ù–û


from Discord_API.api_route_function.spec_route.discord_bindings_api import DiscordAPIClientError, get_all_discord_bindings_api
from Discord_API.api_route_function.system.system_gameworld_api import get_current_world

from Discord_API.config.logging.logging_setup import logger

from Discord_API.api_route_function.system.system_gameworld_api import get_all_regions, get_current_world, get_subregions






# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–æ–∫ –∏–∑ –ë–î ---
async def _get_existing_db_bindings_maps(guild_id: int) -> Tuple[Dict[str, Dict], Dict[str, Dict], Dict[str, str]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ Discord-–ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥–∏–ª—å–¥–∏–∏
    –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –≤ –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞.

    Args:
        guild_id (int): ID –≥–∏–ª—å–¥–∏–∏ Discord.

    Returns:
        Tuple[Dict[str, Dict], Dict[str, Dict], Dict[str, str]]: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä—ë—Ö —Å–ª–æ–≤–∞—Ä–µ–π:
        - existing_category_bindings_map: {access_key_—Ä–µ–≥–∏–æ–Ω–∞: –ø–æ–ª–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ_–ø—Ä–∏–≤—è–∑–∫–∏_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏}
        - existing_channel_bindings_map: {access_key_—Å—É–±—Ä–µ–≥–∏–æ–Ω–∞: –ø–æ–ª–Ω—ã–µ_–¥–∞–Ω–Ω—ã–µ_–ø—Ä–∏–≤—è–∑–∫–∏_–∫–∞–Ω–∞–ª–∞}
        - parent_access_key_to_discord_category_id_map: {access_key_—Ä–µ–≥–∏–æ–Ω–∞: Discord_category_id}
                                                         (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π)

    Raises:
        DiscordAPIClientError: –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç API.
    """
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –∏–∑ –ë–î –¥–ª—è –≥–∏–ª—å–¥–∏–∏ {guild_id}.")
    
    existing_db_bindings: List[Dict[str, Any]] = []
    try:
        existing_db_bindings = await get_all_discord_bindings_api(guild_id)
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(existing_db_bindings)} –ø—Ä–∏–≤—è–∑–æ–∫ –∏–∑ –ë–î.")
    except DiscordAPIClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –∏–∑ –ë–î: {e}", exc_info=True)
        raise # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å

    existing_category_bindings_map: Dict[str, Dict[str, Any]] = {}
    existing_channel_bindings_map: Dict[str, Dict[str, Any]] = {}
    parent_access_key_to_discord_category_id_map: Dict[str, str] = {}

    for binding in existing_db_bindings:
        db_access_key = binding.get("access_key")
        db_category_id = binding.get("category_id")
        db_channel_id = binding.get("channel_id")

        if db_access_key:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å—Ç—å category_id, –Ω–æ –Ω–µ—Ç channel_id)
            if db_category_id and not db_channel_id:
                existing_category_bindings_map[db_access_key] = binding
                if db_category_id is not None:
                    parent_access_key_to_discord_category_id_map[db_access_key] = str(db_category_id)
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤—è–∑–∫–∞ –∫–∞–Ω–∞–ª–∞ (–µ—Å—Ç—å channel_id)
            elif db_channel_id:
                existing_channel_bindings_map[db_access_key] = binding
            else:
                logger.warning(f"–ü—Ä–∏–≤—è–∑–∫–∞ –∏–∑ –ë–î —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–∏–ø–æ–º (–Ω–µ—Ç category_id/channel_id, access_key={db_access_key}): {binding}")
        else:
            logger.warning(f"–ü—Ä–∏–≤—è–∑–∫–∞ –∏–∑ –ë–î –±–µ–∑ 'access_key': {binding}")

    logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∫–∞—Ä—Ç—ã –ø—Ä–∏–≤—è–∑–æ–∫: –ö–∞—Ç–µ–≥–æ—Ä–∏–π - {len(existing_category_bindings_map)}, –ö–∞–Ω–∞–ª–æ–≤ - {len(existing_channel_bindings_map)}.")
    return existing_category_bindings_map, existing_channel_bindings_map, parent_access_key_to_discord_category_id_map

# --- –í–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ: ---

def build_binding_batch(bindings_info: List[Dict]) -> List[Dict]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –≤—Å—Ç–∞–≤–∫–∏, –≤–∫–ª—é—á–∞—è `guild_id`."""
    binding_batch = []
    for info in bindings_info:
        logger.debug(f"‚ÑπÔ∏è `datetime` —Å–µ–π—á–∞—Å: {datetime}") # –ó–∞–º–µ–Ω–∏–ª print –Ω–∞ logger
        logger.debug(f"üöÄ UTC-–≤—Ä–µ–º—è: {datetime.now(timezone.utc).isoformat()}") # –ó–∞–º–µ–Ω–∏–ª print –Ω–∞ logger
        binding_data = {
            "guild_id": info["guild_id"],  
            "world_id": str(info.get("world_id", uuid.uuid4())),  
            "access_key": info.get("access_key", "default_key"),
            "permissions": info.get("permissions", 0),
            "category_id": info.get("category_id"),
            "channel_id": info.get("channel_id"),
            "category_name": info.get("category_name"), # –î–æ–±–∞–≤–∏–ª –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            "channel_name": info.get("channel_name"),   # –î–æ–±–∞–≤–∏–ª –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            "description": info.get("description", "") # –î–æ–±–∞–≤–∏–ª –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        }
        logger.debug(f"üìå –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞ –≤ –ø–∞–∫–µ—Ç: {binding_data}") # –ó–∞–º–µ–Ω–∏–ª print –Ω–∞ logger
        binding_batch.append(binding_data)
    return binding_batch


async def collect_world_data():
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –º–∏—Ä, —Ä–µ–≥–∏–æ–Ω—ã –∏ –ø–æ–¥—Ä–µ–≥–∏–æ–Ω—ã, —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –≤ –ø–∞–º—è—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ `collect_world_data()`...")

    world_data = await get_current_world()
    logger.debug(f"üîç –î–∞–Ω–Ω—ã–µ –º–∏—Ä–∞: {world_data}")
    
    if not world_data or "world_id" not in world_data:
        logger.error("üö® –û—à–∏–±–∫–∞: –ú–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

    world_id = world_data["world_id"]
    
    all_regions = await get_all_regions()
    logger.debug(f"üîç –í—Å–µ —Ä–µ–≥–∏–æ–Ω—ã: {all_regions}")

    regions = [region for region in all_regions if region.get("world_id") == world_id]
    logger.debug(f"‚úÖ –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã: {regions}")

    all_subregions = await get_subregions()
    logger.info(f"DEBUG: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ get_subregions(): {all_subregions}") # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ
    
    logger.debug(f"–í—Å–µ–≥–æ –ø–æ–¥—Ä–µ–≥–∏–æ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã: {len(all_subregions)}")
    # logger.debug(f"üîç –í—Å–µ –ø–æ–¥—Ä–µ–≥–∏–æ–Ω—ã (–ø–æ–¥—Ä–æ–±–Ω–æ): {all_subregions}") # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ –ª–æ–≥–≥–µ—Ä

    subregions_map = {
        region["access_key"]: [
            subregion for subregion in all_subregions if subregion["parent_access_key"] == region["access_key"]
        ]
        for region in regions
    }
    logger.debug(f"‚úÖ –ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∫ –ø–æ–¥—Ä–µ–≥–∏–æ–Ω–∞–º: {subregions_map}")

    collected_data = {
        "world_id": world_id,
        "world_name": world_data["world_name"],
        "regions": regions,
        "subregions": subregions_map
    }
    
    logger.debug(f"üìä –†–∞–∑–º–µ—Ä `regions`: {len(regions)}, `subregions_map`: {sum(len(v) for v in subregions_map.values())}")
    logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    return collected_data


async def create_category_if_not_exists(guild: discord.Guild, region_name: str) -> discord.CategoryChannel:
    """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    
    logger.info(f"üöÄ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {region_name}") # –ó–∞–º–µ–Ω–∏–ª print –Ω–∞ logger

    category = discord.utils.get(guild.categories, name=region_name)
    
    if category:
        logger.info(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {category.name} (ID: {category.id})") # –ó–∞–º–µ–Ω–∏–ª print –Ω–∞ logger
    else:
        logger.warning(f"‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é: {region_name}") # –ó–∞–º–µ–Ω–∏–ª print –Ω–∞ logger
        category = await guild.create_category(name=region_name)
        
    return category

async def create_text_channel_if_not_exists(category: discord.CategoryChannel, subregion_name: str, description: str) -> discord.TextChannel:
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥—Ä–µ–≥–∏–æ–Ω–∞, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."""
    
    channel = discord.utils.get(category.text_channels, name=subregion_name)
    
    if not channel:
        logger.info(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª '{subregion_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}', —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
        channel = await category.create_text_channel(name=subregion_name, topic=description)
        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª '{subregion_name}' (ID: {channel.id}) —Å–æ–∑–¥–∞–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}'.")
    else:
        logger.info(f"‚úÖ –ö–∞–Ω–∞–ª '{subregion_name}' (ID: {channel.id}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}'.")
    
    return channel


async def _prepare_category_bindings_for_upsert(
    collected_data: Dict[str, Any], 
    existing_category_bindings_map: Dict[str, Dict[str, Any]],
    # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å map –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    parent_access_key_to_discord_category_id_map: Dict[str, str] 
) -> List[Dict[str, Any]]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ Discord-–∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ä–µ–≥–∏–æ–Ω–æ–≤) –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
    –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏—Ö –¥–ª—è UPSERT. –¢–∞–∫–∂–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –∫–∞—Ä—Ç—É Discord category_id –¥–ª—è
    —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

    Args:
        collected_data (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–∏—Ä–µ –∏ —Ä–µ–≥–∏–æ–Ω–∞—Ö.
        existing_category_bindings_map (Dict[str, Dict[str, Any]]): –ö–∞—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
                                                                    –ø—Ä–∏–≤—è–∑–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î.
        parent_access_key_to_discord_category_id_map (Dict[str, str]): –ö–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è
                                                                      –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ access_key —Ä–µ–≥–∏–æ–Ω–∞
                                                                      –∏ –µ–≥–æ Discord category_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–≤—è–∑–æ–∫.

    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≤—è–∑–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å.
    """
    logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è UPSERT.")
    
    regions = collected_data.get("regions", [])
    world_id = collected_data.get("world_id")
    
    bindings_to_upsert: List[Dict[str, Any]] = []
    
    for region in regions:
        region_access_key = region["access_key"]
        region_name = region["region_name"]
        
        if region_access_key not in existing_category_bindings_map:
            # –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –≤ –ë–î, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
            logger.debug(f"–ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{region_name}' (Access Key: '{region_access_key}') –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î. –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ UPSERT.")
            bindings_to_upsert.append({
                "guild_id": None, # guild_id –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ
                "world_id": world_id,
                "access_key": region_access_key,
                "permissions": 0,
                "category_id": None, # Discord ID –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ Discord
                "channel_id": None, 
                "category_name": region_name,
                "description": region.get("description", "")
            })
        else:
            # –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –£–ñ–ï –ï–°–¢–¨ –≤ –ë–î, —Ç–æ –±–µ—Ä—ë–º –µ—ë Discord ID
            # –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞—Ä—Ç—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–æ–≤.
            db_binding = existing_category_bindings_map[region_access_key]
            if "category_id" in db_binding and db_binding["category_id"] is not None:
                parent_access_key_to_discord_category_id_map[region_access_key] = str(db_binding["category_id"])
                logger.debug(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{region_name}' (Access Key: '{region_access_key}') –∏–º–µ–µ—Ç Discord ID: {db_binding['category_id']}.")
            else:
                logger.warning(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{region_name}' (Access Key: '{region_access_key}') –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç Discord category_id. "
                               f"–û–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π, –∫–∞–Ω–∞–ª—ã –¥–ª—è –Ω–µ—ë –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ Discord ID.")

    logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(bindings_to_upsert)} –Ω–æ–≤—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è UPSERT. –ó–∞–ø–æ–ª–Ω–µ–Ω–æ {len(parent_access_key_to_discord_category_id_map)} Discord category_id –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    return bindings_to_upsert




async def get_bindings_to_create_or_update(guild_id: int, collected_data: Dict[str, Any]) -> List[Dict[str, Any]]:
    """
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–æ–∫ Discord (–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∫–∞–Ω–∞–ª–æ–≤),
    –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        guild_id (int): ID –≥–∏–ª—å–¥–∏–∏ Discord.
        collected_data (Dict[str, Any]): –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–∏—Ä–µ, —Ä–µ–≥–∏–æ–Ω–∞—Ö –∏ —Å—É–±—Ä–µ–≥–∏–æ–Ω–∞—Ö,
                                       –ø–æ–ª—É—á–µ–Ω–Ω—ã–º–∏ –∏–∑ collect_world_data().

    Returns:
        List[Dict[str, Any]]: –ï–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –ø—Ä–∏–≤—è–∑–∫–∏,
                              –≥–æ—Ç–æ–≤—ã–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ UPSERT.
    """
    logger.info(f"–ó–∞–ø—É—Å–∫ `get_bindings_to_create_or_update` –¥–ª—è guild_id={guild_id}.")

    # 1. –ü–æ–ª—É—á–∞–µ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∏–∑ –ë–î
    existing_category_bindings_map, existing_channel_bindings_map, parent_access_key_to_discord_category_id_map = \
        await _get_existing_db_bindings_maps(guild_id)

    all_bindings_to_upsert: List[Dict[str, Any]] = []

    # 2. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    # –ü–µ—Ä–µ–¥–∞—ë–º –∫–∞—Ä—Ç—É –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è category_id —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    category_bindings_for_upsert = await _prepare_category_bindings_for_upsert(
        collected_data,
        existing_category_bindings_map,
        parent_access_key_to_discord_category_id_map # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—É –∂–µ –∫–∞—Ä—Ç—É
    )
    all_bindings_to_upsert.extend(category_bindings_for_upsert)
    
    # 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    # –ö–∞—Ä—Ç–∞ parent_access_key_to_discord_category_id_map —Ç–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ Discord ID
    # –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    channel_bindings_for_upsert = await _prepare_channel_bindings_for_upsert(
        collected_data,
        existing_channel_bindings_map,
        parent_access_key_to_discord_category_id_map
    )
    all_bindings_to_upsert.extend(channel_bindings_for_upsert)

    # 4. –î–æ–±–∞–≤–ª—è–µ–º guild_id –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Å–ø–∏—Å–∫–µ
    # –≠—Ç–æ —É–¥–æ–±–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å guild_id –≤ –∫–∞–∂–¥—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    for binding_data in all_bindings_to_upsert:
        if "guild_id" not in binding_data or binding_data["guild_id"] is None:
            binding_data["guild_id"] = guild_id
    
    logger.info(f"–í—Å–µ–≥–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(all_bindings_to_upsert)} –ø—Ä–∏–≤—è–∑–æ–∫ –¥–ª—è UPSERT.")
    return all_bindings_to_upsert


async def _prepare_channel_bindings_for_upsert(
    collected_data: Dict[str, Any],
    existing_channel_bindings_map: Dict[str, Dict[str, Any]],
    parent_access_key_to_discord_category_id_map: Dict[str, str]
) -> List[Dict[str, Any]]:
    logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–≤—è–∑–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è UPSERT.")
    
    # --- –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –õ–û–ì–ò ---
    logger.debug(f"DEBUG: collected_data –ø–æ–ª—É—á–µ–Ω—ã –≤ _prepare_channel_bindings_for_upsert: {collected_data}")
    # ^^^ –≠—Ç–æ—Ç –ª–æ–≥ –ø–æ–∫–∞–∂–µ—Ç –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å collected_data
    
    world_id = collected_data.get("world_id")
    subregions_map = collected_data.get("subregions", {}) # <-- –ó–¥–µ—Å—å –±–µ—Ä–µ—Ç—Å—è subregions_map
    
    logger.debug(f"DEBUG: subregions_map, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ collected_data: {subregions_map}")
    # ^^^ –≠—Ç–æ—Ç –ª–æ–≥ –ø–æ–∫–∞–∂–µ—Ç, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ subregions_map –ø–æ—Å–ª–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ù–´–• –õ–û–ì–û–í ---

    bindings_to_upsert: List[Dict[str, Any]] = []

    for parent_ak, subregions in subregions_map.items():
        discord_category_id_for_parent = parent_access_key_to_discord_category_id_map.get(parent_ak)

        if not discord_category_id_for_parent:
            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É–±—Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ access_key='{parent_ak}', "
                            f"—Ç–∞–∫ –∫–∞–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è Discord –∫–∞—Ç–µ–≥–æ—Ä–∏—è –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ (–Ω–µ—Ç category_id –≤ –ë–î).")
            continue

        for subregion in subregions:
            subregion_access_key = subregion["access_key"]
            subregion_name = subregion["subregion_name"]

            if subregion_access_key not in existing_channel_bindings_map:
                logger.debug(f"–ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞–Ω–∞–ª–∞ '{subregion_name}' (Access Key: '{subregion_access_key}') –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î. –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ UPSERT.")
                bindings_to_upsert.append({
                    "guild_id": None,
                    "world_id": world_id,
                    "access_key": subregion_access_key,
                    "permissions": 0,
                    "category_id": discord_category_id_for_parent,
                    "channel_id": None,
                    "channel_name": subregion_name,
                    "description": subregion.get("description", ""),
                    "parent_access_key": parent_ak
                })

    logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(bindings_to_upsert)} –Ω–æ–≤—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è UPSERT.")
    return bindings_to_upsert