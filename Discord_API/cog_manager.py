import os
from discord.ext import commands
from Discord_API.config.logging.logging_setup import logger

class CommandsManager:
    def __init__(self, bot, cogs_directory="cogs"):
        """
        –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–≥–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        :param bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        :param cogs_directory: –ø–∞–ø–∫–∞ —Å –∫–æ–≥–∞–º–∏
        """
        self.bot = bot
        self.cogs_directory = os.path.join(
            os.path.dirname(os.path.abspath(__file__)),
            cogs_directory
        )
        self.EXCLUDED_FOLDERS = ["blueprints", "interface_templates"]
        self.loaded_cogs = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–≥–æ–≤
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–≥–æ–≤. –ü—É—Ç—å: {self.cogs_directory}")

    def _get_cog_path(self, root, filename):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–æ–≥—É"""
        relative_path = os.path.relpath(root, self.cogs_directory).replace(os.sep, ".")
        return f"cogs.{relative_path}.{filename[:-3]}" if relative_path != "." else f"cogs.{filename[:-3]}"

    async def load_cogs(self):
        if not os.path.exists(self.cogs_directory):
            logger.error(f"üö® –ü–∞–ø–∫–∞ —Å –∫–æ–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.cogs_directory}")
            return False

        success_count = 0
        logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏: {self.cogs_directory}")

        for root, dirs, files in os.walk(self.cogs_directory):
            dirs[:] = [d for d in dirs if d not in self.EXCLUDED_FOLDERS]
            logger.debug(f"üìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É: {root}")

            for filename in files:
                if filename.endswith(".py") and filename != "__init__.py":
                    cog_name = self._get_cog_path(root, filename)
                    logger.debug(f"üßê –ù–∞–π–¥–µ–Ω –∫–æ–≥: {cog_name}, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å...")

                    if await self._load_single_cog(cog_name):
                        success_count += 1
                        logger.info(f"‚úÖ –ö–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ: {cog_name}")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞: {cog_name}")

        logger.info(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {success_count} –∫–æ–≥–æ–≤.")
        return success_count > 0

    async def _load_single_cog(self, cog_name):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–∏–Ω –∫–æ–≥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await self.bot.load_extension(cog_name)
            self.loaded_cogs.add(cog_name)
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ–≥: {cog_name}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞ {cog_name}: {type(e).__name__}: {e}")
            return False

    async def reload_cogs(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∫–æ–≥–∏"""
        if not self.loaded_cogs:
            logger.warning("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–≥–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
            return False

        success_count = 0
        for cog_name in list(self.loaded_cogs):
            if await self._reload_single_cog(cog_name):
                success_count += 1

        logger.info(f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(self.loaded_cogs)}")
        return success_count == len(self.loaded_cogs)

    async def _reload_single_cog(self, cog_name):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –æ–¥–∏–Ω –∫–æ–≥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            await self.bot.reload_extension(cog_name)
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ–≥: {cog_name}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞ {cog_name}: {type(e).__name__}: {e}")
            self.loaded_cogs.discard(cog_name)  # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return False

    async def unload_cogs(self):
        """–í—ã–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∫–æ–≥–∏ (–¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã)"""
        for cog_name in list(self.loaded_cogs):
            try:
                await self.bot.unload_extension(cog_name)
                self.loaded_cogs.remove(cog_name)
                logger.info(f"–í—ã–≥—Ä—É–∂–µ–Ω –∫–æ–≥: {cog_name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞ {cog_name}: {e}")

async def setup(bot):
    manager = CommandsManager(bot)
    await manager.load_cogs()

    @commands.command(name="reload")
    @commands.is_owner()
    async def reload_command(ctx):
        await manager.unload_cogs()
        if await manager.load_cogs():
            await ctx.send("‚úÖ –í—Å–µ –∫–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        else:
            await ctx.send("‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

    bot.remove_command("reload")
    bot.add_command(reload_command)


