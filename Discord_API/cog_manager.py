import os
import discord # <--- –ò–∑–º–µ–Ω–µ–Ω–æ
from discord.ext import commands # <--- –ò–∑–º–µ–Ω–µ–Ω–æ
from Discord_API.config.logging.logging_setup_discod import logger

class CommandsManager: # –£–±—Ä–∞–Ω–æ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç Cog, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    def __init__(self, bot: commands.Bot, base_dir="Discord_API/cogs"):
        self.bot = bot
        self.base_dir = os.path.abspath(base_dir)
        
        self.EXCLUDED_DIRS = {"__pycache__", "blueprints", "interface_templates", "utils"}
        self.EXCLUDED_FILES = {"__init__.py", "setup_world.txt", "channels_config.json"}
        self.EXCLUDED_PREFIXES = ("_",)
        
        self.loaded_cogs = set()
        logger.info(f"üöÄ –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–≥–æ–≤ | –ë–∞–∑–æ–≤—ã–π –ø—É—Ç—å: {self.base_dir}")

    def _is_valid_cog(self, path: str) -> bool:
        filename = os.path.basename(path)
        dirname = os.path.basename(os.path.dirname(path))
        if filename in self.EXCLUDED_FILES or filename.startswith(self.EXCLUDED_PREFIXES) or dirname in self.EXCLUDED_DIRS:
            return False
        return filename.endswith(".py")

    def _path_to_module(self, path: str) -> str:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ø—É—Ç—å –≤–∏–¥–∞ /app/Discord_API/cogs/admin/cmd.py 
        # –≤ —Ñ–æ—Ä–º–∞—Ç Discord_API.cogs.admin.cmd
        rel_path = os.path.relpath(path, start=os.path.join(self.base_dir, "..", ".."))
        return rel_path.replace(".py", "").replace(os.sep, ".")

    async def load_cogs(self) -> bool:
        if not os.path.exists(self.base_dir):
            logger.error(f"‚ùå –ü–∞–ø–∫–∞ –∫–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.base_dir}")
            return False

        logger.info(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–≥–æ–≤ –≤: {self.base_dir}")
        success_count = 0
        total_files = 0

        for root, dirs, files in os.walk(self.base_dir):
            dirs[:] = [d for d in dirs if d not in self.EXCLUDED_DIRS]
            for filename in files:
                file_path = os.path.join(root, filename)
                total_files += 1
                if self._is_valid_cog(file_path):
                    module_name = self._path_to_module(file_path)
                    logger.debug(f"‚öôÔ∏è –ù–∞–π–¥–µ–Ω –∫–æ–≥: {module_name}")
                    if await self._load_cog(module_name):
                        success_count += 1
                else:
                    logger.debug(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω: {filename}")

        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–≥–æ–≤: {success_count} –∏–∑ {total_files} —Ñ–∞–π–ª–æ–≤")
        return success_count > 0

    async def _load_cog(self, module_name: str) -> bool:
        try:
            await self.bot.load_extension(module_name)
            self.loaded_cogs.add(module_name)
            logger.success(f"‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω: {module_name}") # –ò—Å–ø–æ–ª—å–∑—É–µ–º logger.success –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞ {module_name}", exc_info=True)
            return False

    # –§—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ —É –≤–∞—Å
    async def reload_cogs(self):
        for cog in self.loaded_cogs:
            try:
                await self.bot.reload_extension(cog)
                logger.success(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω: {cog}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–≥–∞ {cog}", exc_info=True)

# –§—É–Ω–∫—Ü–∏—è setup –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–æ–≥–æ –∫–æ–≥–∞ CommandsManager
async def setup(bot: commands.Bot): # <-- üî•üî•üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨: –Ø–í–ù–ê–Ø –¢–ò–ü–ò–ó–ê–¶–ò–Ø bot üî•üî•üî•
    """
    –§—É–Ω–∫—Ü–∏—è setup –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç—Ç–æ–≥–æ –∫–æ–≥–∞ (CommandsManager) –≤ –±–æ—Ç–∞.
    """
    manager_cog = CommandsManager(bot)
    bot.add_cog(manager_cog) # –î–æ–±–∞–≤–ª—è–µ–º CommandsManager –∫–∞–∫ –∫–æ–≥
    
    logger.info("CommandsManager Cog –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–≥–æ–≤...")
    # üî•üî•üî• –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å setup_hook –≤ main.py –≤—ã–∑—ã–≤–∞–µ—Ç manager_cog.load_cogs() –Ω–∞–ø—Ä—è–º—É—é.
    # –¢–∞–∫ —á—Ç–æ –∑–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –∫–æ–≥-–º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω.
    # –†–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–≥–æ–≤ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ main.py.
    # –£–î–ê–õ–ò–¢–ï –≠–¢–£ –°–¢–†–û–ö–£, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤ –∂–¥–∞–ª–∞ –≤ setup_hook –≤ main.py
    # await manager_cog.load_cogs() # <--- –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã setup —ç—Ç–æ–≥–æ –∫–æ–≥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–∞–≥—Ä—É–∑–∫—É, –¥–æ–±–∞–≤—å—Ç–µ await
    # –ù–æ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏, —ç—Ç–æ –¥–µ–ª–∞–µ—Ç setup_hook –≤ main.py